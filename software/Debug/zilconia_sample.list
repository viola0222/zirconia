
zilconia_sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2dc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800c4c0  0800c4c0  0001c4c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c920  0800c920  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800c920  0800c920  0001c920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c928  0800c928  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c928  0800c928  0001c928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c92c  0800c92c  0001c92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800c930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  20000210  0800cb40  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  0800cb40  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d9de  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b7d  00000000  00000000  0003dc1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c8  00000000  00000000  000417a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d0  00000000  00000000  00042a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025edc  00000000  00000000  00043b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015798  00000000  00000000  00069a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5de5  00000000  00000000  0007f1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154f91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005db8  00000000  00000000  0015500c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c4a4 	.word	0x0800c4a4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	0800c4a4 	.word	0x0800c4a4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_frsub>:
 8000cd8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cdc:	e002      	b.n	8000ce4 <__addsf3>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_fsub>:
 8000ce0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ce4 <__addsf3>:
 8000ce4:	0042      	lsls	r2, r0, #1
 8000ce6:	bf1f      	itttt	ne
 8000ce8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cec:	ea92 0f03 	teqne	r2, r3
 8000cf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf8:	d06a      	beq.n	8000dd0 <__addsf3+0xec>
 8000cfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d02:	bfc1      	itttt	gt
 8000d04:	18d2      	addgt	r2, r2, r3
 8000d06:	4041      	eorgt	r1, r0
 8000d08:	4048      	eorgt	r0, r1
 8000d0a:	4041      	eorgt	r1, r0
 8000d0c:	bfb8      	it	lt
 8000d0e:	425b      	neglt	r3, r3
 8000d10:	2b19      	cmp	r3, #25
 8000d12:	bf88      	it	hi
 8000d14:	4770      	bxhi	lr
 8000d16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4240      	negne	r0, r0
 8000d26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d32:	bf18      	it	ne
 8000d34:	4249      	negne	r1, r1
 8000d36:	ea92 0f03 	teq	r2, r3
 8000d3a:	d03f      	beq.n	8000dbc <__addsf3+0xd8>
 8000d3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d40:	fa41 fc03 	asr.w	ip, r1, r3
 8000d44:	eb10 000c 	adds.w	r0, r0, ip
 8000d48:	f1c3 0320 	rsb	r3, r3, #32
 8000d4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__addsf3+0x78>
 8000d56:	4249      	negs	r1, r1
 8000d58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d60:	d313      	bcc.n	8000d8a <__addsf3+0xa6>
 8000d62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d66:	d306      	bcc.n	8000d76 <__addsf3+0x92>
 8000d68:	0840      	lsrs	r0, r0, #1
 8000d6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d6e:	f102 0201 	add.w	r2, r2, #1
 8000d72:	2afe      	cmp	r2, #254	; 0xfe
 8000d74:	d251      	bcs.n	8000e1a <__addsf3+0x136>
 8000d76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7e:	bf08      	it	eq
 8000d80:	f020 0001 	biceq.w	r0, r0, #1
 8000d84:	ea40 0003 	orr.w	r0, r0, r3
 8000d88:	4770      	bx	lr
 8000d8a:	0049      	lsls	r1, r1, #1
 8000d8c:	eb40 0000 	adc.w	r0, r0, r0
 8000d90:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d94:	f1a2 0201 	sub.w	r2, r2, #1
 8000d98:	d1ed      	bne.n	8000d76 <__addsf3+0x92>
 8000d9a:	fab0 fc80 	clz	ip, r0
 8000d9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000da2:	ebb2 020c 	subs.w	r2, r2, ip
 8000da6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000daa:	bfaa      	itet	ge
 8000dac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000db0:	4252      	neglt	r2, r2
 8000db2:	4318      	orrge	r0, r3
 8000db4:	bfbc      	itt	lt
 8000db6:	40d0      	lsrlt	r0, r2
 8000db8:	4318      	orrlt	r0, r3
 8000dba:	4770      	bx	lr
 8000dbc:	f092 0f00 	teq	r2, #0
 8000dc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dc4:	bf06      	itte	eq
 8000dc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dca:	3201      	addeq	r2, #1
 8000dcc:	3b01      	subne	r3, #1
 8000dce:	e7b5      	b.n	8000d3c <__addsf3+0x58>
 8000dd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	bf18      	it	ne
 8000dda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dde:	d021      	beq.n	8000e24 <__addsf3+0x140>
 8000de0:	ea92 0f03 	teq	r2, r3
 8000de4:	d004      	beq.n	8000df0 <__addsf3+0x10c>
 8000de6:	f092 0f00 	teq	r2, #0
 8000dea:	bf08      	it	eq
 8000dec:	4608      	moveq	r0, r1
 8000dee:	4770      	bx	lr
 8000df0:	ea90 0f01 	teq	r0, r1
 8000df4:	bf1c      	itt	ne
 8000df6:	2000      	movne	r0, #0
 8000df8:	4770      	bxne	lr
 8000dfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dfe:	d104      	bne.n	8000e0a <__addsf3+0x126>
 8000e00:	0040      	lsls	r0, r0, #1
 8000e02:	bf28      	it	cs
 8000e04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e08:	4770      	bx	lr
 8000e0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e0e:	bf3c      	itt	cc
 8000e10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bxcc	lr
 8000e16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e22:	4770      	bx	lr
 8000e24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e28:	bf16      	itet	ne
 8000e2a:	4608      	movne	r0, r1
 8000e2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e30:	4601      	movne	r1, r0
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	bf06      	itte	eq
 8000e36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e3a:	ea90 0f01 	teqeq	r0, r1
 8000e3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e42:	4770      	bx	lr

08000e44 <__aeabi_ui2f>:
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	e004      	b.n	8000e54 <__aeabi_i2f+0x8>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_i2f>:
 8000e4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e50:	bf48      	it	mi
 8000e52:	4240      	negmi	r0, r0
 8000e54:	ea5f 0c00 	movs.w	ip, r0
 8000e58:	bf08      	it	eq
 8000e5a:	4770      	bxeq	lr
 8000e5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e60:	4601      	mov	r1, r0
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	e01c      	b.n	8000ea2 <__aeabi_l2f+0x2a>

08000e68 <__aeabi_ul2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	e00a      	b.n	8000e8c <__aeabi_l2f+0x14>
 8000e76:	bf00      	nop

08000e78 <__aeabi_l2f>:
 8000e78:	ea50 0201 	orrs.w	r2, r0, r1
 8000e7c:	bf08      	it	eq
 8000e7e:	4770      	bxeq	lr
 8000e80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e84:	d502      	bpl.n	8000e8c <__aeabi_l2f+0x14>
 8000e86:	4240      	negs	r0, r0
 8000e88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e8c:	ea5f 0c01 	movs.w	ip, r1
 8000e90:	bf02      	ittt	eq
 8000e92:	4684      	moveq	ip, r0
 8000e94:	4601      	moveq	r1, r0
 8000e96:	2000      	moveq	r0, #0
 8000e98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e9c:	bf08      	it	eq
 8000e9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ea6:	fabc f28c 	clz	r2, ip
 8000eaa:	3a08      	subs	r2, #8
 8000eac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000eb0:	db10      	blt.n	8000ed4 <__aeabi_l2f+0x5c>
 8000eb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ec4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f102 0220 	add.w	r2, r2, #32
 8000ed8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000edc:	f1c2 0220 	rsb	r2, r2, #32
 8000ee0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ee4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee8:	eb43 0002 	adc.w	r0, r3, r2
 8000eec:	bf08      	it	eq
 8000eee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ef2:	4770      	bx	lr

08000ef4 <__aeabi_uldivmod>:
 8000ef4:	b953      	cbnz	r3, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef6:	b94a      	cbnz	r2, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	bf08      	it	eq
 8000efc:	2800      	cmpeq	r0, #0
 8000efe:	bf1c      	itt	ne
 8000f00:	f04f 31ff 	movne.w	r1, #4294967295
 8000f04:	f04f 30ff 	movne.w	r0, #4294967295
 8000f08:	f000 b972 	b.w	80011f0 <__aeabi_idiv0>
 8000f0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f14:	f000 f806 	bl	8000f24 <__udivmoddi4>
 8000f18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f20:	b004      	add	sp, #16
 8000f22:	4770      	bx	lr

08000f24 <__udivmoddi4>:
 8000f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f28:	9e08      	ldr	r6, [sp, #32]
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	4688      	mov	r8, r1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d14b      	bne.n	8000fca <__udivmoddi4+0xa6>
 8000f32:	428a      	cmp	r2, r1
 8000f34:	4615      	mov	r5, r2
 8000f36:	d967      	bls.n	8001008 <__udivmoddi4+0xe4>
 8000f38:	fab2 f282 	clz	r2, r2
 8000f3c:	b14a      	cbz	r2, 8000f52 <__udivmoddi4+0x2e>
 8000f3e:	f1c2 0720 	rsb	r7, r2, #32
 8000f42:	fa01 f302 	lsl.w	r3, r1, r2
 8000f46:	fa20 f707 	lsr.w	r7, r0, r7
 8000f4a:	4095      	lsls	r5, r2
 8000f4c:	ea47 0803 	orr.w	r8, r7, r3
 8000f50:	4094      	lsls	r4, r2
 8000f52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f56:	0c23      	lsrs	r3, r4, #16
 8000f58:	fbb8 f7fe 	udiv	r7, r8, lr
 8000f5c:	fa1f fc85 	uxth.w	ip, r5
 8000f60:	fb0e 8817 	mls	r8, lr, r7, r8
 8000f64:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f68:	fb07 f10c 	mul.w	r1, r7, ip
 8000f6c:	4299      	cmp	r1, r3
 8000f6e:	d909      	bls.n	8000f84 <__udivmoddi4+0x60>
 8000f70:	18eb      	adds	r3, r5, r3
 8000f72:	f107 30ff 	add.w	r0, r7, #4294967295
 8000f76:	f080 811b 	bcs.w	80011b0 <__udivmoddi4+0x28c>
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	f240 8118 	bls.w	80011b0 <__udivmoddi4+0x28c>
 8000f80:	3f02      	subs	r7, #2
 8000f82:	442b      	add	r3, r5
 8000f84:	1a5b      	subs	r3, r3, r1
 8000f86:	b2a4      	uxth	r4, r4
 8000f88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f94:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f98:	45a4      	cmp	ip, r4
 8000f9a:	d909      	bls.n	8000fb0 <__udivmoddi4+0x8c>
 8000f9c:	192c      	adds	r4, r5, r4
 8000f9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fa2:	f080 8107 	bcs.w	80011b4 <__udivmoddi4+0x290>
 8000fa6:	45a4      	cmp	ip, r4
 8000fa8:	f240 8104 	bls.w	80011b4 <__udivmoddi4+0x290>
 8000fac:	3802      	subs	r0, #2
 8000fae:	442c      	add	r4, r5
 8000fb0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000fb4:	eba4 040c 	sub.w	r4, r4, ip
 8000fb8:	2700      	movs	r7, #0
 8000fba:	b11e      	cbz	r6, 8000fc4 <__udivmoddi4+0xa0>
 8000fbc:	40d4      	lsrs	r4, r2
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e9c6 4300 	strd	r4, r3, [r6]
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	d909      	bls.n	8000fe2 <__udivmoddi4+0xbe>
 8000fce:	2e00      	cmp	r6, #0
 8000fd0:	f000 80eb 	beq.w	80011aa <__udivmoddi4+0x286>
 8000fd4:	2700      	movs	r7, #0
 8000fd6:	e9c6 0100 	strd	r0, r1, [r6]
 8000fda:	4638      	mov	r0, r7
 8000fdc:	4639      	mov	r1, r7
 8000fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe2:	fab3 f783 	clz	r7, r3
 8000fe6:	2f00      	cmp	r7, #0
 8000fe8:	d147      	bne.n	800107a <__udivmoddi4+0x156>
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d302      	bcc.n	8000ff4 <__udivmoddi4+0xd0>
 8000fee:	4282      	cmp	r2, r0
 8000ff0:	f200 80fa 	bhi.w	80011e8 <__udivmoddi4+0x2c4>
 8000ff4:	1a84      	subs	r4, r0, r2
 8000ff6:	eb61 0303 	sbc.w	r3, r1, r3
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	4698      	mov	r8, r3
 8000ffe:	2e00      	cmp	r6, #0
 8001000:	d0e0      	beq.n	8000fc4 <__udivmoddi4+0xa0>
 8001002:	e9c6 4800 	strd	r4, r8, [r6]
 8001006:	e7dd      	b.n	8000fc4 <__udivmoddi4+0xa0>
 8001008:	b902      	cbnz	r2, 800100c <__udivmoddi4+0xe8>
 800100a:	deff      	udf	#255	; 0xff
 800100c:	fab2 f282 	clz	r2, r2
 8001010:	2a00      	cmp	r2, #0
 8001012:	f040 808f 	bne.w	8001134 <__udivmoddi4+0x210>
 8001016:	1b49      	subs	r1, r1, r5
 8001018:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800101c:	fa1f f885 	uxth.w	r8, r5
 8001020:	2701      	movs	r7, #1
 8001022:	fbb1 fcfe 	udiv	ip, r1, lr
 8001026:	0c23      	lsrs	r3, r4, #16
 8001028:	fb0e 111c 	mls	r1, lr, ip, r1
 800102c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001030:	fb08 f10c 	mul.w	r1, r8, ip
 8001034:	4299      	cmp	r1, r3
 8001036:	d907      	bls.n	8001048 <__udivmoddi4+0x124>
 8001038:	18eb      	adds	r3, r5, r3
 800103a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800103e:	d202      	bcs.n	8001046 <__udivmoddi4+0x122>
 8001040:	4299      	cmp	r1, r3
 8001042:	f200 80cd 	bhi.w	80011e0 <__udivmoddi4+0x2bc>
 8001046:	4684      	mov	ip, r0
 8001048:	1a59      	subs	r1, r3, r1
 800104a:	b2a3      	uxth	r3, r4
 800104c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001050:	fb0e 1410 	mls	r4, lr, r0, r1
 8001054:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001058:	fb08 f800 	mul.w	r8, r8, r0
 800105c:	45a0      	cmp	r8, r4
 800105e:	d907      	bls.n	8001070 <__udivmoddi4+0x14c>
 8001060:	192c      	adds	r4, r5, r4
 8001062:	f100 33ff 	add.w	r3, r0, #4294967295
 8001066:	d202      	bcs.n	800106e <__udivmoddi4+0x14a>
 8001068:	45a0      	cmp	r8, r4
 800106a:	f200 80b6 	bhi.w	80011da <__udivmoddi4+0x2b6>
 800106e:	4618      	mov	r0, r3
 8001070:	eba4 0408 	sub.w	r4, r4, r8
 8001074:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001078:	e79f      	b.n	8000fba <__udivmoddi4+0x96>
 800107a:	f1c7 0c20 	rsb	ip, r7, #32
 800107e:	40bb      	lsls	r3, r7
 8001080:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001084:	ea4e 0e03 	orr.w	lr, lr, r3
 8001088:	fa01 f407 	lsl.w	r4, r1, r7
 800108c:	fa20 f50c 	lsr.w	r5, r0, ip
 8001090:	fa21 f30c 	lsr.w	r3, r1, ip
 8001094:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001098:	4325      	orrs	r5, r4
 800109a:	fbb3 f9f8 	udiv	r9, r3, r8
 800109e:	0c2c      	lsrs	r4, r5, #16
 80010a0:	fb08 3319 	mls	r3, r8, r9, r3
 80010a4:	fa1f fa8e 	uxth.w	sl, lr
 80010a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80010ac:	fb09 f40a 	mul.w	r4, r9, sl
 80010b0:	429c      	cmp	r4, r3
 80010b2:	fa02 f207 	lsl.w	r2, r2, r7
 80010b6:	fa00 f107 	lsl.w	r1, r0, r7
 80010ba:	d90b      	bls.n	80010d4 <__udivmoddi4+0x1b0>
 80010bc:	eb1e 0303 	adds.w	r3, lr, r3
 80010c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80010c4:	f080 8087 	bcs.w	80011d6 <__udivmoddi4+0x2b2>
 80010c8:	429c      	cmp	r4, r3
 80010ca:	f240 8084 	bls.w	80011d6 <__udivmoddi4+0x2b2>
 80010ce:	f1a9 0902 	sub.w	r9, r9, #2
 80010d2:	4473      	add	r3, lr
 80010d4:	1b1b      	subs	r3, r3, r4
 80010d6:	b2ad      	uxth	r5, r5
 80010d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80010dc:	fb08 3310 	mls	r3, r8, r0, r3
 80010e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80010e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80010e8:	45a2      	cmp	sl, r4
 80010ea:	d908      	bls.n	80010fe <__udivmoddi4+0x1da>
 80010ec:	eb1e 0404 	adds.w	r4, lr, r4
 80010f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80010f4:	d26b      	bcs.n	80011ce <__udivmoddi4+0x2aa>
 80010f6:	45a2      	cmp	sl, r4
 80010f8:	d969      	bls.n	80011ce <__udivmoddi4+0x2aa>
 80010fa:	3802      	subs	r0, #2
 80010fc:	4474      	add	r4, lr
 80010fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001102:	fba0 8902 	umull	r8, r9, r0, r2
 8001106:	eba4 040a 	sub.w	r4, r4, sl
 800110a:	454c      	cmp	r4, r9
 800110c:	46c2      	mov	sl, r8
 800110e:	464b      	mov	r3, r9
 8001110:	d354      	bcc.n	80011bc <__udivmoddi4+0x298>
 8001112:	d051      	beq.n	80011b8 <__udivmoddi4+0x294>
 8001114:	2e00      	cmp	r6, #0
 8001116:	d069      	beq.n	80011ec <__udivmoddi4+0x2c8>
 8001118:	ebb1 050a 	subs.w	r5, r1, sl
 800111c:	eb64 0403 	sbc.w	r4, r4, r3
 8001120:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001124:	40fd      	lsrs	r5, r7
 8001126:	40fc      	lsrs	r4, r7
 8001128:	ea4c 0505 	orr.w	r5, ip, r5
 800112c:	e9c6 5400 	strd	r5, r4, [r6]
 8001130:	2700      	movs	r7, #0
 8001132:	e747      	b.n	8000fc4 <__udivmoddi4+0xa0>
 8001134:	f1c2 0320 	rsb	r3, r2, #32
 8001138:	fa20 f703 	lsr.w	r7, r0, r3
 800113c:	4095      	lsls	r5, r2
 800113e:	fa01 f002 	lsl.w	r0, r1, r2
 8001142:	fa21 f303 	lsr.w	r3, r1, r3
 8001146:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800114a:	4338      	orrs	r0, r7
 800114c:	0c01      	lsrs	r1, r0, #16
 800114e:	fbb3 f7fe 	udiv	r7, r3, lr
 8001152:	fa1f f885 	uxth.w	r8, r5
 8001156:	fb0e 3317 	mls	r3, lr, r7, r3
 800115a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800115e:	fb07 f308 	mul.w	r3, r7, r8
 8001162:	428b      	cmp	r3, r1
 8001164:	fa04 f402 	lsl.w	r4, r4, r2
 8001168:	d907      	bls.n	800117a <__udivmoddi4+0x256>
 800116a:	1869      	adds	r1, r5, r1
 800116c:	f107 3cff 	add.w	ip, r7, #4294967295
 8001170:	d22f      	bcs.n	80011d2 <__udivmoddi4+0x2ae>
 8001172:	428b      	cmp	r3, r1
 8001174:	d92d      	bls.n	80011d2 <__udivmoddi4+0x2ae>
 8001176:	3f02      	subs	r7, #2
 8001178:	4429      	add	r1, r5
 800117a:	1acb      	subs	r3, r1, r3
 800117c:	b281      	uxth	r1, r0
 800117e:	fbb3 f0fe 	udiv	r0, r3, lr
 8001182:	fb0e 3310 	mls	r3, lr, r0, r3
 8001186:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800118a:	fb00 f308 	mul.w	r3, r0, r8
 800118e:	428b      	cmp	r3, r1
 8001190:	d907      	bls.n	80011a2 <__udivmoddi4+0x27e>
 8001192:	1869      	adds	r1, r5, r1
 8001194:	f100 3cff 	add.w	ip, r0, #4294967295
 8001198:	d217      	bcs.n	80011ca <__udivmoddi4+0x2a6>
 800119a:	428b      	cmp	r3, r1
 800119c:	d915      	bls.n	80011ca <__udivmoddi4+0x2a6>
 800119e:	3802      	subs	r0, #2
 80011a0:	4429      	add	r1, r5
 80011a2:	1ac9      	subs	r1, r1, r3
 80011a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80011a8:	e73b      	b.n	8001022 <__udivmoddi4+0xfe>
 80011aa:	4637      	mov	r7, r6
 80011ac:	4630      	mov	r0, r6
 80011ae:	e709      	b.n	8000fc4 <__udivmoddi4+0xa0>
 80011b0:	4607      	mov	r7, r0
 80011b2:	e6e7      	b.n	8000f84 <__udivmoddi4+0x60>
 80011b4:	4618      	mov	r0, r3
 80011b6:	e6fb      	b.n	8000fb0 <__udivmoddi4+0x8c>
 80011b8:	4541      	cmp	r1, r8
 80011ba:	d2ab      	bcs.n	8001114 <__udivmoddi4+0x1f0>
 80011bc:	ebb8 0a02 	subs.w	sl, r8, r2
 80011c0:	eb69 020e 	sbc.w	r2, r9, lr
 80011c4:	3801      	subs	r0, #1
 80011c6:	4613      	mov	r3, r2
 80011c8:	e7a4      	b.n	8001114 <__udivmoddi4+0x1f0>
 80011ca:	4660      	mov	r0, ip
 80011cc:	e7e9      	b.n	80011a2 <__udivmoddi4+0x27e>
 80011ce:	4618      	mov	r0, r3
 80011d0:	e795      	b.n	80010fe <__udivmoddi4+0x1da>
 80011d2:	4667      	mov	r7, ip
 80011d4:	e7d1      	b.n	800117a <__udivmoddi4+0x256>
 80011d6:	4681      	mov	r9, r0
 80011d8:	e77c      	b.n	80010d4 <__udivmoddi4+0x1b0>
 80011da:	3802      	subs	r0, #2
 80011dc:	442c      	add	r4, r5
 80011de:	e747      	b.n	8001070 <__udivmoddi4+0x14c>
 80011e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011e4:	442b      	add	r3, r5
 80011e6:	e72f      	b.n	8001048 <__udivmoddi4+0x124>
 80011e8:	4638      	mov	r0, r7
 80011ea:	e708      	b.n	8000ffe <__udivmoddi4+0xda>
 80011ec:	4637      	mov	r7, r6
 80011ee:	e6e9      	b.n	8000fc4 <__udivmoddi4+0xa0>

080011f0 <__aeabi_idiv0>:
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop

080011f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001206:	4b6b      	ldr	r3, [pc, #428]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 8001208:	4a6b      	ldr	r2, [pc, #428]	; (80013b8 <MX_ADC1_Init+0x1c4>)
 800120a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800120c:	4b69      	ldr	r3, [pc, #420]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 800120e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001212:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001214:	4b67      	ldr	r3, [pc, #412]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800121a:	4b66      	ldr	r3, [pc, #408]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 800121c:	2201      	movs	r2, #1
 800121e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001220:	4b64      	ldr	r3, [pc, #400]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 8001222:	2200      	movs	r2, #0
 8001224:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001226:	4b63      	ldr	r3, [pc, #396]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800122e:	4b61      	ldr	r3, [pc, #388]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 8001230:	2201      	movs	r2, #1
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001234:	4b5f      	ldr	r3, [pc, #380]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 8001236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 800123c:	4b5d      	ldr	r3, [pc, #372]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 800123e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001244:	4b5b      	ldr	r3, [pc, #364]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 800124a:	4b5a      	ldr	r3, [pc, #360]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 800124c:	220c      	movs	r2, #12
 800124e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001250:	4b58      	ldr	r3, [pc, #352]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 8001252:	2201      	movs	r2, #1
 8001254:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800125e:	4855      	ldr	r0, [pc, #340]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 8001260:	f002 fac0 	bl	80037e4 <HAL_ADC_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_ADC1_Init+0x7a>
  {
    Error_Handler();
 800126a:	f000 ff49 	bl	8002100 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800126e:	2308      	movs	r3, #8
 8001270:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001272:	2301      	movs	r3, #1
 8001274:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001276:	2305      	movs	r3, #5
 8001278:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	484d      	ldr	r0, [pc, #308]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 8001280:	f002 fbdc 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800128a:	f000 ff39 	bl	8002100 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 2;
 800128e:	2302      	movs	r3, #2
 8001290:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001292:	463b      	mov	r3, r7
 8001294:	4619      	mov	r1, r3
 8001296:	4847      	ldr	r0, [pc, #284]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 8001298:	f002 fbd0 	bl	8003a3c <HAL_ADC_ConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80012a2:	f000 ff2d 	bl	8002100 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80012aa:	2303      	movs	r3, #3
 80012ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ae:	463b      	mov	r3, r7
 80012b0:	4619      	mov	r1, r3
 80012b2:	4840      	ldr	r0, [pc, #256]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 80012b4:	f002 fbc2 	bl	8003a3c <HAL_ADC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80012be:	f000 ff1f 	bl	8002100 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 4;
 80012c2:	2304      	movs	r3, #4
 80012c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c6:	463b      	mov	r3, r7
 80012c8:	4619      	mov	r1, r3
 80012ca:	483a      	ldr	r0, [pc, #232]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 80012cc:	f002 fbb6 	bl	8003a3c <HAL_ADC_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80012d6:	f000 ff13 	bl	8002100 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012da:	2303      	movs	r3, #3
 80012dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80012de:	2305      	movs	r3, #5
 80012e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	4833      	ldr	r0, [pc, #204]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 80012e8:	f002 fba8 	bl	8003a3c <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 80012f2:	f000 ff05 	bl	8002100 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 6;
 80012f6:	2306      	movs	r3, #6
 80012f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fa:	463b      	mov	r3, r7
 80012fc:	4619      	mov	r1, r3
 80012fe:	482d      	ldr	r0, [pc, #180]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 8001300:	f002 fb9c 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800130a:	f000 fef9 	bl	8002100 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800130e:	2301      	movs	r3, #1
 8001310:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001312:	2307      	movs	r3, #7
 8001314:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	4826      	ldr	r0, [pc, #152]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 800131c:	f002 fb8e 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8001326:	f000 feeb 	bl	8002100 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 8;
 800132a:	2308      	movs	r3, #8
 800132c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	4619      	mov	r1, r3
 8001332:	4820      	ldr	r0, [pc, #128]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 8001334:	f002 fb82 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 800133e:	f000 fedf 	bl	8002100 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001342:	2302      	movs	r3, #2
 8001344:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001346:	2309      	movs	r3, #9
 8001348:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	463b      	mov	r3, r7
 800134c:	4619      	mov	r1, r3
 800134e:	4819      	ldr	r0, [pc, #100]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 8001350:	f002 fb74 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 800135a:	f000 fed1 	bl	8002100 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 10;
 800135e:	230a      	movs	r3, #10
 8001360:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4813      	ldr	r0, [pc, #76]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 8001368:	f002 fb68 	bl	8003a3c <HAL_ADC_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 8001372:	f000 fec5 	bl	8002100 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001376:	2308      	movs	r3, #8
 8001378:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800137a:	230b      	movs	r3, #11
 800137c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 8001384:	f002 fb5a 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_ADC1_Init+0x19e>
  {
    Error_Handler();
 800138e:	f000 feb7 	bl	8002100 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 12;
 8001392:	230c      	movs	r3, #12
 8001394:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <MX_ADC1_Init+0x1c0>)
 800139c:	f002 fb4e 	bl	8003a3c <HAL_ADC_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_ADC1_Init+0x1b6>
  {
    Error_Handler();
 80013a6:	f000 feab 	bl	8002100 <Error_Handler>
  }

}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200002b4 	.word	0x200002b4
 80013b8:	40012000 	.word	0x40012000

080013bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a3c      	ldr	r2, [pc, #240]	; (80014cc <HAL_ADC_MspInit+0x110>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d172      	bne.n	80014c4 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <HAL_ADC_MspInit+0x114>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a3a      	ldr	r2, [pc, #232]	; (80014d0 <HAL_ADC_MspInit+0x114>)
 80013e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <HAL_ADC_MspInit+0x114>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <HAL_ADC_MspInit+0x114>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a33      	ldr	r2, [pc, #204]	; (80014d0 <HAL_ADC_MspInit+0x114>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <HAL_ADC_MspInit+0x114>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <HAL_ADC_MspInit+0x114>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a2c      	ldr	r2, [pc, #176]	; (80014d0 <HAL_ADC_MspInit+0x114>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <HAL_ADC_MspInit+0x114>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = SENSOR_FR_Pin|SENSOR_SR_Pin|SENSOR_SL_Pin|SENSOR_FL_Pin;
 8001432:	230f      	movs	r3, #15
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001436:	2303      	movs	r3, #3
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4823      	ldr	r0, [pc, #140]	; (80014d4 <HAL_ADC_MspInit+0x118>)
 8001446:	f003 fabb 	bl	80049c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_BATTERY_Pin;
 800144a:	2301      	movs	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144e:	2303      	movs	r3, #3
 8001450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_BATTERY_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	481e      	ldr	r0, [pc, #120]	; (80014d8 <HAL_ADC_MspInit+0x11c>)
 800145e:	f003 faaf 	bl	80049c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001462:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_ADC_MspInit+0x120>)
 8001464:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <HAL_ADC_MspInit+0x124>)
 8001466:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_ADC_MspInit+0x120>)
 800146a:	2200      	movs	r2, #0
 800146c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_ADC_MspInit+0x120>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <HAL_ADC_MspInit+0x120>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_ADC_MspInit+0x120>)
 800147c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001480:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_ADC_MspInit+0x120>)
 8001484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001488:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <HAL_ADC_MspInit+0x120>)
 800148c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001490:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_ADC_MspInit+0x120>)
 8001494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001498:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <HAL_ADC_MspInit+0x120>)
 800149c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014a0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_ADC_MspInit+0x120>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <HAL_ADC_MspInit+0x120>)
 80014aa:	f002 fe89 	bl	80041c0 <HAL_DMA_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80014b4:	f000 fe24 	bl	8002100 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a08      	ldr	r2, [pc, #32]	; (80014dc <HAL_ADC_MspInit+0x120>)
 80014bc:	639a      	str	r2, [r3, #56]	; 0x38
 80014be:	4a07      	ldr	r2, [pc, #28]	; (80014dc <HAL_ADC_MspInit+0x120>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40012000 	.word	0x40012000
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000
 80014d8:	40020400 	.word	0x40020400
 80014dc:	200002fc 	.word	0x200002fc
 80014e0:	40026410 	.word	0x40026410

080014e4 <Battery_GetVoltage>:

/* ---------------------------------------------------------------
	バッテリの電圧を取得する関数
--------------------------------------------------------------- */
float Battery_GetVoltage( void )
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	return (BATTERY_REFERENCE * (20.f / 10.f) * (float)Sensor_GetBatteryValue()) / 4096.f;
 80014e8:	f000 fd12 	bl	8001f10 <Sensor_GetBatteryValue>
 80014ec:	4603      	mov	r3, r0
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80014fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fe:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8001510 <Battery_GetVoltage+0x2c>
 8001502:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001506:	eef0 7a66 	vmov.f32	s15, s13
}
 800150a:	eeb0 0a67 	vmov.f32	s0, s15
 800150e:	bd80      	pop	{r7, pc}
 8001510:	45800000 	.word	0x45800000

08001514 <Battery_LimiterVoltage>:

/* ---------------------------------------------------------------
	バッテリの電圧制限関数
--------------------------------------------------------------- */
void Battery_LimiterVoltage( void )
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
	volatile int	i;
	volatile float	battery_voltage_average;

	for( i = 0; i < 10; i++) {
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	e00f      	b.n	8001540 <Battery_LimiterVoltage+0x2c>
		HAL_Delay(10);
 8001520:	200a      	movs	r0, #10
 8001522:	f002 f93d 	bl	80037a0 <HAL_Delay>
		battery_voltage_average += Battery_GetVoltage();
 8001526:	f7ff ffdd 	bl	80014e4 <Battery_GetVoltage>
 800152a:	eeb0 7a40 	vmov.f32	s14, s0
 800152e:	edd7 7a00 	vldr	s15, [r7]
 8001532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001536:	edc7 7a00 	vstr	s15, [r7]
	for( i = 0; i < 10; i++) {
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3301      	adds	r3, #1
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b09      	cmp	r3, #9
 8001544:	ddec      	ble.n	8001520 <Battery_LimiterVoltage+0xc>
	}
	battery_voltage_average /= 10;
 8001546:	ed97 7a00 	vldr	s14, [r7]
 800154a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800154e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001552:	edc7 7a00 	vstr	s15, [r7]

	if( battery_voltage_average < BATTERY_LIMIT ) {
 8001556:	edd7 7a00 	vldr	s15, [r7]
 800155a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001584 <Battery_LimiterVoltage+0x70>
 800155e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001566:	d400      	bmi.n	800156a <Battery_LimiterVoltage+0x56>
		while( 1 ) {
			LED_ALL_TOGGLE();
			HAL_Delay(200);
		}
	} else;
}
 8001568:	e008      	b.n	800157c <Battery_LimiterVoltage+0x68>
			LED_ALL_TOGGLE();
 800156a:	f44f 5164 	mov.w	r1, #14592	; 0x3900
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <Battery_LimiterVoltage+0x74>)
 8001570:	f003 fbd1 	bl	8004d16 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8001574:	20c8      	movs	r0, #200	; 0xc8
 8001576:	f002 f913 	bl	80037a0 <HAL_Delay>
			LED_ALL_TOGGLE();
 800157a:	e7f6      	b.n	800156a <Battery_LimiterVoltage+0x56>
}
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	404ccccd 	.word	0x404ccccd
 8001588:	40020000 	.word	0x40020000

0800158c <Communicate_TerminalRecv>:

/* ---------------------------------------------------------------
	UART1で1文字受信する関数
--------------------------------------------------------------- */
uint8_t Communicate_TerminalRecv( void )
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
	uint8_t data[1];
	HAL_UART_Receive( &huart1, (uint8_t*)data, sizeof(data), 1 );
 8001592:	1d39      	adds	r1, r7, #4
 8001594:	2301      	movs	r3, #1
 8001596:	2201      	movs	r2, #1
 8001598:	4803      	ldr	r0, [pc, #12]	; (80015a8 <Communicate_TerminalRecv+0x1c>)
 800159a:	f005 fbc6 	bl	8006d2a <HAL_UART_Receive>
	return (*data);
 800159e:	793b      	ldrb	r3, [r7, #4]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000844 	.word	0x20000844

080015ac <Communicate_RxPushData>:

void Communicate_RxPushData( void )
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
// head（DMACが受信データを書き込む位置）に新しく受信データが蓄積される．
// tailから読み出せばいい
// headがtailに追いつくとバッファオーバーフローとなり正しく読み出せない

	// これ以上格納できない場合はそのまま戻る
	if(rx_buffer.remain >= TRX_BUFFER_SIZE){
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <Communicate_RxPushData+0x54>)
 80015b2:	889b      	ldrh	r3, [r3, #4]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	2b7f      	cmp	r3, #127	; 0x7f
 80015b8:	d81c      	bhi.n	80015f4 <Communicate_RxPushData+0x48>
		return;
	}

	rx_buffer.data[rx_buffer.head++] = rx_data;	// 書き込みポインタにデータを格納
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <Communicate_RxPushData+0x54>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	b291      	uxth	r1, r2
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <Communicate_RxPushData+0x54>)
 80015c6:	8011      	strh	r1, [r2, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <Communicate_RxPushData+0x58>)
 80015cc:	781a      	ldrb	r2, [r3, #0]
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <Communicate_RxPushData+0x54>)
 80015d0:	440b      	add	r3, r1
 80015d2:	719a      	strb	r2, [r3, #6]
	rx_buffer.remain++;
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <Communicate_RxPushData+0x54>)
 80015d6:	889b      	ldrh	r3, [r3, #4]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	3301      	adds	r3, #1
 80015dc:	b29a      	uxth	r2, r3
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <Communicate_RxPushData+0x54>)
 80015e0:	809a      	strh	r2, [r3, #4]
	// 終端に来たら、先頭に戻る
	if( rx_buffer.head >= TRX_BUFFER_SIZE ) {
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <Communicate_RxPushData+0x54>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	2b7f      	cmp	r3, #127	; 0x7f
 80015ea:	d904      	bls.n	80015f6 <Communicate_RxPushData+0x4a>
		rx_buffer.head = 0;
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <Communicate_RxPushData+0x54>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	801a      	strh	r2, [r3, #0]
 80015f2:	e000      	b.n	80015f6 <Communicate_RxPushData+0x4a>
		return;
 80015f4:	bf00      	nop
	} else;
}
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	2000035c 	.word	0x2000035c
 8001604:	2000046a 	.word	0x2000046a

08001608 <Communicate_RxPopData>:

uint8_t Communicate_RxPopData( void )
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160e:	b672      	cpsid	i

	// この関数は多重に実行されるとまずいので割り込みを禁止する
	__disable_irq();

	// データがない場合
	if( rx_buffer.remain == 0 ) {
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <Communicate_RxPopData+0x6c>)
 8001612:	889b      	ldrh	r3, [r3, #4]
 8001614:	b29b      	uxth	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10b      	bne.n	8001632 <Communicate_RxPopData+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
 800161a:	b662      	cpsie	i
		// 割り込み許可
		__enable_irq();

		// データを受信するまで待機
		while( rx_buffer.remain == 0 ) {
 800161c:	e004      	b.n	8001628 <Communicate_RxPopData+0x20>
			HAL_UART_Receive_DMA( &huart1, &rx_data, 1 );
 800161e:	2201      	movs	r2, #1
 8001620:	4915      	ldr	r1, [pc, #84]	; (8001678 <Communicate_RxPopData+0x70>)
 8001622:	4816      	ldr	r0, [pc, #88]	; (800167c <Communicate_RxPopData+0x74>)
 8001624:	f005 fc94 	bl	8006f50 <HAL_UART_Receive_DMA>
		while( rx_buffer.remain == 0 ) {
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <Communicate_RxPopData+0x6c>)
 800162a:	889b      	ldrh	r3, [r3, #4]
 800162c:	b29b      	uxth	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f5      	beq.n	800161e <Communicate_RxPopData+0x16>
		}
	} else;

	// 読み出しデータの取り出し
	ch = rx_buffer.data[rx_buffer.tail++];
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <Communicate_RxPopData+0x6c>)
 8001634:	885b      	ldrh	r3, [r3, #2]
 8001636:	b29b      	uxth	r3, r3
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	b291      	uxth	r1, r2
 800163c:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <Communicate_RxPopData+0x6c>)
 800163e:	8051      	strh	r1, [r2, #2]
 8001640:	461a      	mov	r2, r3
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <Communicate_RxPopData+0x6c>)
 8001644:	4413      	add	r3, r2
 8001646:	799b      	ldrb	r3, [r3, #6]
 8001648:	71fb      	strb	r3, [r7, #7]
	rx_buffer.remain--;
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <Communicate_RxPopData+0x6c>)
 800164c:	889b      	ldrh	r3, [r3, #4]
 800164e:	b29b      	uxth	r3, r3
 8001650:	3b01      	subs	r3, #1
 8001652:	b29a      	uxth	r2, r3
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <Communicate_RxPopData+0x6c>)
 8001656:	809a      	strh	r2, [r3, #4]

	// 終端に来たら先頭に戻る
	if( rx_buffer.tail >= TRX_BUFFER_SIZE ) {
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <Communicate_RxPopData+0x6c>)
 800165a:	885b      	ldrh	r3, [r3, #2]
 800165c:	b29b      	uxth	r3, r3
 800165e:	2b7f      	cmp	r3, #127	; 0x7f
 8001660:	d902      	bls.n	8001668 <Communicate_RxPopData+0x60>
		rx_buffer.tail = 0;
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <Communicate_RxPopData+0x6c>)
 8001664:	2200      	movs	r2, #0
 8001666:	805a      	strh	r2, [r3, #2]
 8001668:	b662      	cpsie	i
	} else;

	// 割り込み許可
	__enable_irq();

	return ch;
 800166a:	79fb      	ldrb	r3, [r7, #7]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2000035c 	.word	0x2000035c
 8001678:	2000046a 	.word	0x2000046a
 800167c:	20000844 	.word	0x20000844

08001680 <Communicate_TxPushData>:

/* ---------------------------------------------------------------
	UART1で1文字送信する関数
--------------------------------------------------------------- */
void Communicate_TxPushData( int8_t data )
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800168a:	b672      	cpsid	i
	while(1) {
		// この関数は多重に実行されるとまずいので割り込みを禁止する
		__disable_irq();

		// DMAを一時的に停止
		HAL_DMA_Abort(huart1.hdmatx);
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <Communicate_TxPushData+0x88>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	4618      	mov	r0, r3
 8001692:	f002 fe9b 	bl	80043cc <HAL_DMA_Abort>

		// バッファに空きがあればループから抜ける
		if( tx_buffer.remain < TRX_BUFFER_SIZE ) {
 8001696:	4b1d      	ldr	r3, [pc, #116]	; (800170c <Communicate_TxPushData+0x8c>)
 8001698:	889b      	ldrh	r3, [r3, #4]
 800169a:	b29b      	uxth	r3, r3
 800169c:	2b7f      	cmp	r3, #127	; 0x7f
 800169e:	d90c      	bls.n	80016ba <Communicate_TxPushData+0x3a>
			break;
		} else;

		// DMA動作再開
		HAL_UART_Transmit_DMA(&huart1, &tx_data, 1);
 80016a0:	2201      	movs	r2, #1
 80016a2:	491b      	ldr	r1, [pc, #108]	; (8001710 <Communicate_TxPushData+0x90>)
 80016a4:	4818      	ldr	r0, [pc, #96]	; (8001708 <Communicate_TxPushData+0x88>)
 80016a6:	f005 fbe7 	bl	8006e78 <HAL_UART_Transmit_DMA>
  __ASM volatile ("cpsie i" : : : "memory");
 80016aa:	b662      	cpsie	i

		// 割り込み許可
		__enable_irq();

		// バッファに空きができるまで待機（この間割り込みが発生してもよい）
		while(tx_buffer.remain == TRX_BUFFER_SIZE);
 80016ac:	bf00      	nop
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <Communicate_TxPushData+0x8c>)
 80016b0:	889b      	ldrh	r3, [r3, #4]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	2b80      	cmp	r3, #128	; 0x80
 80016b6:	d0fa      	beq.n	80016ae <Communicate_TxPushData+0x2e>
		__disable_irq();
 80016b8:	e7e7      	b.n	800168a <Communicate_TxPushData+0xa>
			break;
 80016ba:	bf00      	nop
	}
	// ここの時点でDMACは停止，割り込みは禁止されている

	// 書き込みポインタにデータを格納
	tx_buffer.data[tx_buffer.head++] = data;
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <Communicate_TxPushData+0x8c>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	b291      	uxth	r1, r2
 80016c6:	4a11      	ldr	r2, [pc, #68]	; (800170c <Communicate_TxPushData+0x8c>)
 80016c8:	8011      	strh	r1, [r2, #0]
 80016ca:	4619      	mov	r1, r3
 80016cc:	79fa      	ldrb	r2, [r7, #7]
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <Communicate_TxPushData+0x8c>)
 80016d0:	440b      	add	r3, r1
 80016d2:	719a      	strb	r2, [r3, #6]
	tx_buffer.remain++;
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <Communicate_TxPushData+0x8c>)
 80016d6:	889b      	ldrh	r3, [r3, #4]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	3301      	adds	r3, #1
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <Communicate_TxPushData+0x8c>)
 80016e0:	809a      	strh	r2, [r3, #4]
	// 終端に来たら、先頭に戻る
	if(tx_buffer.head >= TRX_BUFFER_SIZE){
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <Communicate_TxPushData+0x8c>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	2b7f      	cmp	r3, #127	; 0x7f
 80016ea:	d902      	bls.n	80016f2 <Communicate_TxPushData+0x72>
		tx_buffer.head = 0;
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <Communicate_TxPushData+0x8c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	801a      	strh	r2, [r3, #0]
	} else;

	// DMA動作再開
	HAL_UART_Transmit_DMA(&huart1, &tx_data, 1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	4906      	ldr	r1, [pc, #24]	; (8001710 <Communicate_TxPushData+0x90>)
 80016f6:	4804      	ldr	r0, [pc, #16]	; (8001708 <Communicate_TxPushData+0x88>)
 80016f8:	f005 fbbe 	bl	8006e78 <HAL_UART_Transmit_DMA>
 80016fc:	b662      	cpsie	i

	// 割り込み許可
	__enable_irq();
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000844 	.word	0x20000844
 800170c:	200003e4 	.word	0x200003e4
 8001710:	2000046b 	.word	0x2000046b

08001714 <Communicate_TxPopData>:

void Communicate_TxPopData( void )
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	// データがない場合
	if( tx_buffer.remain == 0 ) {
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <Communicate_TxPopData+0x5c>)
 800171a:	889b      	ldrh	r3, [r3, #4]
 800171c:	b29b      	uxth	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <Communicate_TxPopData+0x16>
		// DMAを停止
		HAL_UART_DMAStop(&huart1);
 8001722:	4814      	ldr	r0, [pc, #80]	; (8001774 <Communicate_TxPopData+0x60>)
 8001724:	f005 fc94 	bl	8007050 <HAL_UART_DMAStop>
		} else;

		// DMA動作再開
		HAL_UART_Transmit_DMA(&huart1, &tx_data, 1);
	}
}
 8001728:	e020      	b.n	800176c <Communicate_TxPopData+0x58>
		tx_data = tx_buffer.data[tx_buffer.tail++];
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <Communicate_TxPopData+0x5c>)
 800172c:	885b      	ldrh	r3, [r3, #2]
 800172e:	b29b      	uxth	r3, r3
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	b291      	uxth	r1, r2
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <Communicate_TxPopData+0x5c>)
 8001736:	8051      	strh	r1, [r2, #2]
 8001738:	461a      	mov	r2, r3
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <Communicate_TxPopData+0x5c>)
 800173c:	4413      	add	r3, r2
 800173e:	799a      	ldrb	r2, [r3, #6]
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <Communicate_TxPopData+0x64>)
 8001742:	701a      	strb	r2, [r3, #0]
		tx_buffer.remain--;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <Communicate_TxPopData+0x5c>)
 8001746:	889b      	ldrh	r3, [r3, #4]
 8001748:	b29b      	uxth	r3, r3
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <Communicate_TxPopData+0x5c>)
 8001750:	809a      	strh	r2, [r3, #4]
		if(tx_buffer.tail >= TRX_BUFFER_SIZE){
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <Communicate_TxPopData+0x5c>)
 8001754:	885b      	ldrh	r3, [r3, #2]
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b7f      	cmp	r3, #127	; 0x7f
 800175a:	d902      	bls.n	8001762 <Communicate_TxPopData+0x4e>
			tx_buffer.tail = 0;
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <Communicate_TxPopData+0x5c>)
 800175e:	2200      	movs	r2, #0
 8001760:	805a      	strh	r2, [r3, #2]
		HAL_UART_Transmit_DMA(&huart1, &tx_data, 1);
 8001762:	2201      	movs	r2, #1
 8001764:	4904      	ldr	r1, [pc, #16]	; (8001778 <Communicate_TxPopData+0x64>)
 8001766:	4803      	ldr	r0, [pc, #12]	; (8001774 <Communicate_TxPopData+0x60>)
 8001768:	f005 fb86 	bl	8006e78 <HAL_UART_Transmit_DMA>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200003e4 	.word	0x200003e4
 8001774:	20000844 	.word	0x20000844
 8001778:	2000046b 	.word	0x2000046b

0800177c <HAL_UART_RxCpltCallback>:

/* ---------------------------------------------------------------
	受信・送信完了時のコールバック関数
--------------------------------------------------------------- */
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart )
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
    if( huart->Instance == USART1 ) {
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_UART_RxCpltCallback+0x20>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_UART_RxCpltCallback+0x16>
        Communicate_RxPushData();
 800178e:	f7ff ff0d 	bl	80015ac <Communicate_RxPushData>
    } else;
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40011000 	.word	0x40011000

080017a0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart )
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
    if( huart->Instance == USART1 ) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <HAL_UART_TxCpltCallback+0x20>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_UART_TxCpltCallback+0x16>
        Communicate_TxPopData();
 80017b2:	f7ff ffaf 	bl	8001714 <Communicate_TxPopData>
    } else;
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40011000 	.word	0x40011000

080017c4 <Communicate_Initialize>:

/* ---------------------------------------------------------------
	printfとscanfを使用するための設定
--------------------------------------------------------------- */
void Communicate_Initialize( void )
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	setbuf(stdout, NULL);
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <Communicate_Initialize+0x18>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f007 fc5f 	bl	8009094 <setbuf>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000040 	.word	0x20000040

080017e0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	Communicate_TxPushData(ch);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff47 	bl	8001680 <Communicate_TxPushData>
	return 1;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <__io_getchar>:
#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */
GETCHAR_PROTOTYPE
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	//return Communicate_TerminalRecv();
	return Communicate_RxPopData();
 8001800:	f7ff ff02 	bl	8001608 <Communicate_RxPopData>
 8001804:	4603      	mov	r3, r0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <MX_DMA_Init+0xb8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a2a      	ldr	r2, [pc, #168]	; (80018c4 <MX_DMA_Init+0xb8>)
 800181c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <MX_DMA_Init+0xb8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <MX_DMA_Init+0xb8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a23      	ldr	r2, [pc, #140]	; (80018c4 <MX_DMA_Init+0xb8>)
 8001838:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <MX_DMA_Init+0xb8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	200e      	movs	r0, #14
 8001850:	f002 fc7f 	bl	8004152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001854:	200e      	movs	r0, #14
 8001856:	f002 fc98 	bl	800418a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	200f      	movs	r0, #15
 8001860:	f002 fc77 	bl	8004152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001864:	200f      	movs	r0, #15
 8001866:	f002 fc90 	bl	800418a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2101      	movs	r1, #1
 800186e:	2038      	movs	r0, #56	; 0x38
 8001870:	f002 fc6f 	bl	8004152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001874:	2038      	movs	r0, #56	; 0x38
 8001876:	f002 fc88 	bl	800418a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	2039      	movs	r0, #57	; 0x39
 8001880:	f002 fc67 	bl	8004152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001884:	2039      	movs	r0, #57	; 0x39
 8001886:	f002 fc80 	bl	800418a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	203a      	movs	r0, #58	; 0x3a
 8001890:	f002 fc5f 	bl	8004152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001894:	203a      	movs	r0, #58	; 0x3a
 8001896:	f002 fc78 	bl	800418a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 2, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2102      	movs	r1, #2
 800189e:	2044      	movs	r0, #68	; 0x44
 80018a0:	f002 fc57 	bl	8004152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80018a4:	2044      	movs	r0, #68	; 0x44
 80018a6:	f002 fc70 	bl	800418a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 2, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2102      	movs	r1, #2
 80018ae:	2046      	movs	r0, #70	; 0x46
 80018b0:	f002 fc4f 	bl	8004152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80018b4:	2046      	movs	r0, #70	; 0x46
 80018b6:	f002 fc68 	bl	800418a <HAL_NVIC_EnableIRQ>

}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800

080018c8 <Encoder_Initialize>:

/* ---------------------------------------------------------------
	位相係数モードのタイマーを開始する関数
--------------------------------------------------------------- */
void Encoder_Initialize( void )
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start( &htim2, TIM_CHANNEL_ALL );
 80018cc:	213c      	movs	r1, #60	; 0x3c
 80018ce:	4804      	ldr	r0, [pc, #16]	; (80018e0 <Encoder_Initialize+0x18>)
 80018d0:	f004 fc4a 	bl	8006168 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start( &htim3, TIM_CHANNEL_ALL );
 80018d4:	213c      	movs	r1, #60	; 0x3c
 80018d6:	4803      	ldr	r0, [pc, #12]	; (80018e4 <Encoder_Initialize+0x1c>)
 80018d8:	f004 fc46 	bl	8006168 <HAL_TIM_Encoder_Start>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000744 	.word	0x20000744
 80018e4:	200006c4 	.word	0x200006c4

080018e8 <Encoder_ResetCount_Left>:

/* ---------------------------------------------------------------
	左タイヤの位相係数カウントを初期化する関数
--------------------------------------------------------------- */
void Encoder_ResetCount_Left( void )
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
	ENC_CNT_L = ENC_ZERO;
 80018ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <Encoder_ResetCount_Right>:

/* ---------------------------------------------------------------
	右タイヤの位相係数カウントを初期化する関数
--------------------------------------------------------------- */
void Encoder_ResetCount_Right( void )
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
	ENC_CNT_R = ENC_ZERO;
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <Encoder_ResetCount_Right+0x18>)
 8001906:	f644 6220 	movw	r2, #20000	; 0x4e20
 800190a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40000400 	.word	0x40000400

0800191c <Encoder_GetAngle_Left>:

/* ---------------------------------------------------------------
	左タイヤの角度を取得する関数[rad]
--------------------------------------------------------------- */
float Encoder_GetAngle_Left( void )
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
	return(2 * PI * (float)( (int32_t)ENC_CNT_L - (int32_t)ENC_ZERO ) / (float)ENC_RESOLUTION);
 8001920:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 800192a:	3b20      	subs	r3, #32
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001934:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001954 <Encoder_GetAngle_Left+0x38>
 8001938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001958 <Encoder_GetAngle_Left+0x3c>
 8001940:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001944:	eef0 7a66 	vmov.f32	s15, s13
}
 8001948:	eeb0 0a67 	vmov.f32	s0, s15
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	40c90fda 	.word	0x40c90fda
 8001958:	447fc000 	.word	0x447fc000

0800195c <Encoder_GetAngle_Right>:

/* ---------------------------------------------------------------
	右タイヤの角度を取得する関数[rad]
--------------------------------------------------------------- */
float Encoder_GetAngle_Right( void )
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
	return(2 * PI * (float)( (int32_t)ENC_ZERO - (int32_t)ENC_CNT_R ) / (float)ENC_RESOLUTION);
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <Encoder_GetAngle_Right+0x38>)
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 8001968:	3320      	adds	r3, #32
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001972:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001998 <Encoder_GetAngle_Right+0x3c>
 8001976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800199c <Encoder_GetAngle_Right+0x40>
 800197e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001982:	eef0 7a66 	vmov.f32	s15, s13
}
 8001986:	eeb0 0a67 	vmov.f32	s0, s15
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40000400 	.word	0x40000400
 8001998:	40c90fda 	.word	0x40c90fda
 800199c:	447fc000 	.word	0x447fc000

080019a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <MX_GPIO_Init+0xe0>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a30      	ldr	r2, [pc, #192]	; (8001a80 <MX_GPIO_Init+0xe0>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <MX_GPIO_Init+0xe0>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <MX_GPIO_Init+0xe0>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a29      	ldr	r2, [pc, #164]	; (8001a80 <MX_GPIO_Init+0xe0>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <MX_GPIO_Init+0xe0>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_FR_Pin|LED_SR_Pin|LED_SL_Pin|LED_FL_Pin 
 80019ee:	2200      	movs	r2, #0
 80019f0:	f643 11f0 	movw	r1, #14832	; 0x39f0
 80019f4:	4823      	ldr	r0, [pc, #140]	; (8001a84 <MX_GPIO_Init+0xe4>)
 80019f6:	f003 f975 	bl	8004ce4 <HAL_GPIO_WritePin>
                          |LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a00:	4821      	ldr	r0, [pc, #132]	; (8001a88 <MX_GPIO_Init+0xe8>)
 8001a02:	f003 f96f 	bl	8004ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_FR_Pin|LED_SR_Pin|LED_SL_Pin|LED_FL_Pin;
 8001a06:	23f0      	movs	r3, #240	; 0xf0
 8001a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4819      	ldr	r0, [pc, #100]	; (8001a84 <MX_GPIO_Init+0xe4>)
 8001a1e:	f002 ffcf 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8001a22:	2302      	movs	r3, #2
 8001a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	4619      	mov	r1, r3
 8001a34:	4814      	ldr	r0, [pc, #80]	; (8001a88 <MX_GPIO_Init+0xe8>)
 8001a36:	f002 ffc3 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	4619      	mov	r1, r3
 8001a52:	480d      	ldr	r0, [pc, #52]	; (8001a88 <MX_GPIO_Init+0xe8>)
 8001a54:	f002 ffb4 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin;
 8001a58:	f44f 5364 	mov.w	r3, #14592	; 0x3900
 8001a5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <MX_GPIO_Init+0xe4>)
 8001a72:	f002 ffa5 	bl	80049c0 <HAL_GPIO_Init>

}
 8001a76:	bf00      	nop
 8001a78:	3720      	adds	r7, #32
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000
 8001a88:	40020400 	.word	0x40020400

08001a8c <IMU_Write1byte>:

/* ---------------------------------------------------------------
	ICM20648に1byte書き込む関数
--------------------------------------------------------------- */
void IMU_Write1byte( uint8_t addr , uint8_t data )
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	460a      	mov	r2, r1
 8001a96:	71fb      	strb	r3, [r7, #7]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	71bb      	strb	r3, [r7, #6]
	uint8_t address = addr & 0x7f;
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <IMU_Write1byte+0x54>)
 8001aae:	f003 f919 	bl	8004ce4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &address, 1, 1);
 8001ab2:	f107 010f 	add.w	r1, r7, #15
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2201      	movs	r2, #1
 8001aba:	480a      	ldr	r0, [pc, #40]	; (8001ae4 <IMU_Write1byte+0x58>)
 8001abc:	f003 fdb8 	bl	8005630 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 8001ac0:	1db9      	adds	r1, r7, #6
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <IMU_Write1byte+0x58>)
 8001ac8:	f003 fdb2 	bl	8005630 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad2:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <IMU_Write1byte+0x54>)
 8001ad4:	f003 f906 	bl	8004ce4 <HAL_GPIO_WritePin>
}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	2000046c 	.word	0x2000046c

08001ae8 <IMU_Initialize>:

/* ---------------------------------------------------------------
	ICM20648の初期設定用関数
--------------------------------------------------------------- */
void IMU_Initialize( void )
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	IMU_Write1byte(REG_BANK_SEL, REG_USER_BANK_0);	// バンクの切り替え
 8001aec:	2100      	movs	r1, #0
 8001aee:	207f      	movs	r0, #127	; 0x7f
 8001af0:	f7ff ffcc 	bl	8001a8c <IMU_Write1byte>
	HAL_Delay(100);
 8001af4:	2064      	movs	r0, #100	; 0x64
 8001af6:	f001 fe53 	bl	80037a0 <HAL_Delay>

	IMU_Write1byte(USER_CTRL, 0x10);	// I2CモードをDisableに設定
 8001afa:	2110      	movs	r1, #16
 8001afc:	2003      	movs	r0, #3
 8001afe:	f7ff ffc5 	bl	8001a8c <IMU_Write1byte>
	HAL_Delay(1);
 8001b02:	2001      	movs	r0, #1
 8001b04:	f001 fe4c 	bl	80037a0 <HAL_Delay>
	IMU_Write1byte(PWR_MGMT_1, 0x01);	// ICM20648をリセット
 8001b08:	2101      	movs	r1, #1
 8001b0a:	2006      	movs	r0, #6
 8001b0c:	f7ff ffbe 	bl	8001a8c <IMU_Write1byte>
	HAL_Delay(100);
 8001b10:	2064      	movs	r0, #100	; 0x64
 8001b12:	f001 fe45 	bl	80037a0 <HAL_Delay>

	IMU_Write1byte(REG_BANK_SEL, REG_USER_BANK_2); // バンクの切り替え
 8001b16:	2120      	movs	r1, #32
 8001b18:	207f      	movs	r0, #127	; 0x7f
 8001b1a:	f7ff ffb7 	bl	8001a8c <IMU_Write1byte>
	HAL_Delay(100);
 8001b1e:	2064      	movs	r0, #100	; 0x64
 8001b20:	f001 fe3e 	bl	80037a0 <HAL_Delay>

	// ジャイロの設定
	IMU_Write1byte(GYRO_CONFIG_1, 0x07);	// ジャイロのスケールを±2000deg/sに設定
 8001b24:	2107      	movs	r1, #7
 8001b26:	2001      	movs	r0, #1
 8001b28:	f7ff ffb0 	bl	8001a8c <IMU_Write1byte>
	HAL_Delay(1);							// ジャイロのローパスフィルタをEableに設定
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f001 fe37 	bl	80037a0 <HAL_Delay>
	// 加速度計の設定
	IMU_Write1byte(ACCEL_CONFIG, 0x0d);		// 加速度計のスケールを±8gに設定
 8001b32:	210d      	movs	r1, #13
 8001b34:	2014      	movs	r0, #20
 8001b36:	f7ff ffa9 	bl	8001a8c <IMU_Write1byte>
	HAL_Delay(1);							// 加速度計のローパスフィルタをEableに設定
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f001 fe30 	bl	80037a0 <HAL_Delay>

	IMU_Write1byte(REG_BANK_SEL, REG_USER_BANK_0);	// バンクの切り替え
 8001b40:	2100      	movs	r1, #0
 8001b42:	207f      	movs	r0, #127	; 0x7f
 8001b44:	f7ff ffa2 	bl	8001a8c <IMU_Write1byte>
	HAL_Delay(100);
 8001b48:	2064      	movs	r0, #100	; 0x64
 8001b4a:	f001 fe29 	bl	80037a0 <HAL_Delay>

	// DMAの開始
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b54:	4805      	ldr	r0, [pc, #20]	; (8001b6c <IMU_Initialize+0x84>)
 8001b56:	f003 f8c5 	bl	8004ce4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA( &hspi2, &imu_address, imu_value, sizeof(imu_value)/sizeof(uint8_t) );
 8001b5a:	230d      	movs	r3, #13
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <IMU_Initialize+0x88>)
 8001b5e:	4905      	ldr	r1, [pc, #20]	; (8001b74 <IMU_Initialize+0x8c>)
 8001b60:	4805      	ldr	r0, [pc, #20]	; (8001b78 <IMU_Initialize+0x90>)
 8001b62:	f003 fe99 	bl	8005898 <HAL_SPI_TransmitReceive_DMA>
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	2000022c 	.word	0x2000022c
 8001b74:	20000000 	.word	0x20000000
 8001b78:	2000046c 	.word	0x2000046c

08001b7c <HAL_SPI_TxRxCpltCallback>:

/* ---------------------------------------------------------------
	DMA送受信完了後のコールバック関数
--------------------------------------------------------------- */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef* hspi)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET );
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b8a:	4814      	ldr	r0, [pc, #80]	; (8001bdc <HAL_SPI_TxRxCpltCallback+0x60>)
 8001b8c:	f003 f8aa 	bl	8004ce4 <HAL_GPIO_WritePin>
	accel_x_value = ( ( (int16_t)imu_value[3]<<8 ) | ( (int16_t)imu_value[4]&0x00ff ) );
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <HAL_SPI_TxRxCpltCallback+0x64>)
 8001b92:	78db      	ldrb	r3, [r3, #3]
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_SPI_TxRxCpltCallback+0x64>)
 8001b9a:	791b      	ldrb	r3, [r3, #4]
 8001b9c:	b21b      	sxth	r3, r3
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	b21a      	sxth	r2, r3
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_SPI_TxRxCpltCallback+0x68>)
 8001ba4:	801a      	strh	r2, [r3, #0]
	gyro_z_value =  ( ( (int16_t)imu_value[11]<<8 ) | ( (int16_t)imu_value[12]&0x00ff ) );
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_SPI_TxRxCpltCallback+0x64>)
 8001ba8:	7adb      	ldrb	r3, [r3, #11]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_SPI_TxRxCpltCallback+0x64>)
 8001bb0:	7b1b      	ldrb	r3, [r3, #12]
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_SPI_TxRxCpltCallback+0x6c>)
 8001bba:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin( SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET );
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bc2:	4806      	ldr	r0, [pc, #24]	; (8001bdc <HAL_SPI_TxRxCpltCallback+0x60>)
 8001bc4:	f003 f88e 	bl	8004ce4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA( &hspi2, &imu_address, imu_value, sizeof(imu_value)/sizeof(uint8_t) );
 8001bc8:	230d      	movs	r3, #13
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <HAL_SPI_TxRxCpltCallback+0x64>)
 8001bcc:	4907      	ldr	r1, [pc, #28]	; (8001bec <HAL_SPI_TxRxCpltCallback+0x70>)
 8001bce:	4808      	ldr	r0, [pc, #32]	; (8001bf0 <HAL_SPI_TxRxCpltCallback+0x74>)
 8001bd0:	f003 fe62 	bl	8005898 <HAL_SPI_TransmitReceive_DMA>
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	2000022c 	.word	0x2000022c
 8001be4:	2000023a 	.word	0x2000023a
 8001be8:	2000023e 	.word	0x2000023e
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	2000046c 	.word	0x2000046c

08001bf4 <IMU_GetAccel_X>:

/* ---------------------------------------------------------------
	X軸加速度計の加速度を取得する関数[m/s^2]
--------------------------------------------------------------- */
float IMU_GetAccel_X( void )
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
	return ACCEL_X_SIGN * G * (accel_x_value - accel_x_reference) / ACCEL_X_SENSITIVITY;
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <IMU_GetAccel_X+0x3c>)
 8001bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <IMU_GetAccel_X+0x40>)
 8001c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	ee07 3a90 	vmov	s15, r3
 8001c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c10:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001c38 <IMU_GetAccel_X+0x44>
 8001c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c18:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001c3c <IMU_GetAccel_X+0x48>
 8001c1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c20:	eef0 7a66 	vmov.f32	s15, s13
}
 8001c24:	eeb0 0a67 	vmov.f32	s0, s15
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	2000023a 	.word	0x2000023a
 8001c34:	2000023c 	.word	0x2000023c
 8001c38:	411ce80a 	.word	0x411ce80a
 8001c3c:	45800000 	.word	0x45800000

08001c40 <IMU_GetGyro_Z>:

/* ---------------------------------------------------------------
	Z軸ジャイロの角速度を取得する関数[rad/s]
--------------------------------------------------------------- */
float IMU_GetGyro_Z( void )
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
	return GYRO_Z_SIGN * DEG2RAD( (gyro_z_value - gyro_z_reference) / GYRO_Z_SENSITIVITY );
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <IMU_GetGyro_Z+0x44>)
 8001c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <IMU_GetGyro_Z+0x48>)
 8001c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	ee07 3a90 	vmov	s15, r3
 8001c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001c8c <IMU_GetGyro_Z+0x4c>
 8001c60:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c64:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001c90 <IMU_GetGyro_Z+0x50>
 8001c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c6c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001c94 <IMU_GetGyro_Z+0x54>
 8001c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c74:	eef1 7a67 	vneg.f32	s15, s15
}
 8001c78:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	2000023e 	.word	0x2000023e
 8001c88:	20000240 	.word	0x20000240
 8001c8c:	41833333 	.word	0x41833333
 8001c90:	43340000 	.word	0x43340000
 8001c94:	40490fda 	.word	0x40490fda

08001c98 <Interrupt_Main>:

/* ---------------------------------------------------------------
	1ms周期で割り込み処理関数
--------------------------------------------------------------- */
void Interrupt_Main( void )
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
	// ここにメインの割り込み処理を記述する

}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <Interrupt_Initialize>:

/* ---------------------------------------------------------------
	メイン割り込みの初期設定関数
--------------------------------------------------------------- */
void Interrupt_Initialize( void )
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT( &htim5 );
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <Interrupt_Initialize+0x10>)
 8001cae:	f004 f932 	bl	8005f16 <HAL_TIM_Base_Start_IT>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000684 	.word	0x20000684

08001cbc <Interrupt_PreProcess>:

/* ---------------------------------------------------------------
	割り込み前処理関数
--------------------------------------------------------------- */
void Interrupt_PreProcess( void )
{
 8001cbc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001cc0:	ed2d 8b02 	vpush	{d8}
 8001cc4:	af00      	add	r7, sp, #0
	static uint32_t		interrupt_count_old = 0;
	static uint64_t		boot_time_count = 0;

	interrupt_count_now = TIMER_COUNT;
 8001cc6:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <Interrupt_PreProcess+0x88>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	4a1e      	ldr	r2, [pc, #120]	; (8001d48 <Interrupt_PreProcess+0x8c>)
 8001cce:	6013      	str	r3, [r2, #0]
	boot_time_count += (uint16_t)(interrupt_count_now - interrupt_count_old);
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <Interrupt_PreProcess+0x8c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <Interrupt_PreProcess+0x90>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	b299      	uxth	r1, r3
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <Interrupt_PreProcess+0x94>)
 8001ce8:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001cec:	eb1b 0301 	adds.w	r3, fp, r1
 8001cf0:	eb4c 0402 	adc.w	r4, ip, r2
 8001cf4:	4a16      	ldr	r2, [pc, #88]	; (8001d50 <Interrupt_PreProcess+0x94>)
 8001cf6:	e9c2 3400 	strd	r3, r4, [r2]
	interrupt_count_old = interrupt_count_now;
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <Interrupt_PreProcess+0x8c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <Interrupt_PreProcess+0x90>)
 8001d00:	6013      	str	r3, [r2, #0]
	boot_time = (float)boot_time_count / (float)(PCLK / TIMER_PSC);
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <Interrupt_PreProcess+0x94>)
 8001d04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	f7ff f8ac 	bl	8000e68 <__aeabi_ul2f>
 8001d10:	ee08 0a10 	vmov	s16, r0
 8001d14:	f003 f9d2 	bl	80050bc <HAL_RCC_GetPCLK2Freq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <Interrupt_PreProcess+0x88>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	ee07 3a90 	vmov	s15, r3
 8001d28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d2c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <Interrupt_PreProcess+0x98>)
 8001d32:	edc3 7a00 	vstr	s15, [r3]
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	ecbd 8b02 	vpop	{d8}
 8001d3e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001d42:	bf00      	nop
 8001d44:	20000684 	.word	0x20000684
 8001d48:	20000244 	.word	0x20000244
 8001d4c:	20000254 	.word	0x20000254
 8001d50:	20000258 	.word	0x20000258
 8001d54:	20000250 	.word	0x20000250

08001d58 <Interrupt_PostProcess>:

/* ---------------------------------------------------------------
	割り込み後処理関数
--------------------------------------------------------------- */
void Interrupt_PostProcess( void )
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
	interrupt_duty = (TIMER_COUNT - interrupt_count_now) * 1000 / TIMER_LOAD;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <Interrupt_PostProcess+0x44>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d62:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <Interrupt_PostProcess+0x48>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d6c:	fb02 f203 	mul.w	r2, r2, r3
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <Interrupt_PostProcess+0x44>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <Interrupt_PostProcess+0x4c>)
 8001d7c:	6013      	str	r3, [r2, #0]
	interrupt_duty_max = MAX( interrupt_duty_max, interrupt_duty );
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <Interrupt_PostProcess+0x4c>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <Interrupt_PostProcess+0x50>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4293      	cmp	r3, r2
 8001d88:	bf38      	it	cc
 8001d8a:	4613      	movcc	r3, r2
 8001d8c:	4a06      	ldr	r2, [pc, #24]	; (8001da8 <Interrupt_PostProcess+0x50>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000684 	.word	0x20000684
 8001da0:	20000244 	.word	0x20000244
 8001da4:	20000248 	.word	0x20000248
 8001da8:	2000024c 	.word	0x2000024c

08001dac <Interrupt_GetDuty>:

/* ---------------------------------------------------------------
	割り込み周期に占める呼び出し位置までの処理時間の割合を取得する関数
--------------------------------------------------------------- */
uint16_t Interrupt_GetDuty( void )
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
	return interrupt_duty;
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <Interrupt_GetDuty+0x14>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	20000248 	.word	0x20000248

08001dc4 <Interrupt_GetDuty_Max>:

/* ---------------------------------------------------------------
	上記割合の最大値を取得する関数
--------------------------------------------------------------- */
uint16_t Interrupt_GetDuty_Max( void )
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
	return interrupt_duty_max;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <Interrupt_GetDuty_Max+0x14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b29b      	uxth	r3, r3
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	2000024c 	.word	0x2000024c

08001ddc <Interrupt_GetBootTime>:

/* ---------------------------------------------------------------
	マイコン起動時からの経過時間を取得する関数
--------------------------------------------------------------- */
float Interrupt_GetBootTime( void )
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
	return boot_time;
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <Interrupt_GetBootTime+0x18>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	ee07 3a90 	vmov	s15, r3
}
 8001de8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	20000250 	.word	0x20000250

08001df8 <HAL_ADC_ConvCpltCallback>:

/* ---------------------------------------------------------------
	全AD変換終了後に行われる割り込み関数(Don't change the function name)
--------------------------------------------------------------- */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	Interrupt_PreProcess();
 8001e00:	f7ff ff5c 	bl	8001cbc <Interrupt_PreProcess>
	Interrupt_Main();
 8001e04:	f7ff ff48 	bl	8001c98 <Interrupt_Main>
	Interrupt_PostProcess();
 8001e08:	f7ff ffa6 	bl	8001d58 <Interrupt_PostProcess>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <Sensor_TurnOffLED>:

/* ---------------------------------------------------------------
	赤外センサの出力設定関数
--------------------------------------------------------------- */
void Sensor_TurnOffLED( void )
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
	for( int8_t i = 0; i < NUM_ADC; i++ ) {
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	71fb      	strb	r3, [r7, #7]
 8001e1e:	e00b      	b.n	8001e38 <Sensor_TurnOffLED+0x24>
		led_on_pattern[i] = 0;
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <Sensor_TurnOffLED+0x38>)
 8001e26:	2100      	movs	r1, #0
 8001e28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( int8_t i = 0; i < NUM_ADC; i++ ) {
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	71fb      	strb	r3, [r7, #7]
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b0b      	cmp	r3, #11
 8001e3e:	ddef      	ble.n	8001e20 <Sensor_TurnOffLED+0xc>
	}
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	20000260 	.word	0x20000260

08001e50 <Sensor_TurnOnLED>:

void Sensor_TurnOnLED( void )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	Sensor_TurnOffLED();
 8001e54:	f7ff ffde 	bl	8001e14 <Sensor_TurnOffLED>
	led_on_pattern[LED_FL_OFF] = LED_FL_Pin;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <Sensor_TurnOnLED+0x24>)
 8001e5a:	2280      	movs	r2, #128	; 0x80
 8001e5c:	615a      	str	r2, [r3, #20]
	led_on_pattern[LED_SL_OFF] = LED_SL_Pin;
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <Sensor_TurnOnLED+0x24>)
 8001e60:	2240      	movs	r2, #64	; 0x40
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24
	led_on_pattern[LED_SR_OFF] = LED_SR_Pin;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <Sensor_TurnOnLED+0x24>)
 8001e66:	2220      	movs	r2, #32
 8001e68:	61da      	str	r2, [r3, #28]
	led_on_pattern[LED_FR_OFF] = LED_FR_Pin;
 8001e6a:	4b02      	ldr	r3, [pc, #8]	; (8001e74 <Sensor_TurnOnLED+0x24>)
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	60da      	str	r2, [r3, #12]
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000260 	.word	0x20000260

08001e78 <Sensor_Initialize>:

/* ---------------------------------------------------------------
	赤外センサの初期設定関数
--------------------------------------------------------------- */
void Sensor_Initialize( void )
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	htim1.Instance->DIER |= TIM_DIER_CC1DE | TIM_DIER_CC2DE;
 8001e7c:	4b17      	ldr	r3, [pc, #92]	; (8001edc <Sensor_Initialize+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <Sensor_Initialize+0x64>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8001e8a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_MOE_ENABLE(&htim1);
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <Sensor_Initialize+0x64>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <Sensor_Initialize+0x64>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e9a:	645a      	str	r2, [r3, #68]	; 0x44
	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <Sensor_Initialize+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0201 	mvn.w	r2, #1
 8001ea4:	611a      	str	r2, [r3, #16]

	Sensor_TurnOnLED();
 8001ea6:	f7ff ffd3 	bl	8001e50 <Sensor_TurnOnLED>
//	HAL_DMA_RegisterCallback (htim1.hdma[TIM_DMA_ID_CC2], HAL_DMA_XFER_CPLT_CB_ID, TIM1_CC2_Callback);
	HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_CC1], (uint32_t)led_on_pattern,  (uint32_t)(&(GPIOA->BSRR)), NUM_ADC);
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <Sensor_Initialize+0x64>)
 8001eac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001eae:	490c      	ldr	r1, [pc, #48]	; (8001ee0 <Sensor_Initialize+0x68>)
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <Sensor_Initialize+0x6c>)
 8001eb4:	f002 fa32 	bl	800431c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_CC2], (uint32_t)led_off_pattern, (uint32_t)(&(GPIOA->BSRR)), NUM_ADC);
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <Sensor_Initialize+0x64>)
 8001eba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001ebc:	490a      	ldr	r1, [pc, #40]	; (8001ee8 <Sensor_Initialize+0x70>)
 8001ebe:	230c      	movs	r3, #12
 8001ec0:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <Sensor_Initialize+0x6c>)
 8001ec2:	f002 fa2b 	bl	800431c <HAL_DMA_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, NUM_ADC);
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	4908      	ldr	r1, [pc, #32]	; (8001eec <Sensor_Initialize+0x74>)
 8001eca:	4809      	ldr	r0, [pc, #36]	; (8001ef0 <Sensor_Initialize+0x78>)
 8001ecc:	f001 fcce 	bl	800386c <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001ed0:	2108      	movs	r1, #8
 8001ed2:	4802      	ldr	r0, [pc, #8]	; (8001edc <Sensor_Initialize+0x64>)
 8001ed4:	f004 f878 	bl	8005fc8 <HAL_TIM_PWM_Start>
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000704 	.word	0x20000704
 8001ee0:	20000260 	.word	0x20000260
 8001ee4:	40020018 	.word	0x40020018
 8001ee8:	20000004 	.word	0x20000004
 8001eec:	20000290 	.word	0x20000290
 8001ef0:	200002b4 	.word	0x200002b4

08001ef4 <Sensor_StartADC>:

/* ---------------------------------------------------------------
	AD変換を開始する関数
--------------------------------------------------------------- */
void Sensor_StartADC( void )
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4804      	ldr	r0, [pc, #16]	; (8001f0c <Sensor_StartADC+0x18>)
 8001efc:	f004 f864 	bl	8005fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001f00:	2104      	movs	r1, #4
 8001f02:	4802      	ldr	r0, [pc, #8]	; (8001f0c <Sensor_StartADC+0x18>)
 8001f04:	f004 f860 	bl	8005fc8 <HAL_TIM_PWM_Start>
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000704 	.word	0x20000704

08001f10 <Sensor_GetBatteryValue>:

/* ---------------------------------------------------------------
	バッテリのAD値を取得する関数
--------------------------------------------------------------- */
uint16_t Sensor_GetBatteryValue( void )
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
	return( (adc_value[0] + adc_value[1] + adc_value[10] + adc_value[11]) / 4 );
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <Sensor_GetBatteryValue+0x30>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <Sensor_GetBatteryValue+0x30>)
 8001f1c:	885b      	ldrh	r3, [r3, #2]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <Sensor_GetBatteryValue+0x30>)
 8001f22:	8a92      	ldrh	r2, [r2, #20]
 8001f24:	4413      	add	r3, r2
 8001f26:	4a06      	ldr	r2, [pc, #24]	; (8001f40 <Sensor_GetBatteryValue+0x30>)
 8001f28:	8ad2      	ldrh	r2, [r2, #22]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	da00      	bge.n	8001f32 <Sensor_GetBatteryValue+0x22>
 8001f30:	3303      	adds	r3, #3
 8001f32:	109b      	asrs	r3, r3, #2
 8001f34:	b29b      	uxth	r3, r3
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	20000290 	.word	0x20000290

08001f44 <Sensor_GetValue>:

/* ---------------------------------------------------------------
	赤外センサの偏差値を取得する関数
--------------------------------------------------------------- */
int16_t Sensor_GetValue( uint8_t dir )
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
	switch( dir ) {
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d82b      	bhi.n	8001fac <Sensor_GetValue+0x68>
 8001f54:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <Sensor_GetValue+0x18>)
 8001f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5a:	bf00      	nop
 8001f5c:	08001f8d 	.word	0x08001f8d
 8001f60:	08001f9d 	.word	0x08001f9d
 8001f64:	08001f7d 	.word	0x08001f7d
 8001f68:	08001f6d 	.word	0x08001f6d
		case 3: 	return GET_ADC_DATA(LED_FL_ON) - GET_ADC_DATA(LED_FL_OFF);	break;
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <Sensor_GetValue+0x78>)
 8001f6e:	895a      	ldrh	r2, [r3, #10]
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <Sensor_GetValue+0x78>)
 8001f72:	891b      	ldrh	r3, [r3, #8]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	e019      	b.n	8001fb0 <Sensor_GetValue+0x6c>
		case 2: 	return GET_ADC_DATA(LED_SL_ON) - GET_ADC_DATA(LED_SL_OFF);	break;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <Sensor_GetValue+0x78>)
 8001f7e:	8a5a      	ldrh	r2, [r3, #18]
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <Sensor_GetValue+0x78>)
 8001f82:	8a1b      	ldrh	r3, [r3, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	e011      	b.n	8001fb0 <Sensor_GetValue+0x6c>
		case 0: 	return GET_ADC_DATA(LED_SR_ON) - GET_ADC_DATA(LED_SR_OFF);	break;
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <Sensor_GetValue+0x78>)
 8001f8e:	89da      	ldrh	r2, [r3, #14]
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <Sensor_GetValue+0x78>)
 8001f92:	899b      	ldrh	r3, [r3, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	e009      	b.n	8001fb0 <Sensor_GetValue+0x6c>
		case 1: 	return GET_ADC_DATA(LED_FR_ON) - GET_ADC_DATA(LED_FR_OFF);	break;
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <Sensor_GetValue+0x78>)
 8001f9e:	88da      	ldrh	r2, [r3, #6]
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <Sensor_GetValue+0x78>)
 8001fa2:	889b      	ldrh	r3, [r3, #4]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	e001      	b.n	8001fb0 <Sensor_GetValue+0x6c>
		default:	return -1;													break;
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	20000290 	.word	0x20000290

08001fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fc4:	f001 fb7a 	bl	80036bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fc8:	f000 f830 	bl	800202c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fcc:	f7ff fce8 	bl	80019a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fd0:	f7ff fc1c 	bl	800180c <MX_DMA_Init>
  MX_ADC1_Init();
 8001fd4:	f7ff f90e 	bl	80011f4 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001fd8:	f000 fc3e 	bl	8002858 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001fdc:	f000 fe7e 	bl	8002cdc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001fe0:	f000 ff48 	bl	8002e74 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fe4:	f000 ff9a 	bl	8002f1c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001fe8:	f000 ffec 	bl	8002fc4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001fec:	f001 f882 	bl	80030f4 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001ff0:	f001 fa5a 	bl	80034a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  	LED_ALL_ON();				// LED全点灯
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f44f 5164 	mov.w	r1, #14592	; 0x3900
 8001ffa:	480b      	ldr	r0, [pc, #44]	; (8002028 <main+0x68>)
 8001ffc:	f002 fe72 	bl	8004ce4 <HAL_GPIO_WritePin>
  	Communicate_Initialize();	// ターミナルとの通信初期設定
 8002000:	f7ff fbe0 	bl	80017c4 <Communicate_Initialize>
  	Motor_Initialize();			// モータ用タイマ初期設定
 8002004:	f000 faec 	bl	80025e0 <Motor_Initialize>
  	Encoder_Initialize();		// エンコーダー用タイマ初期設定
 8002008:	f7ff fc5e 	bl	80018c8 <Encoder_Initialize>
  	IMU_Initialize();			// IMU用通信およびICM20648の初期設定
 800200c:	f7ff fd6c 	bl	8001ae8 <IMU_Initialize>
  	Sensor_Initialize();		// 壁センサ用AD変換およびタイマ初期設定
 8002010:	f7ff ff32 	bl	8001e78 <Sensor_Initialize>
  	Interrupt_Initialize();		// メイン割り込み処理の初期設定
 8002014:	f7ff fe48 	bl	8001ca8 <Interrupt_Initialize>

  	Battery_LimiterVoltage();	// バッテリの電圧管理
 8002018:	f7ff fa7c 	bl	8001514 <Battery_LimiterVoltage>
  	Sensor_StartADC();			// 壁センサ用AD変換の開始
 800201c:	f7ff ff6a 	bl	8001ef4 <Sensor_StartADC>
  	module_test();				// 各機能の動作確認（動作確認が完了したらコメントアウトして下さい
 8002020:	f000 f876 	bl	8002110 <module_test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002024:	e7fe      	b.n	8002024 <main+0x64>
 8002026:	bf00      	nop
 8002028:	40020000 	.word	0x40020000

0800202c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b094      	sub	sp, #80	; 0x50
 8002030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	2234      	movs	r2, #52	; 0x34
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f006 f914 	bl	8008268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002040:	f107 0308 	add.w	r3, r7, #8
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <SystemClock_Config+0xcc>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	4a27      	ldr	r2, [pc, #156]	; (80020f8 <SystemClock_Config+0xcc>)
 800205a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205e:	6413      	str	r3, [r2, #64]	; 0x40
 8002060:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <SystemClock_Config+0xcc>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800206c:	2300      	movs	r3, #0
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	4b22      	ldr	r3, [pc, #136]	; (80020fc <SystemClock_Config+0xd0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a21      	ldr	r2, [pc, #132]	; (80020fc <SystemClock_Config+0xd0>)
 8002076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <SystemClock_Config+0xd0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002088:	2302      	movs	r3, #2
 800208a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800208c:	2301      	movs	r3, #1
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002090:	2310      	movs	r3, #16
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002094:	2302      	movs	r3, #2
 8002096:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002098:	2300      	movs	r3, #0
 800209a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800209c:	2310      	movs	r3, #16
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80020a0:	23c0      	movs	r3, #192	; 0xc0
 80020a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020a4:	2302      	movs	r3, #2
 80020a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80020a8:	2302      	movs	r3, #2
 80020aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020ac:	2302      	movs	r3, #2
 80020ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b0:	f107 031c 	add.w	r3, r7, #28
 80020b4:	4618      	mov	r0, r3
 80020b6:	f003 f815 	bl	80050e4 <HAL_RCC_OscConfig>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80020c0:	f000 f81e 	bl	8002100 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020c4:	230f      	movs	r3, #15
 80020c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020c8:	2302      	movs	r3, #2
 80020ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80020da:	f107 0308 	add.w	r3, r7, #8
 80020de:	2103      	movs	r1, #3
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 fe33 	bl	8004d4c <HAL_RCC_ClockConfig>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80020ec:	f000 f808 	bl	8002100 <Error_Handler>
  }
}
 80020f0:	bf00      	nop
 80020f2:	3750      	adds	r7, #80	; 0x50
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40007000 	.word	0x40007000

08002100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <module_test>:

/* ---------------------------------------------------------------
	各機能の動作確認用関数
--------------------------------------------------------------- */
void module_test( void )
{
 8002110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002112:	b085      	sub	sp, #20
 8002114:	af02      	add	r7, sp, #8
	uint16_t	line 	  = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	80fb      	strh	r3, [r7, #6]
	uint8_t		key;
	int16_t		duty_l	  = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	80bb      	strh	r3, [r7, #4]
	int16_t		duty_r	  = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	807b      	strh	r3, [r7, #2]

	// DMAを一時的に停止
	HAL_DMA_Abort(huart1.hdmarx);
 8002122:	4be1      	ldr	r3, [pc, #900]	; (80024a8 <module_test+0x398>)
 8002124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002126:	4618      	mov	r0, r3
 8002128:	f002 f950 	bl	80043cc <HAL_DMA_Abort>

	// エンコーダのカウントをリセット
	Encoder_ResetCount_Left();
 800212c:	f7ff fbdc 	bl	80018e8 <Encoder_ResetCount_Left>
	Encoder_ResetCount_Right();
 8002130:	f7ff fbe6 	bl	8001900 <Encoder_ResetCount_Right>

	while( 1 ) {
		// 割り込み処理率を表示
		printf("<Boot Time> %8.3f[s]\r\n", Interrupt_GetBootTime()); line++;
 8002134:	f7ff fe52 	bl	8001ddc <Interrupt_GetBootTime>
 8002138:	ee10 3a10 	vmov	r3, s0
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fa2b 	bl	8000598 <__aeabi_f2d>
 8002142:	4603      	mov	r3, r0
 8002144:	460c      	mov	r4, r1
 8002146:	461a      	mov	r2, r3
 8002148:	4623      	mov	r3, r4
 800214a:	48d8      	ldr	r0, [pc, #864]	; (80024ac <module_test+0x39c>)
 800214c:	f006 ff7a 	bl	8009044 <iprintf>
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	3301      	adds	r3, #1
 8002154:	80fb      	strh	r3, [r7, #6]
		printf("<Interrupt> %3.1f[%%] (MAX : %3.1f[%%])\r\n",
				(float)Interrupt_GetDuty()/10.f, (float)Interrupt_GetDuty_Max()/10.f); line++;
 8002156:	f7ff fe29 	bl	8001dac <Interrupt_GetDuty>
 800215a:	4603      	mov	r3, r0
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002164:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002168:	eec7 6a87 	vdiv.f32	s13, s15, s14
		printf("<Interrupt> %3.1f[%%] (MAX : %3.1f[%%])\r\n",
 800216c:	ee16 0a90 	vmov	r0, s13
 8002170:	f7fe fa12 	bl	8000598 <__aeabi_f2d>
 8002174:	4605      	mov	r5, r0
 8002176:	460e      	mov	r6, r1
				(float)Interrupt_GetDuty()/10.f, (float)Interrupt_GetDuty_Max()/10.f); line++;
 8002178:	f7ff fe24 	bl	8001dc4 <Interrupt_GetDuty_Max>
 800217c:	4603      	mov	r3, r0
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002186:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800218a:	eec7 6a87 	vdiv.f32	s13, s15, s14
		printf("<Interrupt> %3.1f[%%] (MAX : %3.1f[%%])\r\n",
 800218e:	ee16 0a90 	vmov	r0, s13
 8002192:	f7fe fa01 	bl	8000598 <__aeabi_f2d>
 8002196:	4603      	mov	r3, r0
 8002198:	460c      	mov	r4, r1
 800219a:	e9cd 3400 	strd	r3, r4, [sp]
 800219e:	462a      	mov	r2, r5
 80021a0:	4633      	mov	r3, r6
 80021a2:	48c3      	ldr	r0, [pc, #780]	; (80024b0 <module_test+0x3a0>)
 80021a4:	f006 ff4e 	bl	8009044 <iprintf>
				(float)Interrupt_GetDuty()/10.f, (float)Interrupt_GetDuty_Max()/10.f); line++;
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	3301      	adds	r3, #1
 80021ac:	80fb      	strh	r3, [r7, #6]

		// モータを指定のDutyを表示
		printf("<PWM Duty> L: %4.1f[%%],  R: %4.1f[%%]\r\n",
				(float)duty_l/10.f, (float)duty_r/10.f); line++;
 80021ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021b2:	ee07 3a90 	vmov	s15, r3
 80021b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021be:	eec7 6a87 	vdiv.f32	s13, s15, s14
		printf("<PWM Duty> L: %4.1f[%%],  R: %4.1f[%%]\r\n",
 80021c2:	ee16 0a90 	vmov	r0, s13
 80021c6:	f7fe f9e7 	bl	8000598 <__aeabi_f2d>
 80021ca:	4605      	mov	r5, r0
 80021cc:	460e      	mov	r6, r1
				(float)duty_l/10.f, (float)duty_r/10.f); line++;
 80021ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021da:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021de:	eec7 6a87 	vdiv.f32	s13, s15, s14
		printf("<PWM Duty> L: %4.1f[%%],  R: %4.1f[%%]\r\n",
 80021e2:	ee16 0a90 	vmov	r0, s13
 80021e6:	f7fe f9d7 	bl	8000598 <__aeabi_f2d>
 80021ea:	4603      	mov	r3, r0
 80021ec:	460c      	mov	r4, r1
 80021ee:	e9cd 3400 	strd	r3, r4, [sp]
 80021f2:	462a      	mov	r2, r5
 80021f4:	4633      	mov	r3, r6
 80021f6:	48af      	ldr	r0, [pc, #700]	; (80024b4 <module_test+0x3a4>)
 80021f8:	f006 ff24 	bl	8009044 <iprintf>
				(float)duty_l/10.f, (float)duty_r/10.f); line++;
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	3301      	adds	r3, #1
 8002200:	80fb      	strh	r3, [r7, #6]

		// エンコーダの角度表示
		printf("<Encoder> L: %5.1f[deg],  R: %5.1f[deg]\r\n",
				RAD2DEG(Encoder_GetAngle_Left()), RAD2DEG(Encoder_GetAngle_Right())); line++;
 8002202:	f7ff fb8b 	bl	800191c <Encoder_GetAngle_Left>
 8002206:	eef0 6a40 	vmov.f32	s13, s0
 800220a:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80024b8 <module_test+0x3a8>
 800220e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002212:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80024bc <module_test+0x3ac>
 8002216:	ee67 7a87 	vmul.f32	s15, s15, s14
		printf("<Encoder> L: %5.1f[deg],  R: %5.1f[deg]\r\n",
 800221a:	ee17 0a90 	vmov	r0, s15
 800221e:	f7fe f9bb 	bl	8000598 <__aeabi_f2d>
 8002222:	4605      	mov	r5, r0
 8002224:	460e      	mov	r6, r1
				RAD2DEG(Encoder_GetAngle_Left()), RAD2DEG(Encoder_GetAngle_Right())); line++;
 8002226:	f7ff fb99 	bl	800195c <Encoder_GetAngle_Right>
 800222a:	eef0 6a40 	vmov.f32	s13, s0
 800222e:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80024b8 <module_test+0x3a8>
 8002232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002236:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80024bc <module_test+0x3ac>
 800223a:	ee67 7a87 	vmul.f32	s15, s15, s14
		printf("<Encoder> L: %5.1f[deg],  R: %5.1f[deg]\r\n",
 800223e:	ee17 0a90 	vmov	r0, s15
 8002242:	f7fe f9a9 	bl	8000598 <__aeabi_f2d>
 8002246:	4603      	mov	r3, r0
 8002248:	460c      	mov	r4, r1
 800224a:	e9cd 3400 	strd	r3, r4, [sp]
 800224e:	462a      	mov	r2, r5
 8002250:	4633      	mov	r3, r6
 8002252:	489b      	ldr	r0, [pc, #620]	; (80024c0 <module_test+0x3b0>)
 8002254:	f006 fef6 	bl	8009044 <iprintf>
				RAD2DEG(Encoder_GetAngle_Left()), RAD2DEG(Encoder_GetAngle_Right())); line++;
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	3301      	adds	r3, #1
 800225c:	80fb      	strh	r3, [r7, #6]

		// バッテリー電圧の表示
		printf("<Battery> %3.2f[V]\r\n", Battery_GetVoltage()); line++;
 800225e:	f7ff f941 	bl	80014e4 <Battery_GetVoltage>
 8002262:	ee10 3a10 	vmov	r3, s0
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f996 	bl	8000598 <__aeabi_f2d>
 800226c:	4603      	mov	r3, r0
 800226e:	460c      	mov	r4, r1
 8002270:	461a      	mov	r2, r3
 8002272:	4623      	mov	r3, r4
 8002274:	4893      	ldr	r0, [pc, #588]	; (80024c4 <module_test+0x3b4>)
 8002276:	f006 fee5 	bl	8009044 <iprintf>
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	3301      	adds	r3, #1
 800227e:	80fb      	strh	r3, [r7, #6]

		// 壁センサのAD値表示
		printf("<IR Sensor> FL: %4d, SL: %4d SR: %4d, FR: %4d\r\n",
				Sensor_GetValue(3), Sensor_GetValue(2), Sensor_GetValue(1), Sensor_GetValue(0)); line++;
 8002280:	2003      	movs	r0, #3
 8002282:	f7ff fe5f 	bl	8001f44 <Sensor_GetValue>
 8002286:	4603      	mov	r3, r0
		printf("<IR Sensor> FL: %4d, SL: %4d SR: %4d, FR: %4d\r\n",
 8002288:	461c      	mov	r4, r3
				Sensor_GetValue(3), Sensor_GetValue(2), Sensor_GetValue(1), Sensor_GetValue(0)); line++;
 800228a:	2002      	movs	r0, #2
 800228c:	f7ff fe5a 	bl	8001f44 <Sensor_GetValue>
 8002290:	4603      	mov	r3, r0
		printf("<IR Sensor> FL: %4d, SL: %4d SR: %4d, FR: %4d\r\n",
 8002292:	461d      	mov	r5, r3
				Sensor_GetValue(3), Sensor_GetValue(2), Sensor_GetValue(1), Sensor_GetValue(0)); line++;
 8002294:	2001      	movs	r0, #1
 8002296:	f7ff fe55 	bl	8001f44 <Sensor_GetValue>
 800229a:	4603      	mov	r3, r0
		printf("<IR Sensor> FL: %4d, SL: %4d SR: %4d, FR: %4d\r\n",
 800229c:	461e      	mov	r6, r3
				Sensor_GetValue(3), Sensor_GetValue(2), Sensor_GetValue(1), Sensor_GetValue(0)); line++;
 800229e:	2000      	movs	r0, #0
 80022a0:	f7ff fe50 	bl	8001f44 <Sensor_GetValue>
 80022a4:	4603      	mov	r3, r0
		printf("<IR Sensor> FL: %4d, SL: %4d SR: %4d, FR: %4d\r\n",
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	4633      	mov	r3, r6
 80022aa:	462a      	mov	r2, r5
 80022ac:	4621      	mov	r1, r4
 80022ae:	4886      	ldr	r0, [pc, #536]	; (80024c8 <module_test+0x3b8>)
 80022b0:	f006 fec8 	bl	8009044 <iprintf>
				Sensor_GetValue(3), Sensor_GetValue(2), Sensor_GetValue(1), Sensor_GetValue(0)); line++;
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	3301      	adds	r3, #1
 80022b8:	80fb      	strh	r3, [r7, #6]

		// IMU（加速度計とジャイロ）の計測値表示
		printf("<IMU> Accel_X: %5.3f[m/s^2], Gyro_Z: %6.3f[rad/s]\r\n",
				IMU_GetAccel_X(), IMU_GetGyro_Z()); line++;
 80022ba:	f7ff fc9b 	bl	8001bf4 <IMU_GetAccel_X>
 80022be:	ee10 3a10 	vmov	r3, s0
		printf("<IMU> Accel_X: %5.3f[m/s^2], Gyro_Z: %6.3f[rad/s]\r\n",
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f968 	bl	8000598 <__aeabi_f2d>
 80022c8:	4605      	mov	r5, r0
 80022ca:	460e      	mov	r6, r1
				IMU_GetAccel_X(), IMU_GetGyro_Z()); line++;
 80022cc:	f7ff fcb8 	bl	8001c40 <IMU_GetGyro_Z>
 80022d0:	ee10 3a10 	vmov	r3, s0
		printf("<IMU> Accel_X: %5.3f[m/s^2], Gyro_Z: %6.3f[rad/s]\r\n",
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f95f 	bl	8000598 <__aeabi_f2d>
 80022da:	4603      	mov	r3, r0
 80022dc:	460c      	mov	r4, r1
 80022de:	e9cd 3400 	strd	r3, r4, [sp]
 80022e2:	462a      	mov	r2, r5
 80022e4:	4633      	mov	r3, r6
 80022e6:	4879      	ldr	r0, [pc, #484]	; (80024cc <module_test+0x3bc>)
 80022e8:	f006 feac 	bl	8009044 <iprintf>
				IMU_GetAccel_X(), IMU_GetGyro_Z()); line++;
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	3301      	adds	r3, #1
 80022f0:	80fb      	strh	r3, [r7, #6]

		// モータのDuty入力
		key = Communicate_TerminalRecv();
 80022f2:	f7ff f94b 	bl	800158c <Communicate_TerminalRecv>
 80022f6:	4603      	mov	r3, r0
 80022f8:	707b      	strb	r3, [r7, #1]
		switch( key ) {
 80022fa:	787b      	ldrb	r3, [r7, #1]
 80022fc:	3b1b      	subs	r3, #27
 80022fe:	2b5c      	cmp	r3, #92	; 0x5c
 8002300:	f200 8113 	bhi.w	800252a <module_test+0x41a>
 8002304:	a201      	add	r2, pc, #4	; (adr r2, 800230c <module_test+0x1fc>)
 8002306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230a:	bf00      	nop
 800230c:	080025c5 	.word	0x080025c5
 8002310:	0800252b 	.word	0x0800252b
 8002314:	0800252b 	.word	0x0800252b
 8002318:	0800252b 	.word	0x0800252b
 800231c:	0800252b 	.word	0x0800252b
 8002320:	0800252b 	.word	0x0800252b
 8002324:	0800252b 	.word	0x0800252b
 8002328:	0800252b 	.word	0x0800252b
 800232c:	0800252b 	.word	0x0800252b
 8002330:	0800252b 	.word	0x0800252b
 8002334:	0800252b 	.word	0x0800252b
 8002338:	0800252b 	.word	0x0800252b
 800233c:	0800252b 	.word	0x0800252b
 8002340:	0800252b 	.word	0x0800252b
 8002344:	0800252b 	.word	0x0800252b
 8002348:	0800252b 	.word	0x0800252b
 800234c:	0800252b 	.word	0x0800252b
 8002350:	0800252b 	.word	0x0800252b
 8002354:	0800252b 	.word	0x0800252b
 8002358:	0800252b 	.word	0x0800252b
 800235c:	0800252b 	.word	0x0800252b
 8002360:	0800252b 	.word	0x0800252b
 8002364:	08002481 	.word	0x08002481
 8002368:	08002495 	.word	0x08002495
 800236c:	080024d1 	.word	0x080024d1
 8002370:	0800252b 	.word	0x0800252b
 8002374:	0800252b 	.word	0x0800252b
 8002378:	0800252b 	.word	0x0800252b
 800237c:	080024e5 	.word	0x080024e5
 8002380:	080024f9 	.word	0x080024f9
 8002384:	0800250d 	.word	0x0800250d
 8002388:	0800252b 	.word	0x0800252b
 800238c:	0800252b 	.word	0x0800252b
 8002390:	0800252b 	.word	0x0800252b
 8002394:	0800252b 	.word	0x0800252b
 8002398:	0800252b 	.word	0x0800252b
 800239c:	0800252b 	.word	0x0800252b
 80023a0:	0800252b 	.word	0x0800252b
 80023a4:	0800252b 	.word	0x0800252b
 80023a8:	0800252b 	.word	0x0800252b
 80023ac:	0800252b 	.word	0x0800252b
 80023b0:	0800252b 	.word	0x0800252b
 80023b4:	0800252b 	.word	0x0800252b
 80023b8:	0800252b 	.word	0x0800252b
 80023bc:	0800252b 	.word	0x0800252b
 80023c0:	0800252b 	.word	0x0800252b
 80023c4:	0800252b 	.word	0x0800252b
 80023c8:	0800252b 	.word	0x0800252b
 80023cc:	0800252b 	.word	0x0800252b
 80023d0:	0800252b 	.word	0x0800252b
 80023d4:	0800252b 	.word	0x0800252b
 80023d8:	0800252b 	.word	0x0800252b
 80023dc:	0800252b 	.word	0x0800252b
 80023e0:	0800252b 	.word	0x0800252b
 80023e4:	0800252b 	.word	0x0800252b
 80023e8:	0800252b 	.word	0x0800252b
 80023ec:	0800252b 	.word	0x0800252b
 80023f0:	0800252b 	.word	0x0800252b
 80023f4:	0800252b 	.word	0x0800252b
 80023f8:	0800252b 	.word	0x0800252b
 80023fc:	0800252b 	.word	0x0800252b
 8002400:	0800252b 	.word	0x0800252b
 8002404:	0800252b 	.word	0x0800252b
 8002408:	0800252b 	.word	0x0800252b
 800240c:	0800252b 	.word	0x0800252b
 8002410:	0800252b 	.word	0x0800252b
 8002414:	0800252b 	.word	0x0800252b
 8002418:	0800252b 	.word	0x0800252b
 800241c:	0800252b 	.word	0x0800252b
 8002420:	0800252b 	.word	0x0800252b
 8002424:	0800252b 	.word	0x0800252b
 8002428:	0800252b 	.word	0x0800252b
 800242c:	0800252b 	.word	0x0800252b
 8002430:	0800252b 	.word	0x0800252b
 8002434:	080024db 	.word	0x080024db
 8002438:	0800252b 	.word	0x0800252b
 800243c:	0800252b 	.word	0x0800252b
 8002440:	0800252b 	.word	0x0800252b
 8002444:	08002503 	.word	0x08002503
 8002448:	0800252b 	.word	0x0800252b
 800244c:	0800252b 	.word	0x0800252b
 8002450:	0800252b 	.word	0x0800252b
 8002454:	0800252b 	.word	0x0800252b
 8002458:	0800252b 	.word	0x0800252b
 800245c:	08002517 	.word	0x08002517
 8002460:	0800252b 	.word	0x0800252b
 8002464:	0800248b 	.word	0x0800248b
 8002468:	08002521 	.word	0x08002521
 800246c:	0800252b 	.word	0x0800252b
 8002470:	0800252b 	.word	0x0800252b
 8002474:	080024ef 	.word	0x080024ef
 8002478:	0800252b 	.word	0x0800252b
 800247c:	0800249f 	.word	0x0800249f
			case '1': duty_l += 1;		break;
 8002480:	88bb      	ldrh	r3, [r7, #4]
 8002482:	3301      	adds	r3, #1
 8002484:	b29b      	uxth	r3, r3
 8002486:	80bb      	strh	r3, [r7, #4]
 8002488:	e04f      	b.n	800252a <module_test+0x41a>
			case 'q': duty_l -= 1;		break;
 800248a:	88bb      	ldrh	r3, [r7, #4]
 800248c:	3b01      	subs	r3, #1
 800248e:	b29b      	uxth	r3, r3
 8002490:	80bb      	strh	r3, [r7, #4]
 8002492:	e04a      	b.n	800252a <module_test+0x41a>
			case '2': duty_l += 10;		break;
 8002494:	88bb      	ldrh	r3, [r7, #4]
 8002496:	330a      	adds	r3, #10
 8002498:	b29b      	uxth	r3, r3
 800249a:	80bb      	strh	r3, [r7, #4]
 800249c:	e045      	b.n	800252a <module_test+0x41a>
			case 'w': duty_l -= 10;		break;
 800249e:	88bb      	ldrh	r3, [r7, #4]
 80024a0:	3b0a      	subs	r3, #10
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	80bb      	strh	r3, [r7, #4]
 80024a6:	e040      	b.n	800252a <module_test+0x41a>
 80024a8:	20000844 	.word	0x20000844
 80024ac:	0800c4c0 	.word	0x0800c4c0
 80024b0:	0800c4d8 	.word	0x0800c4d8
 80024b4:	0800c504 	.word	0x0800c504
 80024b8:	40490fda 	.word	0x40490fda
 80024bc:	43340000 	.word	0x43340000
 80024c0:	0800c530 	.word	0x0800c530
 80024c4:	0800c55c 	.word	0x0800c55c
 80024c8:	0800c574 	.word	0x0800c574
 80024cc:	0800c5a4 	.word	0x0800c5a4
			case '3': duty_l += 100;	break;
 80024d0:	88bb      	ldrh	r3, [r7, #4]
 80024d2:	3364      	adds	r3, #100	; 0x64
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	80bb      	strh	r3, [r7, #4]
 80024d8:	e027      	b.n	800252a <module_test+0x41a>
			case 'e': duty_l -= 100;	break;
 80024da:	88bb      	ldrh	r3, [r7, #4]
 80024dc:	3b64      	subs	r3, #100	; 0x64
 80024de:	b29b      	uxth	r3, r3
 80024e0:	80bb      	strh	r3, [r7, #4]
 80024e2:	e022      	b.n	800252a <module_test+0x41a>
			case '7': duty_r += 1;		break;
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	3301      	adds	r3, #1
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	807b      	strh	r3, [r7, #2]
 80024ec:	e01d      	b.n	800252a <module_test+0x41a>
			case 'u': duty_r -= 1;		break;
 80024ee:	887b      	ldrh	r3, [r7, #2]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	807b      	strh	r3, [r7, #2]
 80024f6:	e018      	b.n	800252a <module_test+0x41a>
			case '8': duty_r += 10;		break;
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	330a      	adds	r3, #10
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	807b      	strh	r3, [r7, #2]
 8002500:	e013      	b.n	800252a <module_test+0x41a>
			case 'i': duty_r -= 10;		break;
 8002502:	887b      	ldrh	r3, [r7, #2]
 8002504:	3b0a      	subs	r3, #10
 8002506:	b29b      	uxth	r3, r3
 8002508:	807b      	strh	r3, [r7, #2]
 800250a:	e00e      	b.n	800252a <module_test+0x41a>
			case '9': duty_r += 100;	break;
 800250c:	887b      	ldrh	r3, [r7, #2]
 800250e:	3364      	adds	r3, #100	; 0x64
 8002510:	b29b      	uxth	r3, r3
 8002512:	807b      	strh	r3, [r7, #2]
 8002514:	e009      	b.n	800252a <module_test+0x41a>
			case 'o': duty_r -= 100;	break;
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	3b64      	subs	r3, #100	; 0x64
 800251a:	b29b      	uxth	r3, r3
 800251c:	807b      	strh	r3, [r7, #2]
 800251e:	e004      	b.n	800252a <module_test+0x41a>
			case 'r': // reset
				duty_l = duty_r = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	807b      	strh	r3, [r7, #2]
 8002524:	887b      	ldrh	r3, [r7, #2]
 8002526:	80bb      	strh	r3, [r7, #4]
				break;
 8002528:	bf00      	nop
			case 0x1b: goto END; // [esc] exit
		}
		duty_l = SIGN(duty_l) * MIN( 950, ABS(duty_l) );
 800252a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	da02      	bge.n	8002538 <module_test+0x428>
 8002532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002536:	e000      	b.n	800253a <module_test+0x42a>
 8002538:	2201      	movs	r2, #1
 800253a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	bfb8      	it	lt
 8002542:	425b      	neglt	r3, r3
 8002544:	f240 31b6 	movw	r1, #950	; 0x3b6
 8002548:	428b      	cmp	r3, r1
 800254a:	bfa8      	it	ge
 800254c:	460b      	movge	r3, r1
 800254e:	b29b      	uxth	r3, r3
 8002550:	fb12 f303 	smulbb	r3, r2, r3
 8002554:	b29b      	uxth	r3, r3
 8002556:	80bb      	strh	r3, [r7, #4]
		duty_r = SIGN(duty_r) * MIN( 950, ABS(duty_r) );
 8002558:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800255c:	2b00      	cmp	r3, #0
 800255e:	da02      	bge.n	8002566 <module_test+0x456>
 8002560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002564:	e000      	b.n	8002568 <module_test+0x458>
 8002566:	2201      	movs	r2, #1
 8002568:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800256c:	2b00      	cmp	r3, #0
 800256e:	bfb8      	it	lt
 8002570:	425b      	neglt	r3, r3
 8002572:	f240 31b6 	movw	r1, #950	; 0x3b6
 8002576:	428b      	cmp	r3, r1
 8002578:	bfa8      	it	ge
 800257a:	460b      	movge	r3, r1
 800257c:	b29b      	uxth	r3, r3
 800257e:	fb12 f303 	smulbb	r3, r2, r3
 8002582:	b29b      	uxth	r3, r3
 8002584:	807b      	strh	r3, [r7, #2]

		// モータを回転
		Motor_SetDuty_Left(duty_l);
 8002586:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f85c 	bl	8002648 <Motor_SetDuty_Left>
		Motor_SetDuty_Right(duty_r);
 8002590:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f8db 	bl	8002750 <Motor_SetDuty_Right>

		fflush(stdout);
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <module_test+0x4c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f005 fd61 	bl	8008068 <fflush>
		HAL_Delay(500);
 80025a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025aa:	f001 f8f9 	bl	80037a0 <HAL_Delay>
		// 画面のクリア
		printf("%c[0J", 0x1b);
 80025ae:	211b      	movs	r1, #27
 80025b0:	4809      	ldr	r0, [pc, #36]	; (80025d8 <module_test+0x4c8>)
 80025b2:	f006 fd47 	bl	8009044 <iprintf>
		printf("%c[%dA", 0x1b, line);
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	461a      	mov	r2, r3
 80025ba:	211b      	movs	r1, #27
 80025bc:	4807      	ldr	r0, [pc, #28]	; (80025dc <module_test+0x4cc>)
 80025be:	f006 fd41 	bl	8009044 <iprintf>
		printf("<Boot Time> %8.3f[s]\r\n", Interrupt_GetBootTime()); line++;
 80025c2:	e5b7      	b.n	8002134 <module_test+0x24>
			case 0x1b: goto END; // [esc] exit
 80025c4:	bf00      	nop
	}
	END:;
	Motor_StopPWM();
 80025c6:	f000 f821 	bl	800260c <Motor_StopPWM>
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000040 	.word	0x20000040
 80025d8:	0800c5d8 	.word	0x0800c5d8
 80025dc:	0800c5e0 	.word	0x0800c5e0

080025e0 <Motor_Initialize>:

/* ---------------------------------------------------------------
	モータ用のタイマーを開始する関数
--------------------------------------------------------------- */
void Motor_Initialize( void )
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80025e4:	2100      	movs	r1, #0
 80025e6:	4808      	ldr	r0, [pc, #32]	; (8002608 <Motor_Initialize+0x28>)
 80025e8:	f003 fcee 	bl	8005fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80025ec:	2104      	movs	r1, #4
 80025ee:	4806      	ldr	r0, [pc, #24]	; (8002608 <Motor_Initialize+0x28>)
 80025f0:	f003 fcea 	bl	8005fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80025f4:	2108      	movs	r1, #8
 80025f6:	4804      	ldr	r0, [pc, #16]	; (8002608 <Motor_Initialize+0x28>)
 80025f8:	f003 fce6 	bl	8005fc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80025fc:	210c      	movs	r1, #12
 80025fe:	4802      	ldr	r0, [pc, #8]	; (8002608 <Motor_Initialize+0x28>)
 8002600:	f003 fce2 	bl	8005fc8 <HAL_TIM_PWM_Start>
}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	200005e4 	.word	0x200005e4

0800260c <Motor_StopPWM>:

/* ---------------------------------------------------------------
	モータのの回転を止める関数
--------------------------------------------------------------- */
void Motor_StopPWM( void )
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
	MOT_SET_COMPARE_L_FORWARD( 0xffff );
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <Motor_StopPWM+0x38>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002618:	639a      	str	r2, [r3, #56]	; 0x38
	MOT_SET_COMPARE_L_REVERSE( 0xffff );
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <Motor_StopPWM+0x38>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002622:	635a      	str	r2, [r3, #52]	; 0x34
	MOT_SET_COMPARE_R_FORWARD( 0xffff );
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <Motor_StopPWM+0x38>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
	MOT_SET_COMPARE_R_REVERSE( 0xffff );
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <Motor_StopPWM+0x38>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002636:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	200005e4 	.word	0x200005e4

08002648 <Motor_SetDuty_Left>:

/* ---------------------------------------------------------------
	左モータを指定のDuty（0～1000）で回転させる関数
--------------------------------------------------------------- */
void Motor_SetDuty_Left( int16_t duty_l )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
	uint32_t	pulse_l;

	if( ABS(duty_l) > MOT_DUTY_MAX ) {
 8002652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002656:	2b00      	cmp	r3, #0
 8002658:	bfb8      	it	lt
 800265a:	425b      	neglt	r3, r3
 800265c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002660:	4293      	cmp	r3, r2
 8002662:	dd12      	ble.n	800268a <Motor_SetDuty_Left+0x42>
		pulse_l = (uint32_t)(PCLK / PWMFREQ * MOT_DUTY_MAX / 1000) - 1;
 8002664:	f002 fd16 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 8002668:	4603      	mov	r3, r0
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	4a35      	ldr	r2, [pc, #212]	; (8002744 <Motor_SetDuty_Left+0xfc>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	09db      	lsrs	r3, r3, #7
 8002674:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002678:	fb02 f303 	mul.w	r3, r2, r3
 800267c:	4a32      	ldr	r2, [pc, #200]	; (8002748 <Motor_SetDuty_Left+0x100>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	099b      	lsrs	r3, r3, #6
 8002684:	3b01      	subs	r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	e036      	b.n	80026f8 <Motor_SetDuty_Left+0xb0>
	} else if( ABS(duty_l) < MOT_DUTY_MIN ) {
 800268a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800268e:	f113 0f1d 	cmn.w	r3, #29
 8002692:	db17      	blt.n	80026c4 <Motor_SetDuty_Left+0x7c>
 8002694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002698:	2b1d      	cmp	r3, #29
 800269a:	dc13      	bgt.n	80026c4 <Motor_SetDuty_Left+0x7c>
		pulse_l = (uint32_t)(PCLK / PWMFREQ * MOT_DUTY_MIN / 1000) - 1;
 800269c:	f002 fcfa 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 80026a0:	4603      	mov	r3, r0
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	4a27      	ldr	r2, [pc, #156]	; (8002744 <Motor_SetDuty_Left+0xfc>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	09da      	lsrs	r2, r3, #7
 80026ac:	4613      	mov	r3, r2
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b24      	ldr	r3, [pc, #144]	; (8002748 <Motor_SetDuty_Left+0x100>)
 80026b8:	fba3 2302 	umull	r2, r3, r3, r2
 80026bc:	099b      	lsrs	r3, r3, #6
 80026be:	3b01      	subs	r3, #1
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	e019      	b.n	80026f8 <Motor_SetDuty_Left+0xb0>
	} else {
		pulse_l = (uint32_t)(PCLK / PWMFREQ * ABS(duty_l) / 1000) - 1;
 80026c4:	f002 fce6 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 80026c8:	4603      	mov	r3, r0
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	4a1d      	ldr	r2, [pc, #116]	; (8002744 <Motor_SetDuty_Left+0xfc>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	09da      	lsrs	r2, r3, #7
 80026d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	da03      	bge.n	80026e4 <Motor_SetDuty_Left+0x9c>
 80026dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026e0:	425b      	negs	r3, r3
 80026e2:	e001      	b.n	80026e8 <Motor_SetDuty_Left+0xa0>
 80026e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026e8:	fb02 f303 	mul.w	r3, r2, r3
 80026ec:	4a16      	ldr	r2, [pc, #88]	; (8002748 <Motor_SetDuty_Left+0x100>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	099b      	lsrs	r3, r3, #6
 80026f4:	3b01      	subs	r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
	}

	if( duty_l > 0 ) {
 80026f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	dd08      	ble.n	8002712 <Motor_SetDuty_Left+0xca>
		MOT_SET_COMPARE_L_FORWARD( pulse_l );
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <Motor_SetDuty_Left+0x104>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	639a      	str	r2, [r3, #56]	; 0x38
		MOT_SET_COMPARE_L_REVERSE( 0 );
 8002708:	4b10      	ldr	r3, [pc, #64]	; (800274c <Motor_SetDuty_Left+0x104>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2200      	movs	r2, #0
 800270e:	635a      	str	r2, [r3, #52]	; 0x34
		MOT_SET_COMPARE_L_REVERSE( pulse_l );
	} else {
		MOT_SET_COMPARE_L_FORWARD( 0 );
		MOT_SET_COMPARE_L_REVERSE( 0 );
	}
}
 8002710:	e014      	b.n	800273c <Motor_SetDuty_Left+0xf4>
	} else if( duty_l < 0 ) {
 8002712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002716:	2b00      	cmp	r3, #0
 8002718:	da08      	bge.n	800272c <Motor_SetDuty_Left+0xe4>
		MOT_SET_COMPARE_L_FORWARD( 0 );
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <Motor_SetDuty_Left+0x104>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2200      	movs	r2, #0
 8002720:	639a      	str	r2, [r3, #56]	; 0x38
		MOT_SET_COMPARE_L_REVERSE( pulse_l );
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <Motor_SetDuty_Left+0x104>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	635a      	str	r2, [r3, #52]	; 0x34
}
 800272a:	e007      	b.n	800273c <Motor_SetDuty_Left+0xf4>
		MOT_SET_COMPARE_L_FORWARD( 0 );
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <Motor_SetDuty_Left+0x104>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2200      	movs	r2, #0
 8002732:	639a      	str	r2, [r3, #56]	; 0x38
		MOT_SET_COMPARE_L_REVERSE( 0 );
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <Motor_SetDuty_Left+0x104>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2200      	movs	r2, #0
 800273a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	0a7c5ac5 	.word	0x0a7c5ac5
 8002748:	10624dd3 	.word	0x10624dd3
 800274c:	200005e4 	.word	0x200005e4

08002750 <Motor_SetDuty_Right>:

/* ---------------------------------------------------------------
	右モータを指定のDuty（0～1000）で回転させる関数
--------------------------------------------------------------- */
void Motor_SetDuty_Right( int16_t duty_r )
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	80fb      	strh	r3, [r7, #6]
	uint32_t	pulse_r;

	if( ABS(duty_r) > MOT_DUTY_MAX ) {
 800275a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800275e:	2b00      	cmp	r3, #0
 8002760:	bfb8      	it	lt
 8002762:	425b      	neglt	r3, r3
 8002764:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002768:	4293      	cmp	r3, r2
 800276a:	dd12      	ble.n	8002792 <Motor_SetDuty_Right+0x42>
		pulse_r = (uint32_t)(PCLK / PWMFREQ * MOT_DUTY_MAX / 1000) - 1;
 800276c:	f002 fc92 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 8002770:	4603      	mov	r3, r0
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	4a35      	ldr	r2, [pc, #212]	; (800284c <Motor_SetDuty_Right+0xfc>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	09db      	lsrs	r3, r3, #7
 800277c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002780:	fb02 f303 	mul.w	r3, r2, r3
 8002784:	4a32      	ldr	r2, [pc, #200]	; (8002850 <Motor_SetDuty_Right+0x100>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	099b      	lsrs	r3, r3, #6
 800278c:	3b01      	subs	r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	e036      	b.n	8002800 <Motor_SetDuty_Right+0xb0>
	} else if( ABS(duty_r) < MOT_DUTY_MIN ) {
 8002792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002796:	f113 0f1d 	cmn.w	r3, #29
 800279a:	db17      	blt.n	80027cc <Motor_SetDuty_Right+0x7c>
 800279c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027a0:	2b1d      	cmp	r3, #29
 80027a2:	dc13      	bgt.n	80027cc <Motor_SetDuty_Right+0x7c>
		pulse_r = (uint32_t)(PCLK / PWMFREQ * MOT_DUTY_MIN / 1000) - 1;
 80027a4:	f002 fc76 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 80027a8:	4603      	mov	r3, r0
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	4a27      	ldr	r2, [pc, #156]	; (800284c <Motor_SetDuty_Right+0xfc>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	09da      	lsrs	r2, r3, #7
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	461a      	mov	r2, r3
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <Motor_SetDuty_Right+0x100>)
 80027c0:	fba3 2302 	umull	r2, r3, r3, r2
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	3b01      	subs	r3, #1
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	e019      	b.n	8002800 <Motor_SetDuty_Right+0xb0>
	} else {
		pulse_r = (uint32_t)(PCLK / PWMFREQ * ABS(duty_r) / 1000) - 1;
 80027cc:	f002 fc62 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 80027d0:	4603      	mov	r3, r0
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	4a1d      	ldr	r2, [pc, #116]	; (800284c <Motor_SetDuty_Right+0xfc>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	09da      	lsrs	r2, r3, #7
 80027dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	da03      	bge.n	80027ec <Motor_SetDuty_Right+0x9c>
 80027e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e8:	425b      	negs	r3, r3
 80027ea:	e001      	b.n	80027f0 <Motor_SetDuty_Right+0xa0>
 80027ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027f0:	fb02 f303 	mul.w	r3, r2, r3
 80027f4:	4a16      	ldr	r2, [pc, #88]	; (8002850 <Motor_SetDuty_Right+0x100>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	099b      	lsrs	r3, r3, #6
 80027fc:	3b01      	subs	r3, #1
 80027fe:	60fb      	str	r3, [r7, #12]
	}

	if( duty_r > 0 ) {
 8002800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002804:	2b00      	cmp	r3, #0
 8002806:	dd08      	ble.n	800281a <Motor_SetDuty_Right+0xca>
		MOT_SET_COMPARE_R_FORWARD( pulse_r );
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <Motor_SetDuty_Right+0x104>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	641a      	str	r2, [r3, #64]	; 0x40
		MOT_SET_COMPARE_R_REVERSE( 0 );
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <Motor_SetDuty_Right+0x104>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2200      	movs	r2, #0
 8002816:	63da      	str	r2, [r3, #60]	; 0x3c
		MOT_SET_COMPARE_R_REVERSE( pulse_r );
	} else {
		MOT_SET_COMPARE_R_FORWARD( 0 );
		MOT_SET_COMPARE_R_REVERSE( 0 );
	}
}
 8002818:	e014      	b.n	8002844 <Motor_SetDuty_Right+0xf4>
	} else if( duty_r < 0 ) {
 800281a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800281e:	2b00      	cmp	r3, #0
 8002820:	da08      	bge.n	8002834 <Motor_SetDuty_Right+0xe4>
		MOT_SET_COMPARE_R_FORWARD( 0 );
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <Motor_SetDuty_Right+0x104>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
		MOT_SET_COMPARE_R_REVERSE( pulse_r );
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <Motor_SetDuty_Right+0x104>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002832:	e007      	b.n	8002844 <Motor_SetDuty_Right+0xf4>
		MOT_SET_COMPARE_R_FORWARD( 0 );
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <Motor_SetDuty_Right+0x104>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2200      	movs	r2, #0
 800283a:	641a      	str	r2, [r3, #64]	; 0x40
		MOT_SET_COMPARE_R_REVERSE( 0 );
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <Motor_SetDuty_Right+0x104>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2200      	movs	r2, #0
 8002842:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	0a7c5ac5 	.word	0x0a7c5ac5
 8002850:	10624dd3 	.word	0x10624dd3
 8002854:	200005e4 	.word	0x200005e4

08002858 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <MX_SPI2_Init+0x64>)
 800285e:	4a18      	ldr	r2, [pc, #96]	; (80028c0 <MX_SPI2_Init+0x68>)
 8002860:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002862:	4b16      	ldr	r3, [pc, #88]	; (80028bc <MX_SPI2_Init+0x64>)
 8002864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002868:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800286a:	4b14      	ldr	r3, [pc, #80]	; (80028bc <MX_SPI2_Init+0x64>)
 800286c:	2200      	movs	r2, #0
 800286e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <MX_SPI2_Init+0x64>)
 8002872:	2200      	movs	r2, #0
 8002874:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <MX_SPI2_Init+0x64>)
 8002878:	2202      	movs	r2, #2
 800287a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <MX_SPI2_Init+0x64>)
 800287e:	2201      	movs	r2, #1
 8002880:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <MX_SPI2_Init+0x64>)
 8002884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002888:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <MX_SPI2_Init+0x64>)
 800288c:	2228      	movs	r2, #40	; 0x28
 800288e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002890:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <MX_SPI2_Init+0x64>)
 8002892:	2200      	movs	r2, #0
 8002894:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <MX_SPI2_Init+0x64>)
 8002898:	2200      	movs	r2, #0
 800289a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800289c:	4b07      	ldr	r3, [pc, #28]	; (80028bc <MX_SPI2_Init+0x64>)
 800289e:	2200      	movs	r2, #0
 80028a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <MX_SPI2_Init+0x64>)
 80028a4:	220a      	movs	r2, #10
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028a8:	4804      	ldr	r0, [pc, #16]	; (80028bc <MX_SPI2_Init+0x64>)
 80028aa:	f002 fe5d 	bl	8005568 <HAL_SPI_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80028b4:	f7ff fc24 	bl	8002100 <Error_Handler>
  }

}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	2000046c 	.word	0x2000046c
 80028c0:	40003800 	.word	0x40003800

080028c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a48      	ldr	r2, [pc, #288]	; (8002a04 <HAL_SPI_MspInit+0x140>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	f040 8089 	bne.w	80029fa <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	4b46      	ldr	r3, [pc, #280]	; (8002a08 <HAL_SPI_MspInit+0x144>)
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	4a45      	ldr	r2, [pc, #276]	; (8002a08 <HAL_SPI_MspInit+0x144>)
 80028f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f6:	6413      	str	r3, [r2, #64]	; 0x40
 80028f8:	4b43      	ldr	r3, [pc, #268]	; (8002a08 <HAL_SPI_MspInit+0x144>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	4b3f      	ldr	r3, [pc, #252]	; (8002a08 <HAL_SPI_MspInit+0x144>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	4a3e      	ldr	r2, [pc, #248]	; (8002a08 <HAL_SPI_MspInit+0x144>)
 800290e:	f043 0302 	orr.w	r3, r3, #2
 8002912:	6313      	str	r3, [r2, #48]	; 0x30
 8002914:	4b3c      	ldr	r3, [pc, #240]	; (8002a08 <HAL_SPI_MspInit+0x144>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002920:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002932:	2305      	movs	r3, #5
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	4619      	mov	r1, r3
 800293c:	4833      	ldr	r0, [pc, #204]	; (8002a0c <HAL_SPI_MspInit+0x148>)
 800293e:	f002 f83f 	bl	80049c0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002942:	4b33      	ldr	r3, [pc, #204]	; (8002a10 <HAL_SPI_MspInit+0x14c>)
 8002944:	4a33      	ldr	r2, [pc, #204]	; (8002a14 <HAL_SPI_MspInit+0x150>)
 8002946:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002948:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <HAL_SPI_MspInit+0x14c>)
 800294a:	2200      	movs	r2, #0
 800294c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800294e:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <HAL_SPI_MspInit+0x14c>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002954:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <HAL_SPI_MspInit+0x14c>)
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800295a:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <HAL_SPI_MspInit+0x14c>)
 800295c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002960:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002962:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_SPI_MspInit+0x14c>)
 8002964:	2200      	movs	r2, #0
 8002966:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002968:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <HAL_SPI_MspInit+0x14c>)
 800296a:	2200      	movs	r2, #0
 800296c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800296e:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <HAL_SPI_MspInit+0x14c>)
 8002970:	2200      	movs	r2, #0
 8002972:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002974:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <HAL_SPI_MspInit+0x14c>)
 8002976:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800297a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800297c:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <HAL_SPI_MspInit+0x14c>)
 800297e:	2200      	movs	r2, #0
 8002980:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002982:	4823      	ldr	r0, [pc, #140]	; (8002a10 <HAL_SPI_MspInit+0x14c>)
 8002984:	f001 fc1c 	bl	80041c0 <HAL_DMA_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800298e:	f7ff fbb7 	bl	8002100 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a1e      	ldr	r2, [pc, #120]	; (8002a10 <HAL_SPI_MspInit+0x14c>)
 8002996:	64da      	str	r2, [r3, #76]	; 0x4c
 8002998:	4a1d      	ldr	r2, [pc, #116]	; (8002a10 <HAL_SPI_MspInit+0x14c>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800299e:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <HAL_SPI_MspInit+0x154>)
 80029a0:	4a1e      	ldr	r2, [pc, #120]	; (8002a1c <HAL_SPI_MspInit+0x158>)
 80029a2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80029a4:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <HAL_SPI_MspInit+0x154>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029aa:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_SPI_MspInit+0x154>)
 80029ac:	2240      	movs	r2, #64	; 0x40
 80029ae:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029b0:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_SPI_MspInit+0x154>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029b6:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <HAL_SPI_MspInit+0x154>)
 80029b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029bc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029be:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <HAL_SPI_MspInit+0x154>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029c4:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <HAL_SPI_MspInit+0x154>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80029ca:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <HAL_SPI_MspInit+0x154>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <HAL_SPI_MspInit+0x154>)
 80029d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80029d6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_SPI_MspInit+0x154>)
 80029da:	2200      	movs	r2, #0
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80029de:	480e      	ldr	r0, [pc, #56]	; (8002a18 <HAL_SPI_MspInit+0x154>)
 80029e0:	f001 fbee 	bl	80041c0 <HAL_DMA_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 80029ea:	f7ff fb89 	bl	8002100 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <HAL_SPI_MspInit+0x154>)
 80029f2:	649a      	str	r2, [r3, #72]	; 0x48
 80029f4:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <HAL_SPI_MspInit+0x154>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80029fa:	bf00      	nop
 80029fc:	3728      	adds	r7, #40	; 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40003800 	.word	0x40003800
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020400 	.word	0x40020400
 8002a10:	200004c4 	.word	0x200004c4
 8002a14:	40026058 	.word	0x40026058
 8002a18:	20000524 	.word	0x20000524
 8002a1c:	40026070 	.word	0x40026070

08002a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	4a0f      	ldr	r2, [pc, #60]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a34:	6453      	str	r3, [r2, #68]	; 0x44
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800

08002a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a82:	e7fe      	b.n	8002a82 <HardFault_Handler+0x4>

08002a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a88:	e7fe      	b.n	8002a88 <MemManage_Handler+0x4>

08002a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a8e:	e7fe      	b.n	8002a8e <BusFault_Handler+0x4>

08002a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <UsageFault_Handler+0x4>

08002a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ac4:	f000 fe4c 	bl	8003760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}

08002acc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <DMA1_Stream3_IRQHandler+0x10>)
 8002ad2:	f001 fd0d 	bl	80044f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200004c4 	.word	0x200004c4

08002ae0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002ae4:	4802      	ldr	r0, [pc, #8]	; (8002af0 <DMA1_Stream4_IRQHandler+0x10>)
 8002ae6:	f001 fd03 	bl	80044f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000524 	.word	0x20000524

08002af4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <USART1_IRQHandler+0x10>)
 8002afa:	f004 fb05 	bl	8007108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000844 	.word	0x20000844

08002b08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b0c:	4802      	ldr	r0, [pc, #8]	; (8002b18 <DMA2_Stream0_IRQHandler+0x10>)
 8002b0e:	f001 fcef 	bl	80044f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200002fc 	.word	0x200002fc

08002b1c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002b20:	4802      	ldr	r0, [pc, #8]	; (8002b2c <DMA2_Stream1_IRQHandler+0x10>)
 8002b22:	f001 fce5 	bl	80044f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000584 	.word	0x20000584

08002b30 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <DMA2_Stream2_IRQHandler+0x10>)
 8002b36:	f001 fcdb 	bl	80044f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000624 	.word	0x20000624

08002b44 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <DMA2_Stream5_IRQHandler+0x10>)
 8002b4a:	f001 fcd1 	bl	80044f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200007e4 	.word	0x200007e4

08002b58 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <DMA2_Stream7_IRQHandler+0x10>)
 8002b5e:	f001 fcc7 	bl	80044f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000784 	.word	0x20000784

08002b6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	e00e      	b.n	8002b9c <_read+0x30>
	{
		*ptr = __io_getchar();
 8002b7e:	f7fe fe3d 	bl	80017fc <__io_getchar>
 8002b82:	4603      	mov	r3, r0
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	701a      	strb	r2, [r3, #0]
		if (*ptr++ == '\n') break;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	60ba      	str	r2, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b0a      	cmp	r3, #10
 8002b94:	d007      	beq.n	8002ba6 <_read+0x3a>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	dbec      	blt.n	8002b7e <_read+0x12>
 8002ba4:	e000      	b.n	8002ba8 <_read+0x3c>
		if (*ptr++ == '\n') break;
 8002ba6:	bf00      	nop
	}
	return ++DataIdx;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	3301      	adds	r3, #1
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	697b      	ldr	r3, [r7, #20]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_write>:

extern void outbyte(uint8_t c);
__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	e009      	b.n	8002bde <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	60ba      	str	r2, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe fe04 	bl	80017e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	dbf1      	blt.n	8002bca <_write+0x12>
	}
	return len;
 8002be6:	687b      	ldr	r3, [r7, #4]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_close>:

int _close(int file)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	return -1;
 8002bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c18:	605a      	str	r2, [r3, #4]
	return 0;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <_isatty>:

int _isatty(int file)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	return 1;
 8002c30:	2301      	movs	r3, #1
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
	return 0;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <_sbrk+0x50>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <_sbrk+0x16>
		heap_end = &end;
 8002c68:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <_sbrk+0x50>)
 8002c6a:	4a10      	ldr	r2, [pc, #64]	; (8002cac <_sbrk+0x54>)
 8002c6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <_sbrk+0x50>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <_sbrk+0x50>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	466a      	mov	r2, sp
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d907      	bls.n	8002c92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002c82:	f005 f93b 	bl	8007efc <__errno>
 8002c86:	4602      	mov	r2, r0
 8002c88:	230c      	movs	r3, #12
 8002c8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c90:	e006      	b.n	8002ca0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002c92:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <_sbrk+0x50>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	4a03      	ldr	r2, [pc, #12]	; (8002ca8 <_sbrk+0x50>)
 8002c9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	200002a8 	.word	0x200002a8
 8002cac:	20000890 	.word	0x20000890

08002cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <SystemInit+0x28>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	4a07      	ldr	r2, [pc, #28]	; (8002cd8 <SystemInit+0x28>)
 8002cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cc4:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <SystemInit+0x28>)
 8002cc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cca:	609a      	str	r2, [r3, #8]
#endif
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch1;
DMA_HandleTypeDef hdma_tim1_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b096      	sub	sp, #88	; 0x58
 8002ce0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ce2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	609a      	str	r2, [r3, #8]
 8002d06:	60da      	str	r2, [r3, #12]
 8002d08:	611a      	str	r2, [r3, #16]
 8002d0a:	615a      	str	r2, [r3, #20]
 8002d0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	2220      	movs	r2, #32
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f005 faa7 	bl	8008268 <memset>

  htim1.Instance = TIM1;
 8002d1a:	4b54      	ldr	r3, [pc, #336]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002d1c:	4a54      	ldr	r2, [pc, #336]	; (8002e70 <MX_TIM1_Init+0x194>)
 8002d1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d20:	4b52      	ldr	r3, [pc, #328]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d26:	4b51      	ldr	r3, [pc, #324]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000-1;
 8002d2c:	4b4f      	ldr	r3, [pc, #316]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002d2e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002d32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d34:	4b4d      	ldr	r3, [pc, #308]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d3a:	4b4c      	ldr	r3, [pc, #304]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d40:	4b4a      	ldr	r3, [pc, #296]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d46:	4849      	ldr	r0, [pc, #292]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002d48:	f003 f8ba 	bl	8005ec0 <HAL_TIM_Base_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002d52:	f7ff f9d5 	bl	8002100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d60:	4619      	mov	r1, r3
 8002d62:	4842      	ldr	r0, [pc, #264]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002d64:	f003 fafe 	bl	8006364 <HAL_TIM_ConfigClockSource>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002d6e:	f7ff f9c7 	bl	8002100 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d72:	483e      	ldr	r0, [pc, #248]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002d74:	f003 f8f3 	bl	8005f5e <HAL_TIM_PWM_Init>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002d7e:	f7ff f9bf 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d82:	2300      	movs	r3, #0
 8002d84:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4836      	ldr	r0, [pc, #216]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002d92:	f003 feaf 	bl	8006af4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002d9c:	f7ff f9b0 	bl	8002100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002da0:	2370      	movs	r3, #112	; 0x70
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2-1;
 8002da4:	2301      	movs	r3, #1
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002dac:	2300      	movs	r3, #0
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002db0:	2300      	movs	r3, #0
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002db4:	2300      	movs	r3, #0
 8002db6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002db8:	2300      	movs	r3, #0
 8002dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4829      	ldr	r0, [pc, #164]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002dc6:	f003 fa07 	bl	80061d8 <HAL_TIM_PWM_ConfigChannel>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002dd0:	f7ff f996 	bl	8002100 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8002dd4:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0208 	bic.w	r2, r2, #8
 8002de2:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 2402-1;
 8002de4:	f640 1361 	movw	r3, #2401	; 0x961
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dee:	2204      	movs	r2, #4
 8002df0:	4619      	mov	r1, r3
 8002df2:	481e      	ldr	r0, [pc, #120]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002df4:	f003 f9f0 	bl	80061d8 <HAL_TIM_PWM_ConfigChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002dfe:	f7ff f97f 	bl	8002100 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699a      	ldr	r2, [r3, #24]
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e10:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 1922-1;
 8002e12:	f240 7381 	movw	r3, #1921	; 0x781
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4812      	ldr	r0, [pc, #72]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002e22:	f003 f9d9 	bl	80061d8 <HAL_TIM_PWM_ConfigChannel>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 8002e2c:	f7ff f968 	bl	8002100 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8002e4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	4619      	mov	r1, r3
 8002e54:	4805      	ldr	r0, [pc, #20]	; (8002e6c <MX_TIM1_Init+0x190>)
 8002e56:	f003 fec9 	bl	8006bec <HAL_TIMEx_ConfigBreakDeadTime>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8002e60:	f7ff f94e 	bl	8002100 <Error_Handler>
  }

}
 8002e64:	bf00      	nop
 8002e66:	3758      	adds	r7, #88	; 0x58
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20000704 	.word	0x20000704
 8002e70:	40010000 	.word	0x40010000

08002e74 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08c      	sub	sp, #48	; 0x30
 8002e78:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e7a:	f107 030c 	add.w	r3, r7, #12
 8002e7e:	2224      	movs	r2, #36	; 0x24
 8002e80:	2100      	movs	r1, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f005 f9f0 	bl	8008268 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002e90:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <MX_TIM2_Init+0xa4>)
 8002e92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e98:	4b1f      	ldr	r3, [pc, #124]	; (8002f18 <MX_TIM2_Init+0xa4>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e9e:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <MX_TIM2_Init+0xa4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002ea4:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <MX_TIM2_Init+0xa4>)
 8002ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eaa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eac:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <MX_TIM2_Init+0xa4>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eb2:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <MX_TIM2_Init+0xa4>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002edc:	f107 030c 	add.w	r3, r7, #12
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	480d      	ldr	r0, [pc, #52]	; (8002f18 <MX_TIM2_Init+0xa4>)
 8002ee4:	f003 f8ae 	bl	8006044 <HAL_TIM_Encoder_Init>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002eee:	f7ff f907 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	4619      	mov	r1, r3
 8002efe:	4806      	ldr	r0, [pc, #24]	; (8002f18 <MX_TIM2_Init+0xa4>)
 8002f00:	f003 fdf8 	bl	8006af4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002f0a:	f7ff f8f9 	bl	8002100 <Error_Handler>
  }

}
 8002f0e:	bf00      	nop
 8002f10:	3730      	adds	r7, #48	; 0x30
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000744 	.word	0x20000744

08002f1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08c      	sub	sp, #48	; 0x30
 8002f20:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f22:	f107 030c 	add.w	r3, r7, #12
 8002f26:	2224      	movs	r2, #36	; 0x24
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f005 f99c 	bl	8008268 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f30:	1d3b      	adds	r3, r7, #4
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002f38:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <MX_TIM3_Init+0xa0>)
 8002f3a:	4a21      	ldr	r2, [pc, #132]	; (8002fc0 <MX_TIM3_Init+0xa4>)
 8002f3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f3e:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <MX_TIM3_Init+0xa0>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f44:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <MX_TIM3_Init+0xa0>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002f4a:	4b1c      	ldr	r3, [pc, #112]	; (8002fbc <MX_TIM3_Init+0xa0>)
 8002f4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f52:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <MX_TIM3_Init+0xa0>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f58:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <MX_TIM3_Init+0xa0>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f66:	2301      	movs	r3, #1
 8002f68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f72:	2300      	movs	r3, #0
 8002f74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f76:	2301      	movs	r3, #1
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002f82:	f107 030c 	add.w	r3, r7, #12
 8002f86:	4619      	mov	r1, r3
 8002f88:	480c      	ldr	r0, [pc, #48]	; (8002fbc <MX_TIM3_Init+0xa0>)
 8002f8a:	f003 f85b 	bl	8006044 <HAL_TIM_Encoder_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002f94:	f7ff f8b4 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4805      	ldr	r0, [pc, #20]	; (8002fbc <MX_TIM3_Init+0xa0>)
 8002fa6:	f003 fda5 	bl	8006af4 <HAL_TIMEx_MasterConfigSynchronization>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002fb0:	f7ff f8a6 	bl	8002100 <Error_Handler>
  }

}
 8002fb4:	bf00      	nop
 8002fb6:	3730      	adds	r7, #48	; 0x30
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	200006c4 	.word	0x200006c4
 8002fc0:	40000400 	.word	0x40000400

08002fc4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08e      	sub	sp, #56	; 0x38
 8002fc8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	605a      	str	r2, [r3, #4]
 8002fd4:	609a      	str	r2, [r3, #8]
 8002fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd8:	f107 0320 	add.w	r3, r7, #32
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fe2:	1d3b      	adds	r3, r7, #4
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
 8002ff0:	615a      	str	r2, [r3, #20]
 8002ff2:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002ff4:	4b3d      	ldr	r3, [pc, #244]	; (80030ec <MX_TIM4_Init+0x128>)
 8002ff6:	4a3e      	ldr	r2, [pc, #248]	; (80030f0 <MX_TIM4_Init+0x12c>)
 8002ff8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002ffa:	4b3c      	ldr	r3, [pc, #240]	; (80030ec <MX_TIM4_Init+0x128>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003000:	4b3a      	ldr	r3, [pc, #232]	; (80030ec <MX_TIM4_Init+0x128>)
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 480-1;
 8003006:	4b39      	ldr	r3, [pc, #228]	; (80030ec <MX_TIM4_Init+0x128>)
 8003008:	f240 12df 	movw	r2, #479	; 0x1df
 800300c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800300e:	4b37      	ldr	r3, [pc, #220]	; (80030ec <MX_TIM4_Init+0x128>)
 8003010:	2200      	movs	r2, #0
 8003012:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003014:	4b35      	ldr	r3, [pc, #212]	; (80030ec <MX_TIM4_Init+0x128>)
 8003016:	2200      	movs	r2, #0
 8003018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800301a:	4834      	ldr	r0, [pc, #208]	; (80030ec <MX_TIM4_Init+0x128>)
 800301c:	f002 ff50 	bl	8005ec0 <HAL_TIM_Base_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003026:	f7ff f86b 	bl	8002100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800302a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003030:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003034:	4619      	mov	r1, r3
 8003036:	482d      	ldr	r0, [pc, #180]	; (80030ec <MX_TIM4_Init+0x128>)
 8003038:	f003 f994 	bl	8006364 <HAL_TIM_ConfigClockSource>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003042:	f7ff f85d 	bl	8002100 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003046:	4829      	ldr	r0, [pc, #164]	; (80030ec <MX_TIM4_Init+0x128>)
 8003048:	f002 ff89 	bl	8005f5e <HAL_TIM_PWM_Init>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003052:	f7ff f855 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800305a:	2300      	movs	r3, #0
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800305e:	f107 0320 	add.w	r3, r7, #32
 8003062:	4619      	mov	r1, r3
 8003064:	4821      	ldr	r0, [pc, #132]	; (80030ec <MX_TIM4_Init+0x128>)
 8003066:	f003 fd45 	bl	8006af4 <HAL_TIMEx_MasterConfigSynchronization>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003070:	f7ff f846 	bl	8002100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003074:	2370      	movs	r3, #112	; 0x70
 8003076:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003084:	1d3b      	adds	r3, r7, #4
 8003086:	2200      	movs	r2, #0
 8003088:	4619      	mov	r1, r3
 800308a:	4818      	ldr	r0, [pc, #96]	; (80030ec <MX_TIM4_Init+0x128>)
 800308c:	f003 f8a4 	bl	80061d8 <HAL_TIM_PWM_ConfigChannel>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003096:	f7ff f833 	bl	8002100 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	2204      	movs	r2, #4
 800309e:	4619      	mov	r1, r3
 80030a0:	4812      	ldr	r0, [pc, #72]	; (80030ec <MX_TIM4_Init+0x128>)
 80030a2:	f003 f899 	bl	80061d8 <HAL_TIM_PWM_ConfigChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80030ac:	f7ff f828 	bl	8002100 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030b0:	1d3b      	adds	r3, r7, #4
 80030b2:	2208      	movs	r2, #8
 80030b4:	4619      	mov	r1, r3
 80030b6:	480d      	ldr	r0, [pc, #52]	; (80030ec <MX_TIM4_Init+0x128>)
 80030b8:	f003 f88e 	bl	80061d8 <HAL_TIM_PWM_ConfigChannel>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80030c2:	f7ff f81d 	bl	8002100 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030c6:	1d3b      	adds	r3, r7, #4
 80030c8:	220c      	movs	r2, #12
 80030ca:	4619      	mov	r1, r3
 80030cc:	4807      	ldr	r0, [pc, #28]	; (80030ec <MX_TIM4_Init+0x128>)
 80030ce:	f003 f883 	bl	80061d8 <HAL_TIM_PWM_ConfigChannel>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80030d8:	f7ff f812 	bl	8002100 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80030dc:	4803      	ldr	r0, [pc, #12]	; (80030ec <MX_TIM4_Init+0x128>)
 80030de:	f000 f9a9 	bl	8003434 <HAL_TIM_MspPostInit>

}
 80030e2:	bf00      	nop
 80030e4:	3738      	adds	r7, #56	; 0x38
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200005e4 	.word	0x200005e4
 80030f0:	40000800 	.word	0x40000800

080030f4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030fa:	f107 0308 	add.w	r3, r7, #8
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003108:	463b      	mov	r3, r7
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8003110:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <MX_TIM5_Init+0x94>)
 8003112:	4a1e      	ldr	r2, [pc, #120]	; (800318c <MX_TIM5_Init+0x98>)
 8003114:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 32-1;
 8003116:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <MX_TIM5_Init+0x94>)
 8003118:	221f      	movs	r2, #31
 800311a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800311c:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <MX_TIM5_Init+0x94>)
 800311e:	2200      	movs	r2, #0
 8003120:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 8003122:	4b19      	ldr	r3, [pc, #100]	; (8003188 <MX_TIM5_Init+0x94>)
 8003124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003128:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800312a:	4b17      	ldr	r3, [pc, #92]	; (8003188 <MX_TIM5_Init+0x94>)
 800312c:	2200      	movs	r2, #0
 800312e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003130:	4b15      	ldr	r3, [pc, #84]	; (8003188 <MX_TIM5_Init+0x94>)
 8003132:	2200      	movs	r2, #0
 8003134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003136:	4814      	ldr	r0, [pc, #80]	; (8003188 <MX_TIM5_Init+0x94>)
 8003138:	f002 fec2 	bl	8005ec0 <HAL_TIM_Base_Init>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003142:	f7fe ffdd 	bl	8002100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800314a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800314c:	f107 0308 	add.w	r3, r7, #8
 8003150:	4619      	mov	r1, r3
 8003152:	480d      	ldr	r0, [pc, #52]	; (8003188 <MX_TIM5_Init+0x94>)
 8003154:	f003 f906 	bl	8006364 <HAL_TIM_ConfigClockSource>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800315e:	f7fe ffcf 	bl	8002100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003162:	2300      	movs	r3, #0
 8003164:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003166:	2300      	movs	r3, #0
 8003168:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800316a:	463b      	mov	r3, r7
 800316c:	4619      	mov	r1, r3
 800316e:	4806      	ldr	r0, [pc, #24]	; (8003188 <MX_TIM5_Init+0x94>)
 8003170:	f003 fcc0 	bl	8006af4 <HAL_TIMEx_MasterConfigSynchronization>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800317a:	f7fe ffc1 	bl	8002100 <Error_Handler>
  }

}
 800317e:	bf00      	nop
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000684 	.word	0x20000684
 800318c:	40000c00 	.word	0x40000c00

08003190 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a50      	ldr	r2, [pc, #320]	; (80032e0 <HAL_TIM_Base_MspInit+0x150>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d172      	bne.n	8003288 <HAL_TIM_Base_MspInit+0xf8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	4b4f      	ldr	r3, [pc, #316]	; (80032e4 <HAL_TIM_Base_MspInit+0x154>)
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	4a4e      	ldr	r2, [pc, #312]	; (80032e4 <HAL_TIM_Base_MspInit+0x154>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6453      	str	r3, [r2, #68]	; 0x44
 80031b2:	4b4c      	ldr	r3, [pc, #304]	; (80032e4 <HAL_TIM_Base_MspInit+0x154>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	697b      	ldr	r3, [r7, #20]
  
    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80031be:	4b4a      	ldr	r3, [pc, #296]	; (80032e8 <HAL_TIM_Base_MspInit+0x158>)
 80031c0:	4a4a      	ldr	r2, [pc, #296]	; (80032ec <HAL_TIM_Base_MspInit+0x15c>)
 80031c2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80031c4:	4b48      	ldr	r3, [pc, #288]	; (80032e8 <HAL_TIM_Base_MspInit+0x158>)
 80031c6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80031ca:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031cc:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_TIM_Base_MspInit+0x158>)
 80031ce:	2240      	movs	r2, #64	; 0x40
 80031d0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031d2:	4b45      	ldr	r3, [pc, #276]	; (80032e8 <HAL_TIM_Base_MspInit+0x158>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80031d8:	4b43      	ldr	r3, [pc, #268]	; (80032e8 <HAL_TIM_Base_MspInit+0x158>)
 80031da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031de:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031e0:	4b41      	ldr	r3, [pc, #260]	; (80032e8 <HAL_TIM_Base_MspInit+0x158>)
 80031e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031e6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031e8:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <HAL_TIM_Base_MspInit+0x158>)
 80031ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031ee:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80031f0:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <HAL_TIM_Base_MspInit+0x158>)
 80031f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031f6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031f8:	4b3b      	ldr	r3, [pc, #236]	; (80032e8 <HAL_TIM_Base_MspInit+0x158>)
 80031fa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80031fe:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003200:	4b39      	ldr	r3, [pc, #228]	; (80032e8 <HAL_TIM_Base_MspInit+0x158>)
 8003202:	2200      	movs	r2, #0
 8003204:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003206:	4838      	ldr	r0, [pc, #224]	; (80032e8 <HAL_TIM_Base_MspInit+0x158>)
 8003208:	f000 ffda 	bl	80041c0 <HAL_DMA_Init>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8003212:	f7fe ff75 	bl	8002100 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a33      	ldr	r2, [pc, #204]	; (80032e8 <HAL_TIM_Base_MspInit+0x158>)
 800321a:	625a      	str	r2, [r3, #36]	; 0x24
 800321c:	4a32      	ldr	r2, [pc, #200]	; (80032e8 <HAL_TIM_Base_MspInit+0x158>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8003222:	4b33      	ldr	r3, [pc, #204]	; (80032f0 <HAL_TIM_Base_MspInit+0x160>)
 8003224:	4a33      	ldr	r2, [pc, #204]	; (80032f4 <HAL_TIM_Base_MspInit+0x164>)
 8003226:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8003228:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <HAL_TIM_Base_MspInit+0x160>)
 800322a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800322e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003230:	4b2f      	ldr	r3, [pc, #188]	; (80032f0 <HAL_TIM_Base_MspInit+0x160>)
 8003232:	2240      	movs	r2, #64	; 0x40
 8003234:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003236:	4b2e      	ldr	r3, [pc, #184]	; (80032f0 <HAL_TIM_Base_MspInit+0x160>)
 8003238:	2200      	movs	r2, #0
 800323a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800323c:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <HAL_TIM_Base_MspInit+0x160>)
 800323e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003242:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003244:	4b2a      	ldr	r3, [pc, #168]	; (80032f0 <HAL_TIM_Base_MspInit+0x160>)
 8003246:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800324a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800324c:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <HAL_TIM_Base_MspInit+0x160>)
 800324e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003252:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8003254:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <HAL_TIM_Base_MspInit+0x160>)
 8003256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800325a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800325c:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <HAL_TIM_Base_MspInit+0x160>)
 800325e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003262:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003264:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <HAL_TIM_Base_MspInit+0x160>)
 8003266:	2200      	movs	r2, #0
 8003268:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800326a:	4821      	ldr	r0, [pc, #132]	; (80032f0 <HAL_TIM_Base_MspInit+0x160>)
 800326c:	f000 ffa8 	bl	80041c0 <HAL_DMA_Init>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_TIM_Base_MspInit+0xea>
    {
      Error_Handler();
 8003276:	f7fe ff43 	bl	8002100 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_TIM_Base_MspInit+0x160>)
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
 8003280:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <HAL_TIM_Base_MspInit+0x160>)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003286:	e026      	b.n	80032d6 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM4)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1a      	ldr	r2, [pc, #104]	; (80032f8 <HAL_TIM_Base_MspInit+0x168>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d10e      	bne.n	80032b0 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <HAL_TIM_Base_MspInit+0x154>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <HAL_TIM_Base_MspInit+0x154>)
 800329c:	f043 0304 	orr.w	r3, r3, #4
 80032a0:	6413      	str	r3, [r2, #64]	; 0x40
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <HAL_TIM_Base_MspInit+0x154>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	693b      	ldr	r3, [r7, #16]
}
 80032ae:	e012      	b.n	80032d6 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM5)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a11      	ldr	r2, [pc, #68]	; (80032fc <HAL_TIM_Base_MspInit+0x16c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10d      	bne.n	80032d6 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_TIM_Base_MspInit+0x154>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a08      	ldr	r2, [pc, #32]	; (80032e4 <HAL_TIM_Base_MspInit+0x154>)
 80032c4:	f043 0308 	orr.w	r3, r3, #8
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_TIM_Base_MspInit+0x154>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
}
 80032d6:	bf00      	nop
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40010000 	.word	0x40010000
 80032e4:	40023800 	.word	0x40023800
 80032e8:	20000584 	.word	0x20000584
 80032ec:	40026428 	.word	0x40026428
 80032f0:	20000624 	.word	0x20000624
 80032f4:	40026440 	.word	0x40026440
 80032f8:	40000800 	.word	0x40000800
 80032fc:	40000c00 	.word	0x40000c00

08003300 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08c      	sub	sp, #48	; 0x30
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	f107 031c 	add.w	r3, r7, #28
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003320:	d14b      	bne.n	80033ba <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	4b3f      	ldr	r3, [pc, #252]	; (8003424 <HAL_TIM_Encoder_MspInit+0x124>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	4a3e      	ldr	r2, [pc, #248]	; (8003424 <HAL_TIM_Encoder_MspInit+0x124>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6413      	str	r3, [r2, #64]	; 0x40
 8003332:	4b3c      	ldr	r3, [pc, #240]	; (8003424 <HAL_TIM_Encoder_MspInit+0x124>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	61bb      	str	r3, [r7, #24]
 800333c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	4b38      	ldr	r3, [pc, #224]	; (8003424 <HAL_TIM_Encoder_MspInit+0x124>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a37      	ldr	r2, [pc, #220]	; (8003424 <HAL_TIM_Encoder_MspInit+0x124>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b35      	ldr	r3, [pc, #212]	; (8003424 <HAL_TIM_Encoder_MspInit+0x124>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_TIM_Encoder_MspInit+0x124>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a30      	ldr	r2, [pc, #192]	; (8003424 <HAL_TIM_Encoder_MspInit+0x124>)
 8003364:	f043 0302 	orr.w	r3, r3, #2
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	4b2e      	ldr	r3, [pc, #184]	; (8003424 <HAL_TIM_Encoder_MspInit+0x124>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337c:	2302      	movs	r3, #2
 800337e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003384:	2300      	movs	r3, #0
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003388:	2301      	movs	r3, #1
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338c:	f107 031c 	add.w	r3, r7, #28
 8003390:	4619      	mov	r1, r3
 8003392:	4825      	ldr	r0, [pc, #148]	; (8003428 <HAL_TIM_Encoder_MspInit+0x128>)
 8003394:	f001 fb14 	bl	80049c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003398:	2308      	movs	r3, #8
 800339a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339c:	2302      	movs	r3, #2
 800339e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a4:	2300      	movs	r3, #0
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033a8:	2301      	movs	r3, #1
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ac:	f107 031c 	add.w	r3, r7, #28
 80033b0:	4619      	mov	r1, r3
 80033b2:	481e      	ldr	r0, [pc, #120]	; (800342c <HAL_TIM_Encoder_MspInit+0x12c>)
 80033b4:	f001 fb04 	bl	80049c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80033b8:	e030      	b.n	800341c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM3)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <HAL_TIM_Encoder_MspInit+0x130>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d12b      	bne.n	800341c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	4b16      	ldr	r3, [pc, #88]	; (8003424 <HAL_TIM_Encoder_MspInit+0x124>)
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	4a15      	ldr	r2, [pc, #84]	; (8003424 <HAL_TIM_Encoder_MspInit+0x124>)
 80033ce:	f043 0302 	orr.w	r3, r3, #2
 80033d2:	6413      	str	r3, [r2, #64]	; 0x40
 80033d4:	4b13      	ldr	r3, [pc, #76]	; (8003424 <HAL_TIM_Encoder_MspInit+0x124>)
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e0:	2300      	movs	r3, #0
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <HAL_TIM_Encoder_MspInit+0x124>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	4a0e      	ldr	r2, [pc, #56]	; (8003424 <HAL_TIM_Encoder_MspInit+0x124>)
 80033ea:	f043 0302 	orr.w	r3, r3, #2
 80033ee:	6313      	str	r3, [r2, #48]	; 0x30
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <HAL_TIM_Encoder_MspInit+0x124>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80033fc:	2330      	movs	r3, #48	; 0x30
 80033fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003400:	2302      	movs	r3, #2
 8003402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003408:	2300      	movs	r3, #0
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800340c:	2302      	movs	r3, #2
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003410:	f107 031c 	add.w	r3, r7, #28
 8003414:	4619      	mov	r1, r3
 8003416:	4805      	ldr	r0, [pc, #20]	; (800342c <HAL_TIM_Encoder_MspInit+0x12c>)
 8003418:	f001 fad2 	bl	80049c0 <HAL_GPIO_Init>
}
 800341c:	bf00      	nop
 800341e:	3730      	adds	r7, #48	; 0x30
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40023800 	.word	0x40023800
 8003428:	40020000 	.word	0x40020000
 800342c:	40020400 	.word	0x40020400
 8003430:	40000400 	.word	0x40000400

08003434 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343c:	f107 030c 	add.w	r3, r7, #12
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a12      	ldr	r2, [pc, #72]	; (800349c <HAL_TIM_MspPostInit+0x68>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d11e      	bne.n	8003494 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <HAL_TIM_MspPostInit+0x6c>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	4a10      	ldr	r2, [pc, #64]	; (80034a0 <HAL_TIM_MspPostInit+0x6c>)
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	6313      	str	r3, [r2, #48]	; 0x30
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <HAL_TIM_MspPostInit+0x6c>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin|MOTOR_RR_Pin|MOTOR_LF_Pin|MOTOR_LR_Pin;
 8003472:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003476:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003478:	2302      	movs	r3, #2
 800347a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003480:	2302      	movs	r3, #2
 8003482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003484:	2302      	movs	r3, #2
 8003486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003488:	f107 030c 	add.w	r3, r7, #12
 800348c:	4619      	mov	r1, r3
 800348e:	4805      	ldr	r0, [pc, #20]	; (80034a4 <HAL_TIM_MspPostInit+0x70>)
 8003490:	f001 fa96 	bl	80049c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003494:	bf00      	nop
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40000800 	.word	0x40000800
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40020400 	.word	0x40020400

080034a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034ae:	4a12      	ldr	r2, [pc, #72]	; (80034f8 <MX_USART1_UART_Init+0x50>)
 80034b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80034b2:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034b4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80034b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034bc:	2200      	movs	r2, #0
 80034be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034c6:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034cc:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034ce:	220c      	movs	r2, #12
 80034d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034d2:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034da:	2200      	movs	r2, #0
 80034dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034de:	4805      	ldr	r0, [pc, #20]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034e0:	f003 fbd6 	bl	8006c90 <HAL_UART_Init>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80034ea:	f7fe fe09 	bl	8002100 <Error_Handler>
  }

}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000844 	.word	0x20000844
 80034f8:	40011000 	.word	0x40011000

080034fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	; 0x28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a4c      	ldr	r2, [pc, #304]	; (800364c <HAL_UART_MspInit+0x150>)
 800351a:	4293      	cmp	r3, r2
 800351c:	f040 8092 	bne.w	8003644 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	4b4a      	ldr	r3, [pc, #296]	; (8003650 <HAL_UART_MspInit+0x154>)
 8003526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003528:	4a49      	ldr	r2, [pc, #292]	; (8003650 <HAL_UART_MspInit+0x154>)
 800352a:	f043 0310 	orr.w	r3, r3, #16
 800352e:	6453      	str	r3, [r2, #68]	; 0x44
 8003530:	4b47      	ldr	r3, [pc, #284]	; (8003650 <HAL_UART_MspInit+0x154>)
 8003532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	4b43      	ldr	r3, [pc, #268]	; (8003650 <HAL_UART_MspInit+0x154>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	4a42      	ldr	r2, [pc, #264]	; (8003650 <HAL_UART_MspInit+0x154>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6313      	str	r3, [r2, #48]	; 0x30
 800354c:	4b40      	ldr	r3, [pc, #256]	; (8003650 <HAL_UART_MspInit+0x154>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003558:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800355c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355e:	2302      	movs	r3, #2
 8003560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003566:	2303      	movs	r3, #3
 8003568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800356a:	2307      	movs	r3, #7
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356e:	f107 0314 	add.w	r3, r7, #20
 8003572:	4619      	mov	r1, r3
 8003574:	4837      	ldr	r0, [pc, #220]	; (8003654 <HAL_UART_MspInit+0x158>)
 8003576:	f001 fa23 	bl	80049c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800357a:	4b37      	ldr	r3, [pc, #220]	; (8003658 <HAL_UART_MspInit+0x15c>)
 800357c:	4a37      	ldr	r2, [pc, #220]	; (800365c <HAL_UART_MspInit+0x160>)
 800357e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003580:	4b35      	ldr	r3, [pc, #212]	; (8003658 <HAL_UART_MspInit+0x15c>)
 8003582:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003586:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003588:	4b33      	ldr	r3, [pc, #204]	; (8003658 <HAL_UART_MspInit+0x15c>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800358e:	4b32      	ldr	r3, [pc, #200]	; (8003658 <HAL_UART_MspInit+0x15c>)
 8003590:	2200      	movs	r2, #0
 8003592:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003594:	4b30      	ldr	r3, [pc, #192]	; (8003658 <HAL_UART_MspInit+0x15c>)
 8003596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800359a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800359c:	4b2e      	ldr	r3, [pc, #184]	; (8003658 <HAL_UART_MspInit+0x15c>)
 800359e:	2200      	movs	r2, #0
 80035a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035a2:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <HAL_UART_MspInit+0x15c>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80035a8:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <HAL_UART_MspInit+0x15c>)
 80035aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ae:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035b0:	4b29      	ldr	r3, [pc, #164]	; (8003658 <HAL_UART_MspInit+0x15c>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035b6:	4b28      	ldr	r3, [pc, #160]	; (8003658 <HAL_UART_MspInit+0x15c>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80035bc:	4826      	ldr	r0, [pc, #152]	; (8003658 <HAL_UART_MspInit+0x15c>)
 80035be:	f000 fdff 	bl	80041c0 <HAL_DMA_Init>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80035c8:	f7fe fd9a 	bl	8002100 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a22      	ldr	r2, [pc, #136]	; (8003658 <HAL_UART_MspInit+0x15c>)
 80035d0:	635a      	str	r2, [r3, #52]	; 0x34
 80035d2:	4a21      	ldr	r2, [pc, #132]	; (8003658 <HAL_UART_MspInit+0x15c>)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80035d8:	4b21      	ldr	r3, [pc, #132]	; (8003660 <HAL_UART_MspInit+0x164>)
 80035da:	4a22      	ldr	r2, [pc, #136]	; (8003664 <HAL_UART_MspInit+0x168>)
 80035dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80035de:	4b20      	ldr	r3, [pc, #128]	; (8003660 <HAL_UART_MspInit+0x164>)
 80035e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035e6:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <HAL_UART_MspInit+0x164>)
 80035e8:	2240      	movs	r2, #64	; 0x40
 80035ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ec:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <HAL_UART_MspInit+0x164>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035f2:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <HAL_UART_MspInit+0x164>)
 80035f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035fa:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_UART_MspInit+0x164>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003600:	4b17      	ldr	r3, [pc, #92]	; (8003660 <HAL_UART_MspInit+0x164>)
 8003602:	2200      	movs	r2, #0
 8003604:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003606:	4b16      	ldr	r3, [pc, #88]	; (8003660 <HAL_UART_MspInit+0x164>)
 8003608:	2200      	movs	r2, #0
 800360a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800360c:	4b14      	ldr	r3, [pc, #80]	; (8003660 <HAL_UART_MspInit+0x164>)
 800360e:	2200      	movs	r2, #0
 8003610:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003612:	4b13      	ldr	r3, [pc, #76]	; (8003660 <HAL_UART_MspInit+0x164>)
 8003614:	2200      	movs	r2, #0
 8003616:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003618:	4811      	ldr	r0, [pc, #68]	; (8003660 <HAL_UART_MspInit+0x164>)
 800361a:	f000 fdd1 	bl	80041c0 <HAL_DMA_Init>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8003624:	f7fe fd6c 	bl	8002100 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a0d      	ldr	r2, [pc, #52]	; (8003660 <HAL_UART_MspInit+0x164>)
 800362c:	631a      	str	r2, [r3, #48]	; 0x30
 800362e:	4a0c      	ldr	r2, [pc, #48]	; (8003660 <HAL_UART_MspInit+0x164>)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003634:	2200      	movs	r2, #0
 8003636:	2102      	movs	r1, #2
 8003638:	2025      	movs	r0, #37	; 0x25
 800363a:	f000 fd8a 	bl	8004152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800363e:	2025      	movs	r0, #37	; 0x25
 8003640:	f000 fda3 	bl	800418a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003644:	bf00      	nop
 8003646:	3728      	adds	r7, #40	; 0x28
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40011000 	.word	0x40011000
 8003650:	40023800 	.word	0x40023800
 8003654:	40020000 	.word	0x40020000
 8003658:	200007e4 	.word	0x200007e4
 800365c:	40026488 	.word	0x40026488
 8003660:	20000784 	.word	0x20000784
 8003664:	400264b8 	.word	0x400264b8

08003668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003668:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800366c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800366e:	e003      	b.n	8003678 <LoopCopyDataInit>

08003670 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003672:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003674:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003676:	3104      	adds	r1, #4

08003678 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003678:	480b      	ldr	r0, [pc, #44]	; (80036a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800367a:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800367c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800367e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003680:	d3f6      	bcc.n	8003670 <CopyDataInit>
  ldr  r2, =_sbss
 8003682:	4a0b      	ldr	r2, [pc, #44]	; (80036b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003684:	e002      	b.n	800368c <LoopFillZerobss>

08003686 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003686:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003688:	f842 3b04 	str.w	r3, [r2], #4

0800368c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800368e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003690:	d3f9      	bcc.n	8003686 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003692:	f7ff fb0d 	bl	8002cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003696:	f004 fdc3 	bl	8008220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800369a:	f7fe fc91 	bl	8001fc0 <main>
  bx  lr    
 800369e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80036a0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80036a4:	0800c930 	.word	0x0800c930
  ldr  r0, =_sdata
 80036a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80036ac:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 80036b0:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 80036b4:	2000088c 	.word	0x2000088c

080036b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036b8:	e7fe      	b.n	80036b8 <ADC_IRQHandler>
	...

080036bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036c0:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <HAL_Init+0x40>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a0d      	ldr	r2, [pc, #52]	; (80036fc <HAL_Init+0x40>)
 80036c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_Init+0x40>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a0a      	ldr	r2, [pc, #40]	; (80036fc <HAL_Init+0x40>)
 80036d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <HAL_Init+0x40>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a07      	ldr	r2, [pc, #28]	; (80036fc <HAL_Init+0x40>)
 80036de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036e4:	2003      	movs	r0, #3
 80036e6:	f000 fd29 	bl	800413c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ea:	2000      	movs	r0, #0
 80036ec:	f000 f808 	bl	8003700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036f0:	f7ff f996 	bl	8002a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40023c00 	.word	0x40023c00

08003700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003708:	4b12      	ldr	r3, [pc, #72]	; (8003754 <HAL_InitTick+0x54>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_InitTick+0x58>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	4619      	mov	r1, r3
 8003712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003716:	fbb3 f3f1 	udiv	r3, r3, r1
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fd41 	bl	80041a6 <HAL_SYSTICK_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e00e      	b.n	800374c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b0f      	cmp	r3, #15
 8003732:	d80a      	bhi.n	800374a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003734:	2200      	movs	r2, #0
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	f000 fd09 	bl	8004152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003740:	4a06      	ldr	r2, [pc, #24]	; (800375c <HAL_InitTick+0x5c>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000034 	.word	0x20000034
 8003758:	2000003c 	.word	0x2000003c
 800375c:	20000038 	.word	0x20000038

08003760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003764:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_IncTick+0x20>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_IncTick+0x24>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4413      	add	r3, r2
 8003770:	4a04      	ldr	r2, [pc, #16]	; (8003784 <HAL_IncTick+0x24>)
 8003772:	6013      	str	r3, [r2, #0]
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	2000003c 	.word	0x2000003c
 8003784:	20000884 	.word	0x20000884

08003788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  return uwTick;
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <HAL_GetTick+0x14>)
 800378e:	681b      	ldr	r3, [r3, #0]
}
 8003790:	4618      	mov	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20000884 	.word	0x20000884

080037a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037a8:	f7ff ffee 	bl	8003788 <HAL_GetTick>
 80037ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b8:	d005      	beq.n	80037c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ba:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_Delay+0x40>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037c6:	bf00      	nop
 80037c8:	f7ff ffde 	bl	8003788 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d8f7      	bhi.n	80037c8 <HAL_Delay+0x28>
  {
  }
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	2000003c 	.word	0x2000003c

080037e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e033      	b.n	8003862 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd fdda 	bl	80013bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	d118      	bne.n	8003854 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800382a:	f023 0302 	bic.w	r3, r3, #2
 800382e:	f043 0202 	orr.w	r2, r3, #2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fa32 	bl	8003ca0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f023 0303 	bic.w	r3, r3, #3
 800384a:	f043 0201 	orr.w	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
 8003852:	e001      	b.n	8003858 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003860:	7bfb      	ldrb	r3, [r7, #15]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_ADC_Start_DMA+0x1e>
 8003886:	2302      	movs	r3, #2
 8003888:	e0b1      	b.n	80039ee <HAL_ADC_Start_DMA+0x182>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b01      	cmp	r3, #1
 800389e:	d018      	beq.n	80038d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038b0:	4b51      	ldr	r3, [pc, #324]	; (80039f8 <HAL_ADC_Start_DMA+0x18c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a51      	ldr	r2, [pc, #324]	; (80039fc <HAL_ADC_Start_DMA+0x190>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	0c9a      	lsrs	r2, r3, #18
 80038bc:	4613      	mov	r3, r2
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	4413      	add	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80038c4:	e002      	b.n	80038cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f9      	bne.n	80038c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b01      	cmp	r3, #1
 80038de:	f040 8085 	bne.w	80039ec <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003900:	2b00      	cmp	r3, #0
 8003902:	d007      	beq.n	8003914 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800390c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800391c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003920:	d106      	bne.n	8003930 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f023 0206 	bic.w	r2, r3, #6
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	645a      	str	r2, [r3, #68]	; 0x44
 800392e:	e002      	b.n	8003936 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800393e:	4b30      	ldr	r3, [pc, #192]	; (8003a00 <HAL_ADC_Start_DMA+0x194>)
 8003940:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	4a2f      	ldr	r2, [pc, #188]	; (8003a04 <HAL_ADC_Start_DMA+0x198>)
 8003948:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	4a2e      	ldr	r2, [pc, #184]	; (8003a08 <HAL_ADC_Start_DMA+0x19c>)
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	4a2d      	ldr	r2, [pc, #180]	; (8003a0c <HAL_ADC_Start_DMA+0x1a0>)
 8003958:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003962:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003972:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003982:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	334c      	adds	r3, #76	; 0x4c
 800398e:	4619      	mov	r1, r3
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f000 fcc2 	bl	800431c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10f      	bne.n	80039c4 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d11c      	bne.n	80039ec <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	e013      	b.n	80039ec <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <HAL_ADC_Start_DMA+0x1a4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d10e      	bne.n	80039ec <HAL_ADC_Start_DMA+0x180>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d107      	bne.n	80039ec <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039ea:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000034 	.word	0x20000034
 80039fc:	431bde83 	.word	0x431bde83
 8003a00:	40012300 	.word	0x40012300
 8003a04:	08003e99 	.word	0x08003e99
 8003a08:	08003f53 	.word	0x08003f53
 8003a0c:	08003f6f 	.word	0x08003f6f
 8003a10:	40012000 	.word	0x40012000

08003a14 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x1c>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e113      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x244>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b09      	cmp	r3, #9
 8003a66:	d925      	bls.n	8003ab4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68d9      	ldr	r1, [r3, #12]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3b1e      	subs	r3, #30
 8003a7e:	2207      	movs	r2, #7
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43da      	mvns	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68d9      	ldr	r1, [r3, #12]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4403      	add	r3, r0
 8003aa6:	3b1e      	subs	r3, #30
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	60da      	str	r2, [r3, #12]
 8003ab2:	e022      	b.n	8003afa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6919      	ldr	r1, [r3, #16]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	4413      	add	r3, r2
 8003ac8:	2207      	movs	r2, #7
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	400a      	ands	r2, r1
 8003ad6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6919      	ldr	r1, [r3, #16]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	4618      	mov	r0, r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4403      	add	r3, r0
 8003af0:	409a      	lsls	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b06      	cmp	r3, #6
 8003b00:	d824      	bhi.n	8003b4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	3b05      	subs	r3, #5
 8003b14:	221f      	movs	r2, #31
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	400a      	ands	r2, r1
 8003b22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	4618      	mov	r0, r3
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3b05      	subs	r3, #5
 8003b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	635a      	str	r2, [r3, #52]	; 0x34
 8003b4a:	e04c      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b0c      	cmp	r3, #12
 8003b52:	d824      	bhi.n	8003b9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	3b23      	subs	r3, #35	; 0x23
 8003b66:	221f      	movs	r2, #31
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43da      	mvns	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	400a      	ands	r2, r1
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	4618      	mov	r0, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3b23      	subs	r3, #35	; 0x23
 8003b90:	fa00 f203 	lsl.w	r2, r0, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8003b9c:	e023      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	3b41      	subs	r3, #65	; 0x41
 8003bb0:	221f      	movs	r2, #31
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43da      	mvns	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	400a      	ands	r2, r1
 8003bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	4618      	mov	r0, r3
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3b41      	subs	r3, #65	; 0x41
 8003bda:	fa00 f203 	lsl.w	r2, r0, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003be6:	4b29      	ldr	r3, [pc, #164]	; (8003c8c <HAL_ADC_ConfigChannel+0x250>)
 8003be8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a28      	ldr	r2, [pc, #160]	; (8003c90 <HAL_ADC_ConfigChannel+0x254>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d10f      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x1d8>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b12      	cmp	r3, #18
 8003bfa:	d10b      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1d      	ldr	r2, [pc, #116]	; (8003c90 <HAL_ADC_ConfigChannel+0x254>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d12b      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x23a>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1c      	ldr	r2, [pc, #112]	; (8003c94 <HAL_ADC_ConfigChannel+0x258>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <HAL_ADC_ConfigChannel+0x1f4>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b11      	cmp	r3, #17
 8003c2e:	d122      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a11      	ldr	r2, [pc, #68]	; (8003c94 <HAL_ADC_ConfigChannel+0x258>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d111      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <HAL_ADC_ConfigChannel+0x25c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a11      	ldr	r2, [pc, #68]	; (8003c9c <HAL_ADC_ConfigChannel+0x260>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	0c9a      	lsrs	r2, r3, #18
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c68:	e002      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f9      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40012300 	.word	0x40012300
 8003c90:	40012000 	.word	0x40012000
 8003c94:	10000012 	.word	0x10000012
 8003c98:	20000034 	.word	0x20000034
 8003c9c:	431bde83 	.word	0x431bde83

08003ca0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ca8:	4b79      	ldr	r3, [pc, #484]	; (8003e90 <ADC_Init+0x1f0>)
 8003caa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	021a      	lsls	r2, r3, #8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6899      	ldr	r1, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	4a58      	ldr	r2, [pc, #352]	; (8003e94 <ADC_Init+0x1f4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d022      	beq.n	8003d7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6899      	ldr	r1, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6899      	ldr	r1, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	609a      	str	r2, [r3, #8]
 8003d7c:	e00f      	b.n	8003d9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0202 	bic.w	r2, r2, #2
 8003dac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6899      	ldr	r1, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	7e1b      	ldrb	r3, [r3, #24]
 8003db8:	005a      	lsls	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01b      	beq.n	8003e04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003dea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6859      	ldr	r1, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	3b01      	subs	r3, #1
 8003df8:	035a      	lsls	r2, r3, #13
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	e007      	b.n	8003e14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	051a      	lsls	r2, r3, #20
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6899      	ldr	r1, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e56:	025a      	lsls	r2, r3, #9
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6899      	ldr	r1, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	029a      	lsls	r2, r3, #10
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	609a      	str	r2, [r3, #8]
}
 8003e84:	bf00      	nop
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	40012300 	.word	0x40012300
 8003e94:	0f000001 	.word	0x0f000001

08003e98 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d13c      	bne.n	8003f2c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d12b      	bne.n	8003f24 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d127      	bne.n	8003f24 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d006      	beq.n	8003ef0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d119      	bne.n	8003f24 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0220 	bic.w	r2, r2, #32
 8003efe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	f043 0201 	orr.w	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7fd ff67 	bl	8001df8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f2a:	e00e      	b.n	8003f4a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff fd75 	bl	8003a28 <HAL_ADC_ErrorCallback>
}
 8003f3e:	e004      	b.n	8003f4a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	4798      	blx	r3
}
 8003f4a:	bf00      	nop
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f7ff fd57 	bl	8003a14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2240      	movs	r2, #64	; 0x40
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f7ff fd4a 	bl	8003a28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f94:	bf00      	nop
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fac:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fb8:	4013      	ands	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fce:	4a04      	ldr	r2, [pc, #16]	; (8003fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	60d3      	str	r3, [r2, #12]
}
 8003fd4:	bf00      	nop
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	e000ed00 	.word	0xe000ed00

08003fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fe8:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <__NVIC_GetPriorityGrouping+0x18>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	0a1b      	lsrs	r3, r3, #8
 8003fee:	f003 0307 	and.w	r3, r3, #7
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800400a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400e:	2b00      	cmp	r3, #0
 8004010:	db0b      	blt.n	800402a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	f003 021f 	and.w	r2, r3, #31
 8004018:	4907      	ldr	r1, [pc, #28]	; (8004038 <__NVIC_EnableIRQ+0x38>)
 800401a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	2001      	movs	r0, #1
 8004022:	fa00 f202 	lsl.w	r2, r0, r2
 8004026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	e000e100 	.word	0xe000e100

0800403c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	6039      	str	r1, [r7, #0]
 8004046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404c:	2b00      	cmp	r3, #0
 800404e:	db0a      	blt.n	8004066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	b2da      	uxtb	r2, r3
 8004054:	490c      	ldr	r1, [pc, #48]	; (8004088 <__NVIC_SetPriority+0x4c>)
 8004056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405a:	0112      	lsls	r2, r2, #4
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	440b      	add	r3, r1
 8004060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004064:	e00a      	b.n	800407c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	4908      	ldr	r1, [pc, #32]	; (800408c <__NVIC_SetPriority+0x50>)
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	3b04      	subs	r3, #4
 8004074:	0112      	lsls	r2, r2, #4
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	440b      	add	r3, r1
 800407a:	761a      	strb	r2, [r3, #24]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	e000e100 	.word	0xe000e100
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004090:	b480      	push	{r7}
 8004092:	b089      	sub	sp, #36	; 0x24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f1c3 0307 	rsb	r3, r3, #7
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	bf28      	it	cs
 80040ae:	2304      	movcs	r3, #4
 80040b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3304      	adds	r3, #4
 80040b6:	2b06      	cmp	r3, #6
 80040b8:	d902      	bls.n	80040c0 <NVIC_EncodePriority+0x30>
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	3b03      	subs	r3, #3
 80040be:	e000      	b.n	80040c2 <NVIC_EncodePriority+0x32>
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c4:	f04f 32ff 	mov.w	r2, #4294967295
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43da      	mvns	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	401a      	ands	r2, r3
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040d8:	f04f 31ff 	mov.w	r1, #4294967295
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	fa01 f303 	lsl.w	r3, r1, r3
 80040e2:	43d9      	mvns	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e8:	4313      	orrs	r3, r2
         );
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3724      	adds	r7, #36	; 0x24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
	...

080040f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3b01      	subs	r3, #1
 8004104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004108:	d301      	bcc.n	800410e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800410a:	2301      	movs	r3, #1
 800410c:	e00f      	b.n	800412e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800410e:	4a0a      	ldr	r2, [pc, #40]	; (8004138 <SysTick_Config+0x40>)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3b01      	subs	r3, #1
 8004114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004116:	210f      	movs	r1, #15
 8004118:	f04f 30ff 	mov.w	r0, #4294967295
 800411c:	f7ff ff8e 	bl	800403c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <SysTick_Config+0x40>)
 8004122:	2200      	movs	r2, #0
 8004124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004126:	4b04      	ldr	r3, [pc, #16]	; (8004138 <SysTick_Config+0x40>)
 8004128:	2207      	movs	r2, #7
 800412a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	e000e010 	.word	0xe000e010

0800413c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff ff29 	bl	8003f9c <__NVIC_SetPriorityGrouping>
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004152:	b580      	push	{r7, lr}
 8004154:	b086      	sub	sp, #24
 8004156:	af00      	add	r7, sp, #0
 8004158:	4603      	mov	r3, r0
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	607a      	str	r2, [r7, #4]
 800415e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004164:	f7ff ff3e 	bl	8003fe4 <__NVIC_GetPriorityGrouping>
 8004168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	6978      	ldr	r0, [r7, #20]
 8004170:	f7ff ff8e 	bl	8004090 <NVIC_EncodePriority>
 8004174:	4602      	mov	r2, r0
 8004176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417a:	4611      	mov	r1, r2
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff ff5d 	bl	800403c <__NVIC_SetPriority>
}
 8004182:	bf00      	nop
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	4603      	mov	r3, r0
 8004192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff ff31 	bl	8004000 <__NVIC_EnableIRQ>
}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff ffa2 	bl	80040f8 <SysTick_Config>
 80041b4:	4603      	mov	r3, r0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041cc:	f7ff fadc 	bl	8003788 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e099      	b.n	8004310 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0201 	bic.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041fc:	e00f      	b.n	800421e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041fe:	f7ff fac3 	bl	8003788 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b05      	cmp	r3, #5
 800420a:	d908      	bls.n	800421e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2203      	movs	r2, #3
 8004216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e078      	b.n	8004310 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e8      	bne.n	80041fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4b38      	ldr	r3, [pc, #224]	; (8004318 <HAL_DMA_Init+0x158>)
 8004238:	4013      	ands	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800424a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	2b04      	cmp	r3, #4
 8004276:	d107      	bne.n	8004288 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004280:	4313      	orrs	r3, r2
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f023 0307 	bic.w	r3, r3, #7
 800429e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d117      	bne.n	80042e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00e      	beq.n	80042e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fb01 	bl	80048cc <DMA_CheckFifoParam>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2240      	movs	r2, #64	; 0x40
 80042d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80042de:	2301      	movs	r3, #1
 80042e0:	e016      	b.n	8004310 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fab8 	bl	8004860 <DMA_CalcBaseAndBitshift>
 80042f0:	4603      	mov	r3, r0
 80042f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f8:	223f      	movs	r2, #63	; 0x3f
 80042fa:	409a      	lsls	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	e010803f 	.word	0xe010803f

0800431c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004332:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_DMA_Start_IT+0x26>
 800433e:	2302      	movs	r3, #2
 8004340:	e040      	b.n	80043c4 <HAL_DMA_Start_IT+0xa8>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d12f      	bne.n	80043b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2202      	movs	r2, #2
 800435a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	68b9      	ldr	r1, [r7, #8]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 fa4a 	bl	8004804 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004374:	223f      	movs	r2, #63	; 0x3f
 8004376:	409a      	lsls	r2, r3
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0216 	orr.w	r2, r2, #22
 800438a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d007      	beq.n	80043a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0208 	orr.w	r2, r2, #8
 80043a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	e005      	b.n	80043c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80043be:	2302      	movs	r3, #2
 80043c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043da:	f7ff f9d5 	bl	8003788 <HAL_GetTick>
 80043de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d008      	beq.n	80043fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2280      	movs	r2, #128	; 0x80
 80043f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e052      	b.n	80044a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0216 	bic.w	r2, r2, #22
 800440c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695a      	ldr	r2, [r3, #20]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800441c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <HAL_DMA_Abort+0x62>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0208 	bic.w	r2, r2, #8
 800443c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0201 	bic.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800444e:	e013      	b.n	8004478 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004450:	f7ff f99a 	bl	8003788 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b05      	cmp	r3, #5
 800445c:	d90c      	bls.n	8004478 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2203      	movs	r2, #3
 8004470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e015      	b.n	80044a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e4      	bne.n	8004450 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448a:	223f      	movs	r2, #63	; 0x3f
 800448c:	409a      	lsls	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d004      	beq.n	80044ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2280      	movs	r2, #128	; 0x80
 80044c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e00c      	b.n	80044e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2205      	movs	r2, #5
 80044ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044fc:	4b92      	ldr	r3, [pc, #584]	; (8004748 <HAL_DMA_IRQHandler+0x258>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a92      	ldr	r2, [pc, #584]	; (800474c <HAL_DMA_IRQHandler+0x25c>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	0a9b      	lsrs	r3, r3, #10
 8004508:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451a:	2208      	movs	r2, #8
 800451c:	409a      	lsls	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4013      	ands	r3, r2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d01a      	beq.n	800455c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d013      	beq.n	800455c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0204 	bic.w	r2, r2, #4
 8004542:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004548:	2208      	movs	r2, #8
 800454a:	409a      	lsls	r2, r3
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004554:	f043 0201 	orr.w	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004560:	2201      	movs	r2, #1
 8004562:	409a      	lsls	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4013      	ands	r3, r2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d012      	beq.n	8004592 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00b      	beq.n	8004592 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457e:	2201      	movs	r2, #1
 8004580:	409a      	lsls	r2, r3
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	f043 0202 	orr.w	r2, r3, #2
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004596:	2204      	movs	r2, #4
 8004598:	409a      	lsls	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4013      	ands	r3, r2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d012      	beq.n	80045c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00b      	beq.n	80045c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b4:	2204      	movs	r2, #4
 80045b6:	409a      	lsls	r2, r3
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c0:	f043 0204 	orr.w	r2, r3, #4
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045cc:	2210      	movs	r2, #16
 80045ce:	409a      	lsls	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4013      	ands	r3, r2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d043      	beq.n	8004660 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d03c      	beq.n	8004660 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ea:	2210      	movs	r2, #16
 80045ec:	409a      	lsls	r2, r3
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d018      	beq.n	8004632 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d108      	bne.n	8004620 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d024      	beq.n	8004660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	4798      	blx	r3
 800461e:	e01f      	b.n	8004660 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01b      	beq.n	8004660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	4798      	blx	r3
 8004630:	e016      	b.n	8004660 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d107      	bne.n	8004650 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0208 	bic.w	r2, r2, #8
 800464e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004664:	2220      	movs	r2, #32
 8004666:	409a      	lsls	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4013      	ands	r3, r2
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 808e 	beq.w	800478e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8086 	beq.w	800478e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004686:	2220      	movs	r2, #32
 8004688:	409a      	lsls	r2, r3
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b05      	cmp	r3, #5
 8004698:	d136      	bne.n	8004708 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0216 	bic.w	r2, r2, #22
 80046a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695a      	ldr	r2, [r3, #20]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d103      	bne.n	80046ca <HAL_DMA_IRQHandler+0x1da>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0208 	bic.w	r2, r2, #8
 80046d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046de:	223f      	movs	r2, #63	; 0x3f
 80046e0:	409a      	lsls	r2, r3
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d07d      	beq.n	80047fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	4798      	blx	r3
        }
        return;
 8004706:	e078      	b.n	80047fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d01c      	beq.n	8004750 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d108      	bne.n	8004736 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004728:	2b00      	cmp	r3, #0
 800472a:	d030      	beq.n	800478e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	4798      	blx	r3
 8004734:	e02b      	b.n	800478e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d027      	beq.n	800478e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	4798      	blx	r3
 8004746:	e022      	b.n	800478e <HAL_DMA_IRQHandler+0x29e>
 8004748:	20000034 	.word	0x20000034
 800474c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10f      	bne.n	800477e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0210 	bic.w	r2, r2, #16
 800476c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004792:	2b00      	cmp	r3, #0
 8004794:	d032      	beq.n	80047fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d022      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2205      	movs	r2, #5
 80047a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0201 	bic.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	3301      	adds	r3, #1
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d307      	bcc.n	80047d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f2      	bne.n	80047ba <HAL_DMA_IRQHandler+0x2ca>
 80047d4:	e000      	b.n	80047d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80047d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	4798      	blx	r3
 80047f8:	e000      	b.n	80047fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80047fa:	bf00      	nop
    }
  }
}
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop

08004804 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004820:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b40      	cmp	r3, #64	; 0x40
 8004830:	d108      	bne.n	8004844 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004842:	e007      	b.n	8004854 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	60da      	str	r2, [r3, #12]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	3b10      	subs	r3, #16
 8004870:	4a14      	ldr	r2, [pc, #80]	; (80048c4 <DMA_CalcBaseAndBitshift+0x64>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800487a:	4a13      	ldr	r2, [pc, #76]	; (80048c8 <DMA_CalcBaseAndBitshift+0x68>)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b03      	cmp	r3, #3
 800488c:	d909      	bls.n	80048a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004896:	f023 0303 	bic.w	r3, r3, #3
 800489a:	1d1a      	adds	r2, r3, #4
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	659a      	str	r2, [r3, #88]	; 0x58
 80048a0:	e007      	b.n	80048b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048aa:	f023 0303 	bic.w	r3, r3, #3
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	aaaaaaab 	.word	0xaaaaaaab
 80048c8:	0800c600 	.word	0x0800c600

080048cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d11f      	bne.n	8004926 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d855      	bhi.n	8004998 <DMA_CheckFifoParam+0xcc>
 80048ec:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <DMA_CheckFifoParam+0x28>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004905 	.word	0x08004905
 80048f8:	08004917 	.word	0x08004917
 80048fc:	08004905 	.word	0x08004905
 8004900:	08004999 	.word	0x08004999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d045      	beq.n	800499c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004914:	e042      	b.n	800499c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800491e:	d13f      	bne.n	80049a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004924:	e03c      	b.n	80049a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492e:	d121      	bne.n	8004974 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b03      	cmp	r3, #3
 8004934:	d836      	bhi.n	80049a4 <DMA_CheckFifoParam+0xd8>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <DMA_CheckFifoParam+0x70>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	0800494d 	.word	0x0800494d
 8004940:	08004953 	.word	0x08004953
 8004944:	0800494d 	.word	0x0800494d
 8004948:	08004965 	.word	0x08004965
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	73fb      	strb	r3, [r7, #15]
      break;
 8004950:	e02f      	b.n	80049b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d024      	beq.n	80049a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004962:	e021      	b.n	80049a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800496c:	d11e      	bne.n	80049ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004972:	e01b      	b.n	80049ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d902      	bls.n	8004980 <DMA_CheckFifoParam+0xb4>
 800497a:	2b03      	cmp	r3, #3
 800497c:	d003      	beq.n	8004986 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800497e:	e018      	b.n	80049b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	73fb      	strb	r3, [r7, #15]
      break;
 8004984:	e015      	b.n	80049b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00e      	beq.n	80049b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	73fb      	strb	r3, [r7, #15]
      break;
 8004996:	e00b      	b.n	80049b0 <DMA_CheckFifoParam+0xe4>
      break;
 8004998:	bf00      	nop
 800499a:	e00a      	b.n	80049b2 <DMA_CheckFifoParam+0xe6>
      break;
 800499c:	bf00      	nop
 800499e:	e008      	b.n	80049b2 <DMA_CheckFifoParam+0xe6>
      break;
 80049a0:	bf00      	nop
 80049a2:	e006      	b.n	80049b2 <DMA_CheckFifoParam+0xe6>
      break;
 80049a4:	bf00      	nop
 80049a6:	e004      	b.n	80049b2 <DMA_CheckFifoParam+0xe6>
      break;
 80049a8:	bf00      	nop
 80049aa:	e002      	b.n	80049b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80049ac:	bf00      	nop
 80049ae:	e000      	b.n	80049b2 <DMA_CheckFifoParam+0xe6>
      break;
 80049b0:	bf00      	nop
    }
  } 
  
  return status; 
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b089      	sub	sp, #36	; 0x24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	e165      	b.n	8004ca8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049dc:	2201      	movs	r2, #1
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4013      	ands	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	f040 8154 	bne.w	8004ca2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d00b      	beq.n	8004a1a <HAL_GPIO_Init+0x5a>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d007      	beq.n	8004a1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a0e:	2b11      	cmp	r3, #17
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b12      	cmp	r3, #18
 8004a18:	d130      	bne.n	8004a7c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	2203      	movs	r2, #3
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a50:	2201      	movs	r2, #1
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	091b      	lsrs	r3, r3, #4
 8004a66:	f003 0201 	and.w	r2, r3, #1
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	2203      	movs	r2, #3
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d003      	beq.n	8004abc <HAL_GPIO_Init+0xfc>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b12      	cmp	r3, #18
 8004aba:	d123      	bne.n	8004b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	08da      	lsrs	r2, r3, #3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3208      	adds	r2, #8
 8004ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	220f      	movs	r2, #15
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4013      	ands	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	08da      	lsrs	r2, r3, #3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3208      	adds	r2, #8
 8004afe:	69b9      	ldr	r1, [r7, #24]
 8004b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	2203      	movs	r2, #3
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	43db      	mvns	r3, r3
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f003 0203 	and.w	r2, r3, #3
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80ae 	beq.w	8004ca2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b46:	2300      	movs	r3, #0
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	4b5c      	ldr	r3, [pc, #368]	; (8004cbc <HAL_GPIO_Init+0x2fc>)
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	4a5b      	ldr	r2, [pc, #364]	; (8004cbc <HAL_GPIO_Init+0x2fc>)
 8004b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b54:	6453      	str	r3, [r2, #68]	; 0x44
 8004b56:	4b59      	ldr	r3, [pc, #356]	; (8004cbc <HAL_GPIO_Init+0x2fc>)
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b62:	4a57      	ldr	r2, [pc, #348]	; (8004cc0 <HAL_GPIO_Init+0x300>)
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	089b      	lsrs	r3, r3, #2
 8004b68:	3302      	adds	r3, #2
 8004b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	220f      	movs	r2, #15
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4013      	ands	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a4e      	ldr	r2, [pc, #312]	; (8004cc4 <HAL_GPIO_Init+0x304>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d025      	beq.n	8004bda <HAL_GPIO_Init+0x21a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a4d      	ldr	r2, [pc, #308]	; (8004cc8 <HAL_GPIO_Init+0x308>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01f      	beq.n	8004bd6 <HAL_GPIO_Init+0x216>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a4c      	ldr	r2, [pc, #304]	; (8004ccc <HAL_GPIO_Init+0x30c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d019      	beq.n	8004bd2 <HAL_GPIO_Init+0x212>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a4b      	ldr	r2, [pc, #300]	; (8004cd0 <HAL_GPIO_Init+0x310>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d013      	beq.n	8004bce <HAL_GPIO_Init+0x20e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a4a      	ldr	r2, [pc, #296]	; (8004cd4 <HAL_GPIO_Init+0x314>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00d      	beq.n	8004bca <HAL_GPIO_Init+0x20a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a49      	ldr	r2, [pc, #292]	; (8004cd8 <HAL_GPIO_Init+0x318>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d007      	beq.n	8004bc6 <HAL_GPIO_Init+0x206>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a48      	ldr	r2, [pc, #288]	; (8004cdc <HAL_GPIO_Init+0x31c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d101      	bne.n	8004bc2 <HAL_GPIO_Init+0x202>
 8004bbe:	2306      	movs	r3, #6
 8004bc0:	e00c      	b.n	8004bdc <HAL_GPIO_Init+0x21c>
 8004bc2:	2307      	movs	r3, #7
 8004bc4:	e00a      	b.n	8004bdc <HAL_GPIO_Init+0x21c>
 8004bc6:	2305      	movs	r3, #5
 8004bc8:	e008      	b.n	8004bdc <HAL_GPIO_Init+0x21c>
 8004bca:	2304      	movs	r3, #4
 8004bcc:	e006      	b.n	8004bdc <HAL_GPIO_Init+0x21c>
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e004      	b.n	8004bdc <HAL_GPIO_Init+0x21c>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e002      	b.n	8004bdc <HAL_GPIO_Init+0x21c>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <HAL_GPIO_Init+0x21c>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	f002 0203 	and.w	r2, r2, #3
 8004be2:	0092      	lsls	r2, r2, #2
 8004be4:	4093      	lsls	r3, r2
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bec:	4934      	ldr	r1, [pc, #208]	; (8004cc0 <HAL_GPIO_Init+0x300>)
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	089b      	lsrs	r3, r3, #2
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bfa:	4b39      	ldr	r3, [pc, #228]	; (8004ce0 <HAL_GPIO_Init+0x320>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4013      	ands	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c1e:	4a30      	ldr	r2, [pc, #192]	; (8004ce0 <HAL_GPIO_Init+0x320>)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004c24:	4b2e      	ldr	r3, [pc, #184]	; (8004ce0 <HAL_GPIO_Init+0x320>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4013      	ands	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c48:	4a25      	ldr	r2, [pc, #148]	; (8004ce0 <HAL_GPIO_Init+0x320>)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c4e:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <HAL_GPIO_Init+0x320>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c72:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <HAL_GPIO_Init+0x320>)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c78:	4b19      	ldr	r3, [pc, #100]	; (8004ce0 <HAL_GPIO_Init+0x320>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4013      	ands	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c9c:	4a10      	ldr	r2, [pc, #64]	; (8004ce0 <HAL_GPIO_Init+0x320>)
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2b0f      	cmp	r3, #15
 8004cac:	f67f ae96 	bls.w	80049dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	3724      	adds	r7, #36	; 0x24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	40013800 	.word	0x40013800
 8004cc4:	40020000 	.word	0x40020000
 8004cc8:	40020400 	.word	0x40020400
 8004ccc:	40020800 	.word	0x40020800
 8004cd0:	40020c00 	.word	0x40020c00
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40021400 	.word	0x40021400
 8004cdc:	40021800 	.word	0x40021800
 8004ce0:	40013c00 	.word	0x40013c00

08004ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	460b      	mov	r3, r1
 8004cee:	807b      	strh	r3, [r7, #2]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cf4:	787b      	ldrb	r3, [r7, #1]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cfa:	887a      	ldrh	r2, [r7, #2]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d00:	e003      	b.n	8004d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d02:	887b      	ldrh	r3, [r7, #2]
 8004d04:	041a      	lsls	r2, r3, #16
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	619a      	str	r2, [r3, #24]
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	887b      	ldrh	r3, [r7, #2]
 8004d28:	401a      	ands	r2, r3
 8004d2a:	887b      	ldrh	r3, [r7, #2]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d104      	bne.n	8004d3a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d30:	887b      	ldrh	r3, [r7, #2]
 8004d32:	041a      	lsls	r2, r3, #16
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004d38:	e002      	b.n	8004d40 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004d3a:	887a      	ldrh	r2, [r7, #2]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	619a      	str	r2, [r3, #24]
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e0cc      	b.n	8004efa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d60:	4b68      	ldr	r3, [pc, #416]	; (8004f04 <HAL_RCC_ClockConfig+0x1b8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d90c      	bls.n	8004d88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d6e:	4b65      	ldr	r3, [pc, #404]	; (8004f04 <HAL_RCC_ClockConfig+0x1b8>)
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d76:	4b63      	ldr	r3, [pc, #396]	; (8004f04 <HAL_RCC_ClockConfig+0x1b8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d001      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e0b8      	b.n	8004efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d020      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004da0:	4b59      	ldr	r3, [pc, #356]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	4a58      	ldr	r2, [pc, #352]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004daa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004db8:	4b53      	ldr	r3, [pc, #332]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4a52      	ldr	r2, [pc, #328]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dc4:	4b50      	ldr	r3, [pc, #320]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	494d      	ldr	r1, [pc, #308]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d044      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d107      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dea:	4b47      	ldr	r3, [pc, #284]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d119      	bne.n	8004e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e07f      	b.n	8004efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d003      	beq.n	8004e0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d107      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e0a:	4b3f      	ldr	r3, [pc, #252]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d109      	bne.n	8004e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e06f      	b.n	8004efa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1a:	4b3b      	ldr	r3, [pc, #236]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e067      	b.n	8004efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e2a:	4b37      	ldr	r3, [pc, #220]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f023 0203 	bic.w	r2, r3, #3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	4934      	ldr	r1, [pc, #208]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e3c:	f7fe fca4 	bl	8003788 <HAL_GetTick>
 8004e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e42:	e00a      	b.n	8004e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e44:	f7fe fca0 	bl	8003788 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e04f      	b.n	8004efa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e5a:	4b2b      	ldr	r3, [pc, #172]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 020c 	and.w	r2, r3, #12
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d1eb      	bne.n	8004e44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e6c:	4b25      	ldr	r3, [pc, #148]	; (8004f04 <HAL_RCC_ClockConfig+0x1b8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d20c      	bcs.n	8004e94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7a:	4b22      	ldr	r3, [pc, #136]	; (8004f04 <HAL_RCC_ClockConfig+0x1b8>)
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e82:	4b20      	ldr	r3, [pc, #128]	; (8004f04 <HAL_RCC_ClockConfig+0x1b8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e032      	b.n	8004efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d008      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ea0:	4b19      	ldr	r3, [pc, #100]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	4916      	ldr	r1, [pc, #88]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d009      	beq.n	8004ed2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ebe:	4b12      	ldr	r3, [pc, #72]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	490e      	ldr	r1, [pc, #56]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ed2:	f000 f821 	bl	8004f18 <HAL_RCC_GetSysClockFreq>
 8004ed6:	4601      	mov	r1, r0
 8004ed8:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	091b      	lsrs	r3, r3, #4
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <HAL_RCC_ClockConfig+0x1c0>)
 8004ee4:	5cd3      	ldrb	r3, [r2, r3]
 8004ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8004eea:	4a09      	ldr	r2, [pc, #36]	; (8004f10 <HAL_RCC_ClockConfig+0x1c4>)
 8004eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004eee:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe fc04 	bl	8003700 <HAL_InitTick>

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40023c00 	.word	0x40023c00
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	0800c5e8 	.word	0x0800c5e8
 8004f10:	20000034 	.word	0x20000034
 8004f14:	20000038 	.word	0x20000038

08004f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	607b      	str	r3, [r7, #4]
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	2300      	movs	r3, #0
 8004f28:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f2e:	4b50      	ldr	r3, [pc, #320]	; (8005070 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 030c 	and.w	r3, r3, #12
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d007      	beq.n	8004f4a <HAL_RCC_GetSysClockFreq+0x32>
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d008      	beq.n	8004f50 <HAL_RCC_GetSysClockFreq+0x38>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f040 808d 	bne.w	800505e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f44:	4b4b      	ldr	r3, [pc, #300]	; (8005074 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004f46:	60bb      	str	r3, [r7, #8]
       break;
 8004f48:	e08c      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f4a:	4b4b      	ldr	r3, [pc, #300]	; (8005078 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f4c:	60bb      	str	r3, [r7, #8]
      break;
 8004f4e:	e089      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f50:	4b47      	ldr	r3, [pc, #284]	; (8005070 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f5a:	4b45      	ldr	r3, [pc, #276]	; (8005070 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d023      	beq.n	8004fae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f66:	4b42      	ldr	r3, [pc, #264]	; (8005070 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	099b      	lsrs	r3, r3, #6
 8004f6c:	f04f 0400 	mov.w	r4, #0
 8004f70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	ea03 0501 	and.w	r5, r3, r1
 8004f7c:	ea04 0602 	and.w	r6, r4, r2
 8004f80:	4a3d      	ldr	r2, [pc, #244]	; (8005078 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f82:	fb02 f106 	mul.w	r1, r2, r6
 8004f86:	2200      	movs	r2, #0
 8004f88:	fb02 f205 	mul.w	r2, r2, r5
 8004f8c:	440a      	add	r2, r1
 8004f8e:	493a      	ldr	r1, [pc, #232]	; (8005078 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f90:	fba5 0101 	umull	r0, r1, r5, r1
 8004f94:	1853      	adds	r3, r2, r1
 8004f96:	4619      	mov	r1, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f04f 0400 	mov.w	r4, #0
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	4623      	mov	r3, r4
 8004fa2:	f7fb ffa7 	bl	8000ef4 <__aeabi_uldivmod>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	460c      	mov	r4, r1
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	e049      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fae:	4b30      	ldr	r3, [pc, #192]	; (8005070 <HAL_RCC_GetSysClockFreq+0x158>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	099b      	lsrs	r3, r3, #6
 8004fb4:	f04f 0400 	mov.w	r4, #0
 8004fb8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	ea03 0501 	and.w	r5, r3, r1
 8004fc4:	ea04 0602 	and.w	r6, r4, r2
 8004fc8:	4629      	mov	r1, r5
 8004fca:	4632      	mov	r2, r6
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	f04f 0400 	mov.w	r4, #0
 8004fd4:	0154      	lsls	r4, r2, #5
 8004fd6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fda:	014b      	lsls	r3, r1, #5
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4622      	mov	r2, r4
 8004fe0:	1b49      	subs	r1, r1, r5
 8004fe2:	eb62 0206 	sbc.w	r2, r2, r6
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	f04f 0400 	mov.w	r4, #0
 8004fee:	0194      	lsls	r4, r2, #6
 8004ff0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ff4:	018b      	lsls	r3, r1, #6
 8004ff6:	1a5b      	subs	r3, r3, r1
 8004ff8:	eb64 0402 	sbc.w	r4, r4, r2
 8004ffc:	f04f 0100 	mov.w	r1, #0
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	00e2      	lsls	r2, r4, #3
 8005006:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800500a:	00d9      	lsls	r1, r3, #3
 800500c:	460b      	mov	r3, r1
 800500e:	4614      	mov	r4, r2
 8005010:	195b      	adds	r3, r3, r5
 8005012:	eb44 0406 	adc.w	r4, r4, r6
 8005016:	f04f 0100 	mov.w	r1, #0
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	02a2      	lsls	r2, r4, #10
 8005020:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005024:	0299      	lsls	r1, r3, #10
 8005026:	460b      	mov	r3, r1
 8005028:	4614      	mov	r4, r2
 800502a:	4618      	mov	r0, r3
 800502c:	4621      	mov	r1, r4
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f04f 0400 	mov.w	r4, #0
 8005034:	461a      	mov	r2, r3
 8005036:	4623      	mov	r3, r4
 8005038:	f7fb ff5c 	bl	8000ef4 <__aeabi_uldivmod>
 800503c:	4603      	mov	r3, r0
 800503e:	460c      	mov	r4, r1
 8005040:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <HAL_RCC_GetSysClockFreq+0x158>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	0c1b      	lsrs	r3, r3, #16
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	3301      	adds	r3, #1
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	fbb2 f3f3 	udiv	r3, r2, r3
 800505a:	60bb      	str	r3, [r7, #8]
      break;
 800505c:	e002      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005060:	60bb      	str	r3, [r7, #8]
      break;
 8005062:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005064:	68bb      	ldr	r3, [r7, #8]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800
 8005074:	00f42400 	.word	0x00f42400
 8005078:	017d7840 	.word	0x017d7840

0800507c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005080:	4b03      	ldr	r3, [pc, #12]	; (8005090 <HAL_RCC_GetHCLKFreq+0x14>)
 8005082:	681b      	ldr	r3, [r3, #0]
}
 8005084:	4618      	mov	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	20000034 	.word	0x20000034

08005094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005098:	f7ff fff0 	bl	800507c <HAL_RCC_GetHCLKFreq>
 800509c:	4601      	mov	r1, r0
 800509e:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	0a9b      	lsrs	r3, r3, #10
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	4a03      	ldr	r2, [pc, #12]	; (80050b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050aa:	5cd3      	ldrb	r3, [r2, r3]
 80050ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40023800 	.word	0x40023800
 80050b8:	0800c5f8 	.word	0x0800c5f8

080050bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050c0:	f7ff ffdc 	bl	800507c <HAL_RCC_GetHCLKFreq>
 80050c4:	4601      	mov	r1, r0
 80050c6:	4b05      	ldr	r3, [pc, #20]	; (80050dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	0b5b      	lsrs	r3, r3, #13
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	4a03      	ldr	r2, [pc, #12]	; (80050e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050d2:	5cd3      	ldrb	r3, [r2, r3]
 80050d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050d8:	4618      	mov	r0, r3
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40023800 	.word	0x40023800
 80050e0:	0800c5f8 	.word	0x0800c5f8

080050e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d075      	beq.n	80051e8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80050fc:	4ba2      	ldr	r3, [pc, #648]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 030c 	and.w	r3, r3, #12
 8005104:	2b04      	cmp	r3, #4
 8005106:	d00c      	beq.n	8005122 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005108:	4b9f      	ldr	r3, [pc, #636]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005110:	2b08      	cmp	r3, #8
 8005112:	d112      	bne.n	800513a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005114:	4b9c      	ldr	r3, [pc, #624]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005120:	d10b      	bne.n	800513a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005122:	4b99      	ldr	r3, [pc, #612]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d05b      	beq.n	80051e6 <HAL_RCC_OscConfig+0x102>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d157      	bne.n	80051e6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e20b      	b.n	8005552 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005142:	d106      	bne.n	8005152 <HAL_RCC_OscConfig+0x6e>
 8005144:	4b90      	ldr	r3, [pc, #576]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a8f      	ldr	r2, [pc, #572]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 800514a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	e01d      	b.n	800518e <HAL_RCC_OscConfig+0xaa>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800515a:	d10c      	bne.n	8005176 <HAL_RCC_OscConfig+0x92>
 800515c:	4b8a      	ldr	r3, [pc, #552]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a89      	ldr	r2, [pc, #548]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 8005162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	4b87      	ldr	r3, [pc, #540]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a86      	ldr	r2, [pc, #536]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 800516e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	e00b      	b.n	800518e <HAL_RCC_OscConfig+0xaa>
 8005176:	4b84      	ldr	r3, [pc, #528]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a83      	ldr	r2, [pc, #524]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 800517c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	4b81      	ldr	r3, [pc, #516]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a80      	ldr	r2, [pc, #512]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 8005188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800518c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d013      	beq.n	80051be <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005196:	f7fe faf7 	bl	8003788 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800519e:	f7fe faf3 	bl	8003788 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b64      	cmp	r3, #100	; 0x64
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e1d0      	b.n	8005552 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b0:	4b75      	ldr	r3, [pc, #468]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0f0      	beq.n	800519e <HAL_RCC_OscConfig+0xba>
 80051bc:	e014      	b.n	80051e8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051be:	f7fe fae3 	bl	8003788 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051c6:	f7fe fadf 	bl	8003788 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b64      	cmp	r3, #100	; 0x64
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e1bc      	b.n	8005552 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051d8:	4b6b      	ldr	r3, [pc, #428]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1f0      	bne.n	80051c6 <HAL_RCC_OscConfig+0xe2>
 80051e4:	e000      	b.n	80051e8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d063      	beq.n	80052bc <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80051f4:	4b64      	ldr	r3, [pc, #400]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 030c 	and.w	r3, r3, #12
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00b      	beq.n	8005218 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005200:	4b61      	ldr	r3, [pc, #388]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005208:	2b08      	cmp	r3, #8
 800520a:	d11c      	bne.n	8005246 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800520c:	4b5e      	ldr	r3, [pc, #376]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d116      	bne.n	8005246 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005218:	4b5b      	ldr	r3, [pc, #364]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <HAL_RCC_OscConfig+0x14c>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d001      	beq.n	8005230 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e190      	b.n	8005552 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005230:	4b55      	ldr	r3, [pc, #340]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	4952      	ldr	r1, [pc, #328]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 8005240:	4313      	orrs	r3, r2
 8005242:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005244:	e03a      	b.n	80052bc <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d020      	beq.n	8005290 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800524e:	4b4f      	ldr	r3, [pc, #316]	; (800538c <HAL_RCC_OscConfig+0x2a8>)
 8005250:	2201      	movs	r2, #1
 8005252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fe fa98 	bl	8003788 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800525c:	f7fe fa94 	bl	8003788 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e171      	b.n	8005552 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800526e:	4b46      	ldr	r3, [pc, #280]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800527a:	4b43      	ldr	r3, [pc, #268]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	493f      	ldr	r1, [pc, #252]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 800528a:	4313      	orrs	r3, r2
 800528c:	600b      	str	r3, [r1, #0]
 800528e:	e015      	b.n	80052bc <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005290:	4b3e      	ldr	r3, [pc, #248]	; (800538c <HAL_RCC_OscConfig+0x2a8>)
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005296:	f7fe fa77 	bl	8003788 <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800529e:	f7fe fa73 	bl	8003788 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e150      	b.n	8005552 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052b0:	4b35      	ldr	r3, [pc, #212]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f0      	bne.n	800529e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d030      	beq.n	800532a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d016      	beq.n	80052fe <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052d0:	4b2f      	ldr	r3, [pc, #188]	; (8005390 <HAL_RCC_OscConfig+0x2ac>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d6:	f7fe fa57 	bl	8003788 <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052dc:	e008      	b.n	80052f0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052de:	f7fe fa53 	bl	8003788 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e130      	b.n	8005552 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052f0:	4b25      	ldr	r3, [pc, #148]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 80052f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0f0      	beq.n	80052de <HAL_RCC_OscConfig+0x1fa>
 80052fc:	e015      	b.n	800532a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052fe:	4b24      	ldr	r3, [pc, #144]	; (8005390 <HAL_RCC_OscConfig+0x2ac>)
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005304:	f7fe fa40 	bl	8003788 <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800530c:	f7fe fa3c 	bl	8003788 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e119      	b.n	8005552 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800531e:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 8005320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f0      	bne.n	800530c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 809f 	beq.w	8005476 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005338:	2300      	movs	r3, #0
 800533a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800533c:	4b12      	ldr	r3, [pc, #72]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10f      	bne.n	8005368 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	4a0d      	ldr	r2, [pc, #52]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 8005352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005356:	6413      	str	r3, [r2, #64]	; 0x40
 8005358:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <HAL_RCC_OscConfig+0x2a4>)
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005364:	2301      	movs	r3, #1
 8005366:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005368:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <HAL_RCC_OscConfig+0x2b0>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005370:	2b00      	cmp	r3, #0
 8005372:	d120      	bne.n	80053b6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005374:	4b07      	ldr	r3, [pc, #28]	; (8005394 <HAL_RCC_OscConfig+0x2b0>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a06      	ldr	r2, [pc, #24]	; (8005394 <HAL_RCC_OscConfig+0x2b0>)
 800537a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005380:	f7fe fa02 	bl	8003788 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005386:	e010      	b.n	80053aa <HAL_RCC_OscConfig+0x2c6>
 8005388:	40023800 	.word	0x40023800
 800538c:	42470000 	.word	0x42470000
 8005390:	42470e80 	.word	0x42470e80
 8005394:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005398:	f7fe f9f6 	bl	8003788 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e0d3      	b.n	8005552 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053aa:	4b6c      	ldr	r3, [pc, #432]	; (800555c <HAL_RCC_OscConfig+0x478>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0f0      	beq.n	8005398 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d106      	bne.n	80053cc <HAL_RCC_OscConfig+0x2e8>
 80053be:	4b68      	ldr	r3, [pc, #416]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 80053c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c2:	4a67      	ldr	r2, [pc, #412]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 80053c4:	f043 0301 	orr.w	r3, r3, #1
 80053c8:	6713      	str	r3, [r2, #112]	; 0x70
 80053ca:	e01c      	b.n	8005406 <HAL_RCC_OscConfig+0x322>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	2b05      	cmp	r3, #5
 80053d2:	d10c      	bne.n	80053ee <HAL_RCC_OscConfig+0x30a>
 80053d4:	4b62      	ldr	r3, [pc, #392]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 80053d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d8:	4a61      	ldr	r2, [pc, #388]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 80053da:	f043 0304 	orr.w	r3, r3, #4
 80053de:	6713      	str	r3, [r2, #112]	; 0x70
 80053e0:	4b5f      	ldr	r3, [pc, #380]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 80053e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e4:	4a5e      	ldr	r2, [pc, #376]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 80053e6:	f043 0301 	orr.w	r3, r3, #1
 80053ea:	6713      	str	r3, [r2, #112]	; 0x70
 80053ec:	e00b      	b.n	8005406 <HAL_RCC_OscConfig+0x322>
 80053ee:	4b5c      	ldr	r3, [pc, #368]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 80053f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f2:	4a5b      	ldr	r2, [pc, #364]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 80053f4:	f023 0301 	bic.w	r3, r3, #1
 80053f8:	6713      	str	r3, [r2, #112]	; 0x70
 80053fa:	4b59      	ldr	r3, [pc, #356]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 80053fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fe:	4a58      	ldr	r2, [pc, #352]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 8005400:	f023 0304 	bic.w	r3, r3, #4
 8005404:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d015      	beq.n	800543a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540e:	f7fe f9bb 	bl	8003788 <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005414:	e00a      	b.n	800542c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005416:	f7fe f9b7 	bl	8003788 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	f241 3288 	movw	r2, #5000	; 0x1388
 8005424:	4293      	cmp	r3, r2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e092      	b.n	8005552 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800542c:	4b4c      	ldr	r3, [pc, #304]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 800542e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0ee      	beq.n	8005416 <HAL_RCC_OscConfig+0x332>
 8005438:	e014      	b.n	8005464 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543a:	f7fe f9a5 	bl	8003788 <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005440:	e00a      	b.n	8005458 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005442:	f7fe f9a1 	bl	8003788 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005450:	4293      	cmp	r3, r2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e07c      	b.n	8005552 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005458:	4b41      	ldr	r3, [pc, #260]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 800545a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1ee      	bne.n	8005442 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005464:	7dfb      	ldrb	r3, [r7, #23]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d105      	bne.n	8005476 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800546a:	4b3d      	ldr	r3, [pc, #244]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	4a3c      	ldr	r2, [pc, #240]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 8005470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005474:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d068      	beq.n	8005550 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800547e:	4b38      	ldr	r3, [pc, #224]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 030c 	and.w	r3, r3, #12
 8005486:	2b08      	cmp	r3, #8
 8005488:	d060      	beq.n	800554c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d145      	bne.n	800551e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005492:	4b34      	ldr	r3, [pc, #208]	; (8005564 <HAL_RCC_OscConfig+0x480>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005498:	f7fe f976 	bl	8003788 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a0:	f7fe f972 	bl	8003788 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e04f      	b.n	8005552 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b2:	4b2b      	ldr	r3, [pc, #172]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69da      	ldr	r2, [r3, #28]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	019b      	lsls	r3, r3, #6
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	085b      	lsrs	r3, r3, #1
 80054d6:	3b01      	subs	r3, #1
 80054d8:	041b      	lsls	r3, r3, #16
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	061b      	lsls	r3, r3, #24
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	071b      	lsls	r3, r3, #28
 80054ea:	491d      	ldr	r1, [pc, #116]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054f0:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <HAL_RCC_OscConfig+0x480>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f6:	f7fe f947 	bl	8003788 <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054fe:	f7fe f943 	bl	8003788 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e020      	b.n	8005552 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005510:	4b13      	ldr	r3, [pc, #76]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCC_OscConfig+0x41a>
 800551c:	e018      	b.n	8005550 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551e:	4b11      	ldr	r3, [pc, #68]	; (8005564 <HAL_RCC_OscConfig+0x480>)
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005524:	f7fe f930 	bl	8003788 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800552c:	f7fe f92c 	bl	8003788 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e009      	b.n	8005552 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800553e:	4b08      	ldr	r3, [pc, #32]	; (8005560 <HAL_RCC_OscConfig+0x47c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1f0      	bne.n	800552c <HAL_RCC_OscConfig+0x448>
 800554a:	e001      	b.n	8005550 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	40007000 	.word	0x40007000
 8005560:	40023800 	.word	0x40023800
 8005564:	42470060 	.word	0x42470060

08005568 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e056      	b.n	8005628 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d106      	bne.n	800559a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7fd f995 	bl	80028c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2202      	movs	r2, #2
 800559e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	ea42 0103 	orr.w	r1, r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	0c1b      	lsrs	r3, r3, #16
 80055f8:	f003 0104 	and.w	r1, r3, #4
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	69da      	ldr	r2, [r3, #28]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005616:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_SPI_Transmit+0x22>
 800564e:	2302      	movs	r3, #2
 8005650:	e11e      	b.n	8005890 <HAL_SPI_Transmit+0x260>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800565a:	f7fe f895 	bl	8003788 <HAL_GetTick>
 800565e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	d002      	beq.n	8005676 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005670:	2302      	movs	r3, #2
 8005672:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005674:	e103      	b.n	800587e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <HAL_SPI_Transmit+0x52>
 800567c:	88fb      	ldrh	r3, [r7, #6]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d102      	bne.n	8005688 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005686:	e0fa      	b.n	800587e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2203      	movs	r2, #3
 800568c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	88fa      	ldrh	r2, [r7, #6]
 80056a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	88fa      	ldrh	r2, [r7, #6]
 80056a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ce:	d107      	bne.n	80056e0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ea:	2b40      	cmp	r3, #64	; 0x40
 80056ec:	d007      	beq.n	80056fe <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005706:	d14b      	bne.n	80057a0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <HAL_SPI_Transmit+0xe6>
 8005710:	8afb      	ldrh	r3, [r7, #22]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d13e      	bne.n	8005794 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571a:	881a      	ldrh	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	1c9a      	adds	r2, r3, #2
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800573a:	e02b      	b.n	8005794 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b02      	cmp	r3, #2
 8005748:	d112      	bne.n	8005770 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	881a      	ldrh	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	1c9a      	adds	r2, r3, #2
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	86da      	strh	r2, [r3, #54]	; 0x36
 800576e:	e011      	b.n	8005794 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005770:	f7fe f80a 	bl	8003788 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	429a      	cmp	r2, r3
 800577e:	d803      	bhi.n	8005788 <HAL_SPI_Transmit+0x158>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005786:	d102      	bne.n	800578e <HAL_SPI_Transmit+0x15e>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d102      	bne.n	8005794 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005792:	e074      	b.n	800587e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1ce      	bne.n	800573c <HAL_SPI_Transmit+0x10c>
 800579e:	e04c      	b.n	800583a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_SPI_Transmit+0x17e>
 80057a8:	8afb      	ldrh	r3, [r7, #22]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d140      	bne.n	8005830 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	330c      	adds	r3, #12
 80057b8:	7812      	ldrb	r2, [r2, #0]
 80057ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057d4:	e02c      	b.n	8005830 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d113      	bne.n	800580c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	330c      	adds	r3, #12
 80057ee:	7812      	ldrb	r2, [r2, #0]
 80057f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	86da      	strh	r2, [r3, #54]	; 0x36
 800580a:	e011      	b.n	8005830 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800580c:	f7fd ffbc 	bl	8003788 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d803      	bhi.n	8005824 <HAL_SPI_Transmit+0x1f4>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d102      	bne.n	800582a <HAL_SPI_Transmit+0x1fa>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d102      	bne.n	8005830 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800582e:	e026      	b.n	800587e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1cd      	bne.n	80057d6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 fafc 	bl	8005e3c <SPI_EndRxTxTransaction>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10a      	bne.n	800586e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005858:	2300      	movs	r3, #0
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	613b      	str	r3, [r7, #16]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	613b      	str	r3, [r7, #16]
 800586c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	77fb      	strb	r3, [r7, #31]
 800587a:	e000      	b.n	800587e <HAL_SPI_Transmit+0x24e>
  }

error:
 800587c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800588e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3720      	adds	r7, #32
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e0e3      	b.n	8005a80 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058c6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80058ce:	7dbb      	ldrb	r3, [r7, #22]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d00d      	beq.n	80058f0 <HAL_SPI_TransmitReceive_DMA+0x58>
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058da:	d106      	bne.n	80058ea <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <HAL_SPI_TransmitReceive_DMA+0x52>
 80058e4:	7dbb      	ldrb	r3, [r7, #22]
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d002      	beq.n	80058f0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80058ea:	2302      	movs	r3, #2
 80058ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058ee:	e0c2      	b.n	8005a76 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d005      	beq.n	8005902 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80058fc:	887b      	ldrh	r3, [r7, #2]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d102      	bne.n	8005908 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005906:	e0b6      	b.n	8005a76 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b04      	cmp	r3, #4
 8005912:	d003      	beq.n	800591c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2205      	movs	r2, #5
 8005918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	887a      	ldrh	r2, [r7, #2]
 800592c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	887a      	ldrh	r2, [r7, #2]
 8005932:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	887a      	ldrh	r2, [r7, #2]
 800593e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	887a      	ldrh	r2, [r7, #2]
 8005944:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b04      	cmp	r3, #4
 800595c:	d108      	bne.n	8005970 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005962:	4a49      	ldr	r2, [pc, #292]	; (8005a88 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005964:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800596a:	4a48      	ldr	r2, [pc, #288]	; (8005a8c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800596c:	63da      	str	r2, [r3, #60]	; 0x3c
 800596e:	e007      	b.n	8005980 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005974:	4a46      	ldr	r2, [pc, #280]	; (8005a90 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8005976:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597c:	4a45      	ldr	r2, [pc, #276]	; (8005a94 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800597e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005984:	4a44      	ldr	r2, [pc, #272]	; (8005a98 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8005986:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800598c:	2200      	movs	r2, #0
 800598e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	330c      	adds	r3, #12
 800599a:	4619      	mov	r1, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80059a8:	f7fe fcb8 	bl	800431c <HAL_DMA_Start_IT>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00c      	beq.n	80059cc <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b6:	f043 0210 	orr.w	r2, r3, #16
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80059ca:	e054      	b.n	8005a76 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e0:	2200      	movs	r2, #0
 80059e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e8:	2200      	movs	r2, #0
 80059ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f0:	2200      	movs	r2, #0
 80059f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f8:	2200      	movs	r2, #0
 80059fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a04:	4619      	mov	r1, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	330c      	adds	r3, #12
 8005a0c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a12:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005a14:	f7fe fc82 	bl	800431c <HAL_DMA_Start_IT>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00c      	beq.n	8005a38 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a22:	f043 0210 	orr.w	r2, r3, #16
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005a36:	e01e      	b.n	8005a76 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d007      	beq.n	8005a56 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a54:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0220 	orr.w	r2, r2, #32
 8005a64:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0202 	orr.w	r2, r2, #2
 8005a74:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	08005c25 	.word	0x08005c25
 8005a8c:	08005aed 	.word	0x08005aed
 8005a90:	08005c41 	.word	0x08005c41
 8005a94:	08005b95 	.word	0x08005b95
 8005a98:	08005c5d 	.word	0x08005c5d

08005a9c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005afa:	f7fd fe45 	bl	8003788 <HAL_GetTick>
 8005afe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b0e:	d03b      	beq.n	8005b88 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0220 	bic.w	r2, r2, #32
 8005b1e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10d      	bne.n	8005b44 <SPI_DMAReceiveCplt+0x58>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b30:	d108      	bne.n	8005b44 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0203 	bic.w	r2, r2, #3
 8005b40:	605a      	str	r2, [r3, #4]
 8005b42:	e007      	b.n	8005b54 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0201 	bic.w	r2, r2, #1
 8005b52:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	2164      	movs	r1, #100	; 0x64
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f909 	bl	8005d70 <SPI_EndRxTransaction>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7ff ffa9 	bl	8005ad8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005b86:	e002      	b.n	8005b8e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f7ff ff87 	bl	8005a9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ba2:	f7fd fdf1 	bl	8003788 <HAL_GetTick>
 8005ba6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb6:	d02f      	beq.n	8005c18 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0220 	bic.w	r2, r2, #32
 8005bc6:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	2164      	movs	r1, #100	; 0x64
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f935 	bl	8005e3c <SPI_EndRxTxTransaction>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d005      	beq.n	8005be4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bdc:	f043 0220 	orr.w	r2, r3, #32
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0203 	bic.w	r2, r2, #3
 8005bf2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff ff61 	bl	8005ad8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005c16:	e002      	b.n	8005c1e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f7fb ffaf 	bl	8001b7c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f7ff ff3c 	bl	8005ab0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7ff ff38 	bl	8005ac4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c54:	bf00      	nop
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0203 	bic.w	r2, r2, #3
 8005c78:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7e:	f043 0210 	orr.w	r2, r3, #16
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f7ff ff22 	bl	8005ad8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c94:	bf00      	nop
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cac:	e04c      	b.n	8005d48 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d048      	beq.n	8005d48 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005cb6:	f7fd fd67 	bl	8003788 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d902      	bls.n	8005ccc <SPI_WaitFlagStateUntilTimeout+0x30>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d13d      	bne.n	8005d48 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ce4:	d111      	bne.n	8005d0a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cee:	d004      	beq.n	8005cfa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf8:	d107      	bne.n	8005d0a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d12:	d10f      	bne.n	8005d34 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e00f      	b.n	8005d68 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	4013      	ands	r3, r2
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	bf0c      	ite	eq
 8005d58:	2301      	moveq	r3, #1
 8005d5a:	2300      	movne	r3, #0
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d1a3      	bne.n	8005cae <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af02      	add	r7, sp, #8
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d84:	d111      	bne.n	8005daa <SPI_EndRxTransaction+0x3a>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d8e:	d004      	beq.n	8005d9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d98:	d107      	bne.n	8005daa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005db2:	d12a      	bne.n	8005e0a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dbc:	d012      	beq.n	8005de4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2180      	movs	r1, #128	; 0x80
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f7ff ff67 	bl	8005c9c <SPI_WaitFlagStateUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d02d      	beq.n	8005e30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd8:	f043 0220 	orr.w	r2, r3, #32
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e026      	b.n	8005e32 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2200      	movs	r2, #0
 8005dec:	2101      	movs	r1, #1
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f7ff ff54 	bl	8005c9c <SPI_WaitFlagStateUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d01a      	beq.n	8005e30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfe:	f043 0220 	orr.w	r2, r3, #32
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e013      	b.n	8005e32 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2200      	movs	r2, #0
 8005e12:	2101      	movs	r1, #1
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff ff41 	bl	8005c9c <SPI_WaitFlagStateUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d007      	beq.n	8005e30 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e24:	f043 0220 	orr.w	r2, r3, #32
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e000      	b.n	8005e32 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
	...

08005e3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e48:	4b1b      	ldr	r3, [pc, #108]	; (8005eb8 <SPI_EndRxTxTransaction+0x7c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1b      	ldr	r2, [pc, #108]	; (8005ebc <SPI_EndRxTxTransaction+0x80>)
 8005e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e52:	0d5b      	lsrs	r3, r3, #21
 8005e54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e58:	fb02 f303 	mul.w	r3, r2, r3
 8005e5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e66:	d112      	bne.n	8005e8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	2180      	movs	r1, #128	; 0x80
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f7ff ff12 	bl	8005c9c <SPI_WaitFlagStateUntilTimeout>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d016      	beq.n	8005eac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e82:	f043 0220 	orr.w	r2, r3, #32
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e00f      	b.n	8005eae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00a      	beq.n	8005eaa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea4:	2b80      	cmp	r3, #128	; 0x80
 8005ea6:	d0f2      	beq.n	8005e8e <SPI_EndRxTxTransaction+0x52>
 8005ea8:	e000      	b.n	8005eac <SPI_EndRxTxTransaction+0x70>
        break;
 8005eaa:	bf00      	nop
  }

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000034 	.word	0x20000034
 8005ebc:	165e9f81 	.word	0x165e9f81

08005ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e01d      	b.n	8005f0e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fd f952 	bl	8003190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f000 fae8 	bl	80064d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0201 	orr.w	r2, r2, #1
 8005f2c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b06      	cmp	r3, #6
 8005f3e:	d007      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0201 	orr.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b082      	sub	sp, #8
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e01d      	b.n	8005fac <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d106      	bne.n	8005f8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f815 	bl	8005fb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f000 fa99 	bl	80064d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fd64 	bl	8006aa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a15      	ldr	r2, [pc, #84]	; (800603c <HAL_TIM_PWM_Start+0x74>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d004      	beq.n	8005ff4 <HAL_TIM_PWM_Start+0x2c>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a14      	ldr	r2, [pc, #80]	; (8006040 <HAL_TIM_PWM_Start+0x78>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d101      	bne.n	8005ff8 <HAL_TIM_PWM_Start+0x30>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e000      	b.n	8005ffa <HAL_TIM_PWM_Start+0x32>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d007      	beq.n	800600e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800600c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b06      	cmp	r3, #6
 800601e:	d007      	beq.n	8006030 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40010000 	.word	0x40010000
 8006040:	40010400 	.word	0x40010400

08006044 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e083      	b.n	8006160 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7fd f947 	bl	8003300 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6812      	ldr	r2, [r2, #0]
 8006084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006088:	f023 0307 	bic.w	r3, r3, #7
 800608c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3304      	adds	r3, #4
 8006096:	4619      	mov	r1, r3
 8006098:	4610      	mov	r0, r2
 800609a:	f000 fa1b 	bl	80064d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c6:	f023 0303 	bic.w	r3, r3, #3
 80060ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	021b      	lsls	r3, r3, #8
 80060d6:	4313      	orrs	r3, r2
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80060e4:	f023 030c 	bic.w	r3, r3, #12
 80060e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	021b      	lsls	r3, r3, #8
 8006100:	4313      	orrs	r3, r2
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	011a      	lsls	r2, r3, #4
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	031b      	lsls	r3, r3, #12
 8006114:	4313      	orrs	r3, r2
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006122:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800612a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	4313      	orrs	r3, r2
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <HAL_TIM_Encoder_Start+0x16>
 8006178:	2b04      	cmp	r3, #4
 800617a:	d008      	beq.n	800618e <HAL_TIM_Encoder_Start+0x26>
 800617c:	e00f      	b.n	800619e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2201      	movs	r2, #1
 8006184:	2100      	movs	r1, #0
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fc8e 	bl	8006aa8 <TIM_CCxChannelCmd>
      break;
 800618c:	e016      	b.n	80061bc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2201      	movs	r2, #1
 8006194:	2104      	movs	r1, #4
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fc86 	bl	8006aa8 <TIM_CCxChannelCmd>
      break;
 800619c:	e00e      	b.n	80061bc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2201      	movs	r2, #1
 80061a4:	2100      	movs	r1, #0
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fc7e 	bl	8006aa8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2201      	movs	r2, #1
 80061b2:	2104      	movs	r1, #4
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fc77 	bl	8006aa8 <TIM_CCxChannelCmd>
      break;
 80061ba:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0201 	orr.w	r2, r2, #1
 80061ca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
	...

080061d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e0b4      	b.n	800635c <HAL_TIM_PWM_ConfigChannel+0x184>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2202      	movs	r2, #2
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b0c      	cmp	r3, #12
 8006206:	f200 809f 	bhi.w	8006348 <HAL_TIM_PWM_ConfigChannel+0x170>
 800620a:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	08006245 	.word	0x08006245
 8006214:	08006349 	.word	0x08006349
 8006218:	08006349 	.word	0x08006349
 800621c:	08006349 	.word	0x08006349
 8006220:	08006285 	.word	0x08006285
 8006224:	08006349 	.word	0x08006349
 8006228:	08006349 	.word	0x08006349
 800622c:	08006349 	.word	0x08006349
 8006230:	080062c7 	.word	0x080062c7
 8006234:	08006349 	.word	0x08006349
 8006238:	08006349 	.word	0x08006349
 800623c:	08006349 	.word	0x08006349
 8006240:	08006307 	.word	0x08006307
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 f9e2 	bl	8006614 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0208 	orr.w	r2, r2, #8
 800625e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0204 	bic.w	r2, r2, #4
 800626e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6999      	ldr	r1, [r3, #24]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	691a      	ldr	r2, [r3, #16]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	619a      	str	r2, [r3, #24]
      break;
 8006282:	e062      	b.n	800634a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68b9      	ldr	r1, [r7, #8]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fa32 	bl	80066f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800629e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699a      	ldr	r2, [r3, #24]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6999      	ldr	r1, [r3, #24]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	021a      	lsls	r2, r3, #8
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	619a      	str	r2, [r3, #24]
      break;
 80062c4:	e041      	b.n	800634a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68b9      	ldr	r1, [r7, #8]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fa87 	bl	80067e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0208 	orr.w	r2, r2, #8
 80062e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69da      	ldr	r2, [r3, #28]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0204 	bic.w	r2, r2, #4
 80062f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69d9      	ldr	r1, [r3, #28]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	61da      	str	r2, [r3, #28]
      break;
 8006304:	e021      	b.n	800634a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68b9      	ldr	r1, [r7, #8]
 800630c:	4618      	mov	r0, r3
 800630e:	f000 fadb 	bl	80068c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69da      	ldr	r2, [r3, #28]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69da      	ldr	r2, [r3, #28]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69d9      	ldr	r1, [r3, #28]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	021a      	lsls	r2, r3, #8
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	61da      	str	r2, [r3, #28]
      break;
 8006346:	e000      	b.n	800634a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006348:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_TIM_ConfigClockSource+0x18>
 8006378:	2302      	movs	r3, #2
 800637a:	e0a6      	b.n	80064ca <HAL_TIM_ConfigClockSource+0x166>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800639a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b40      	cmp	r3, #64	; 0x40
 80063b2:	d067      	beq.n	8006484 <HAL_TIM_ConfigClockSource+0x120>
 80063b4:	2b40      	cmp	r3, #64	; 0x40
 80063b6:	d80b      	bhi.n	80063d0 <HAL_TIM_ConfigClockSource+0x6c>
 80063b8:	2b10      	cmp	r3, #16
 80063ba:	d073      	beq.n	80064a4 <HAL_TIM_ConfigClockSource+0x140>
 80063bc:	2b10      	cmp	r3, #16
 80063be:	d802      	bhi.n	80063c6 <HAL_TIM_ConfigClockSource+0x62>
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d06f      	beq.n	80064a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80063c4:	e078      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063c6:	2b20      	cmp	r3, #32
 80063c8:	d06c      	beq.n	80064a4 <HAL_TIM_ConfigClockSource+0x140>
 80063ca:	2b30      	cmp	r3, #48	; 0x30
 80063cc:	d06a      	beq.n	80064a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80063ce:	e073      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063d0:	2b70      	cmp	r3, #112	; 0x70
 80063d2:	d00d      	beq.n	80063f0 <HAL_TIM_ConfigClockSource+0x8c>
 80063d4:	2b70      	cmp	r3, #112	; 0x70
 80063d6:	d804      	bhi.n	80063e2 <HAL_TIM_ConfigClockSource+0x7e>
 80063d8:	2b50      	cmp	r3, #80	; 0x50
 80063da:	d033      	beq.n	8006444 <HAL_TIM_ConfigClockSource+0xe0>
 80063dc:	2b60      	cmp	r3, #96	; 0x60
 80063de:	d041      	beq.n	8006464 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80063e0:	e06a      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e6:	d066      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0x152>
 80063e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ec:	d017      	beq.n	800641e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80063ee:	e063      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6818      	ldr	r0, [r3, #0]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	6899      	ldr	r1, [r3, #8]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f000 fb32 	bl	8006a68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006412:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	609a      	str	r2, [r3, #8]
      break;
 800641c:	e04c      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6899      	ldr	r1, [r3, #8]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f000 fb1b 	bl	8006a68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006440:	609a      	str	r2, [r3, #8]
      break;
 8006442:	e039      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	6859      	ldr	r1, [r3, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	461a      	mov	r2, r3
 8006452:	f000 fa8f 	bl	8006974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2150      	movs	r1, #80	; 0x50
 800645c:	4618      	mov	r0, r3
 800645e:	f000 fae8 	bl	8006a32 <TIM_ITRx_SetConfig>
      break;
 8006462:	e029      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6818      	ldr	r0, [r3, #0]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	6859      	ldr	r1, [r3, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	461a      	mov	r2, r3
 8006472:	f000 faae 	bl	80069d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2160      	movs	r1, #96	; 0x60
 800647c:	4618      	mov	r0, r3
 800647e:	f000 fad8 	bl	8006a32 <TIM_ITRx_SetConfig>
      break;
 8006482:	e019      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	6859      	ldr	r1, [r3, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	461a      	mov	r2, r3
 8006492:	f000 fa6f 	bl	8006974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2140      	movs	r1, #64	; 0x40
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fac8 	bl	8006a32 <TIM_ITRx_SetConfig>
      break;
 80064a2:	e009      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4619      	mov	r1, r3
 80064ae:	4610      	mov	r0, r2
 80064b0:	f000 fabf 	bl	8006a32 <TIM_ITRx_SetConfig>
      break;
 80064b4:	e000      	b.n	80064b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80064b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a40      	ldr	r2, [pc, #256]	; (80065e8 <TIM_Base_SetConfig+0x114>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d013      	beq.n	8006514 <TIM_Base_SetConfig+0x40>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f2:	d00f      	beq.n	8006514 <TIM_Base_SetConfig+0x40>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a3d      	ldr	r2, [pc, #244]	; (80065ec <TIM_Base_SetConfig+0x118>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00b      	beq.n	8006514 <TIM_Base_SetConfig+0x40>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a3c      	ldr	r2, [pc, #240]	; (80065f0 <TIM_Base_SetConfig+0x11c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d007      	beq.n	8006514 <TIM_Base_SetConfig+0x40>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a3b      	ldr	r2, [pc, #236]	; (80065f4 <TIM_Base_SetConfig+0x120>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <TIM_Base_SetConfig+0x40>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a3a      	ldr	r2, [pc, #232]	; (80065f8 <TIM_Base_SetConfig+0x124>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d108      	bne.n	8006526 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a2f      	ldr	r2, [pc, #188]	; (80065e8 <TIM_Base_SetConfig+0x114>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d02b      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006534:	d027      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a2c      	ldr	r2, [pc, #176]	; (80065ec <TIM_Base_SetConfig+0x118>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d023      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a2b      	ldr	r2, [pc, #172]	; (80065f0 <TIM_Base_SetConfig+0x11c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d01f      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a2a      	ldr	r2, [pc, #168]	; (80065f4 <TIM_Base_SetConfig+0x120>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d01b      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a29      	ldr	r2, [pc, #164]	; (80065f8 <TIM_Base_SetConfig+0x124>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d017      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a28      	ldr	r2, [pc, #160]	; (80065fc <TIM_Base_SetConfig+0x128>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a27      	ldr	r2, [pc, #156]	; (8006600 <TIM_Base_SetConfig+0x12c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00f      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a26      	ldr	r2, [pc, #152]	; (8006604 <TIM_Base_SetConfig+0x130>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00b      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a25      	ldr	r2, [pc, #148]	; (8006608 <TIM_Base_SetConfig+0x134>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d007      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a24      	ldr	r2, [pc, #144]	; (800660c <TIM_Base_SetConfig+0x138>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d003      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a23      	ldr	r2, [pc, #140]	; (8006610 <TIM_Base_SetConfig+0x13c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d108      	bne.n	8006598 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800658c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a0a      	ldr	r2, [pc, #40]	; (80065e8 <TIM_Base_SetConfig+0x114>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d003      	beq.n	80065cc <TIM_Base_SetConfig+0xf8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a0c      	ldr	r2, [pc, #48]	; (80065f8 <TIM_Base_SetConfig+0x124>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d103      	bne.n	80065d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	691a      	ldr	r2, [r3, #16]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	615a      	str	r2, [r3, #20]
}
 80065da:	bf00      	nop
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40010000 	.word	0x40010000
 80065ec:	40000400 	.word	0x40000400
 80065f0:	40000800 	.word	0x40000800
 80065f4:	40000c00 	.word	0x40000c00
 80065f8:	40010400 	.word	0x40010400
 80065fc:	40014000 	.word	0x40014000
 8006600:	40014400 	.word	0x40014400
 8006604:	40014800 	.word	0x40014800
 8006608:	40001800 	.word	0x40001800
 800660c:	40001c00 	.word	0x40001c00
 8006610:	40002000 	.word	0x40002000

08006614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f023 0201 	bic.w	r2, r3, #1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 0303 	bic.w	r3, r3, #3
 800664a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f023 0302 	bic.w	r3, r3, #2
 800665c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4313      	orrs	r3, r2
 8006666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a20      	ldr	r2, [pc, #128]	; (80066ec <TIM_OC1_SetConfig+0xd8>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d003      	beq.n	8006678 <TIM_OC1_SetConfig+0x64>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a1f      	ldr	r2, [pc, #124]	; (80066f0 <TIM_OC1_SetConfig+0xdc>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d10c      	bne.n	8006692 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f023 0308 	bic.w	r3, r3, #8
 800667e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f023 0304 	bic.w	r3, r3, #4
 8006690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a15      	ldr	r2, [pc, #84]	; (80066ec <TIM_OC1_SetConfig+0xd8>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d003      	beq.n	80066a2 <TIM_OC1_SetConfig+0x8e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a14      	ldr	r2, [pc, #80]	; (80066f0 <TIM_OC1_SetConfig+0xdc>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d111      	bne.n	80066c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	621a      	str	r2, [r3, #32]
}
 80066e0:	bf00      	nop
 80066e2:	371c      	adds	r7, #28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	40010000 	.word	0x40010000
 80066f0:	40010400 	.word	0x40010400

080066f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f023 0210 	bic.w	r2, r3, #16
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800672a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	021b      	lsls	r3, r3, #8
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4313      	orrs	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f023 0320 	bic.w	r3, r3, #32
 800673e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	4313      	orrs	r3, r2
 800674a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a22      	ldr	r2, [pc, #136]	; (80067d8 <TIM_OC2_SetConfig+0xe4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d003      	beq.n	800675c <TIM_OC2_SetConfig+0x68>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a21      	ldr	r2, [pc, #132]	; (80067dc <TIM_OC2_SetConfig+0xe8>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d10d      	bne.n	8006778 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006776:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a17      	ldr	r2, [pc, #92]	; (80067d8 <TIM_OC2_SetConfig+0xe4>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_OC2_SetConfig+0x94>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a16      	ldr	r2, [pc, #88]	; (80067dc <TIM_OC2_SetConfig+0xe8>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d113      	bne.n	80067b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800678e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	621a      	str	r2, [r3, #32]
}
 80067ca:	bf00      	nop
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	40010000 	.word	0x40010000
 80067dc:	40010400 	.word	0x40010400

080067e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0303 	bic.w	r3, r3, #3
 8006816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	021b      	lsls	r3, r3, #8
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a21      	ldr	r2, [pc, #132]	; (80068c0 <TIM_OC3_SetConfig+0xe0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d003      	beq.n	8006846 <TIM_OC3_SetConfig+0x66>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a20      	ldr	r2, [pc, #128]	; (80068c4 <TIM_OC3_SetConfig+0xe4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d10d      	bne.n	8006862 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800684c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a16      	ldr	r2, [pc, #88]	; (80068c0 <TIM_OC3_SetConfig+0xe0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d003      	beq.n	8006872 <TIM_OC3_SetConfig+0x92>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a15      	ldr	r2, [pc, #84]	; (80068c4 <TIM_OC3_SetConfig+0xe4>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d113      	bne.n	800689a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4313      	orrs	r3, r2
 8006898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	621a      	str	r2, [r3, #32]
}
 80068b4:	bf00      	nop
 80068b6:	371c      	adds	r7, #28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	40010000 	.word	0x40010000
 80068c4:	40010400 	.word	0x40010400

080068c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	021b      	lsls	r3, r3, #8
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	031b      	lsls	r3, r3, #12
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a12      	ldr	r2, [pc, #72]	; (800696c <TIM_OC4_SetConfig+0xa4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d003      	beq.n	8006930 <TIM_OC4_SetConfig+0x68>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a11      	ldr	r2, [pc, #68]	; (8006970 <TIM_OC4_SetConfig+0xa8>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d109      	bne.n	8006944 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	019b      	lsls	r3, r3, #6
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	4313      	orrs	r3, r2
 8006942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	621a      	str	r2, [r3, #32]
}
 800695e:	bf00      	nop
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40010000 	.word	0x40010000
 8006970:	40010400 	.word	0x40010400

08006974 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006974:	b480      	push	{r7}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	f023 0201 	bic.w	r2, r3, #1
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800699e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f023 030a 	bic.w	r3, r3, #10
 80069b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	621a      	str	r2, [r3, #32]
}
 80069c6:	bf00      	nop
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b087      	sub	sp, #28
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f023 0210 	bic.w	r2, r3, #16
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	031b      	lsls	r3, r3, #12
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	621a      	str	r2, [r3, #32]
}
 8006a26:	bf00      	nop
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b085      	sub	sp, #20
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f043 0307 	orr.w	r3, r3, #7
 8006a54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	609a      	str	r2, [r3, #8]
}
 8006a5c:	bf00      	nop
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	021a      	lsls	r2, r3, #8
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	609a      	str	r2, [r3, #8]
}
 8006a9c:	bf00      	nop
 8006a9e:	371c      	adds	r7, #28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f003 031f 	and.w	r3, r3, #31
 8006aba:	2201      	movs	r2, #1
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a1a      	ldr	r2, [r3, #32]
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	43db      	mvns	r3, r3
 8006aca:	401a      	ands	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a1a      	ldr	r2, [r3, #32]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f003 031f 	and.w	r3, r3, #31
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	621a      	str	r2, [r3, #32]
}
 8006ae6:	bf00      	nop
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
	...

08006af4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d101      	bne.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e05a      	b.n	8006bc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a21      	ldr	r2, [pc, #132]	; (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d022      	beq.n	8006b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b58:	d01d      	beq.n	8006b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a1d      	ldr	r2, [pc, #116]	; (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d018      	beq.n	8006b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a1b      	ldr	r2, [pc, #108]	; (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a1a      	ldr	r2, [pc, #104]	; (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00e      	beq.n	8006b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a18      	ldr	r2, [pc, #96]	; (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d009      	beq.n	8006b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a17      	ldr	r2, [pc, #92]	; (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d004      	beq.n	8006b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a15      	ldr	r2, [pc, #84]	; (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d10c      	bne.n	8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40000400 	.word	0x40000400
 8006bd8:	40000800 	.word	0x40000800
 8006bdc:	40000c00 	.word	0x40000c00
 8006be0:	40010400 	.word	0x40010400
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40001800 	.word	0x40001800

08006bec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c04:	2302      	movs	r3, #2
 8006c06:	e03d      	b.n	8006c84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e03f      	b.n	8006d22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d106      	bne.n	8006cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7fc fc20 	bl	80034fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2224      	movs	r2, #36	; 0x24
 8006cc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68da      	ldr	r2, [r3, #12]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fd79 	bl	80077cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	691a      	ldr	r2, [r3, #16]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ce8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	695a      	ldr	r2, [r3, #20]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b088      	sub	sp, #32
 8006d2e:	af02      	add	r7, sp, #8
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	603b      	str	r3, [r7, #0]
 8006d36:	4613      	mov	r3, r2
 8006d38:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	f040 8090 	bne.w	8006e6c <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <HAL_UART_Receive+0x2e>
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e088      	b.n	8006e6e <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d101      	bne.n	8006d6a <HAL_UART_Receive+0x40>
 8006d66:	2302      	movs	r3, #2
 8006d68:	e081      	b.n	8006e6e <HAL_UART_Receive+0x144>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2222      	movs	r2, #34	; 0x22
 8006d7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006d80:	f7fc fd02 	bl	8003788 <HAL_GetTick>
 8006d84:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	88fa      	ldrh	r2, [r7, #6]
 8006d8a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	88fa      	ldrh	r2, [r7, #6]
 8006d90:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006d9a:	e05c      	b.n	8006e56 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db2:	d12b      	bne.n	8006e0c <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2120      	movs	r1, #32
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 fb83 	bl	80074ca <UART_WaitOnFlagUntilTimeout>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e04f      	b.n	8006e6e <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10c      	bne.n	8006df4 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	3302      	adds	r3, #2
 8006df0:	60bb      	str	r3, [r7, #8]
 8006df2:	e030      	b.n	8006e56 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	3301      	adds	r3, #1
 8006e08:	60bb      	str	r3, [r7, #8]
 8006e0a:	e024      	b.n	8006e56 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2200      	movs	r2, #0
 8006e14:	2120      	movs	r1, #32
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 fb57 	bl	80074ca <UART_WaitOnFlagUntilTimeout>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e023      	b.n	8006e6e <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d108      	bne.n	8006e40 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6859      	ldr	r1, [r3, #4]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	60ba      	str	r2, [r7, #8]
 8006e3a:	b2ca      	uxtb	r2, r1
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	e00a      	b.n	8006e56 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	1c59      	adds	r1, r3, #1
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e52:	b2d2      	uxtb	r2, r2
 8006e54:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d19d      	bne.n	8006d9c <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e000      	b.n	8006e6e <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006e6c:	2302      	movs	r3, #2
  }
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	4613      	mov	r3, r2
 8006e84:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b20      	cmp	r3, #32
 8006e90:	d153      	bne.n	8006f3a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <HAL_UART_Transmit_DMA+0x26>
 8006e98:	88fb      	ldrh	r3, [r7, #6]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e04c      	b.n	8006f3c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_UART_Transmit_DMA+0x38>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e045      	b.n	8006f3c <HAL_UART_Transmit_DMA+0xc4>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	88fa      	ldrh	r2, [r7, #6]
 8006ec2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	88fa      	ldrh	r2, [r7, #6]
 8006ec8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2221      	movs	r2, #33	; 0x21
 8006ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006edc:	4a19      	ldr	r2, [pc, #100]	; (8006f44 <HAL_UART_Transmit_DMA+0xcc>)
 8006ede:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee4:	4a18      	ldr	r2, [pc, #96]	; (8006f48 <HAL_UART_Transmit_DMA+0xd0>)
 8006ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eec:	4a17      	ldr	r2, [pc, #92]	; (8006f4c <HAL_UART_Transmit_DMA+0xd4>)
 8006eee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006ef8:	f107 0308 	add.w	r3, r7, #8
 8006efc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	6819      	ldr	r1, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	88fb      	ldrh	r3, [r7, #6]
 8006f10:	f7fd fa04 	bl	800431c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f1c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	695a      	ldr	r2, [r3, #20]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f34:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	e000      	b.n	8006f3c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006f3a:	2302      	movs	r3, #2
  }
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3718      	adds	r7, #24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	08007345 	.word	0x08007345
 8006f48:	08007397 	.word	0x08007397
 8006f4c:	08007437 	.word	0x08007437

08006f50 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	d166      	bne.n	8007038 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <HAL_UART_Receive_DMA+0x26>
 8006f70:	88fb      	ldrh	r3, [r7, #6]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e05f      	b.n	800703a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_UART_Receive_DMA+0x38>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e058      	b.n	800703a <HAL_UART_Receive_DMA+0xea>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	88fa      	ldrh	r2, [r7, #6]
 8006f9a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2222      	movs	r2, #34	; 0x22
 8006fa6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fae:	4a25      	ldr	r2, [pc, #148]	; (8007044 <HAL_UART_Receive_DMA+0xf4>)
 8006fb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb6:	4a24      	ldr	r2, [pc, #144]	; (8007048 <HAL_UART_Receive_DMA+0xf8>)
 8006fb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbe:	4a23      	ldr	r2, [pc, #140]	; (800704c <HAL_UART_Receive_DMA+0xfc>)
 8006fc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006fca:	f107 0308 	add.w	r3, r7, #8
 8006fce:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	4619      	mov	r1, r3
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	88fb      	ldrh	r3, [r7, #6]
 8006fe2:	f7fd f99b 	bl	800431c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	613b      	str	r3, [r7, #16]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	613b      	str	r3, [r7, #16]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	613b      	str	r3, [r7, #16]
 8006ffa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007012:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695a      	ldr	r2, [r3, #20]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695a      	ldr	r2, [r3, #20]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007032:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	e000      	b.n	800703a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007038:	2302      	movs	r3, #2
  }
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	080073b3 	.word	0x080073b3
 8007048:	0800741b 	.word	0x0800741b
 800704c:	08007437 	.word	0x08007437

08007050 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007066:	2b80      	cmp	r3, #128	; 0x80
 8007068:	bf0c      	ite	eq
 800706a:	2301      	moveq	r3, #1
 800706c:	2300      	movne	r3, #0
 800706e:	b2db      	uxtb	r3, r3
 8007070:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b21      	cmp	r3, #33	; 0x21
 800707c:	d116      	bne.n	80070ac <HAL_UART_DMAStop+0x5c>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d013      	beq.n	80070ac <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	695a      	ldr	r2, [r3, #20]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007092:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	2b00      	cmp	r3, #0
 800709a:	d004      	beq.n	80070a6 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fd f993 	bl	80043cc <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa59 	bl	800755e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b6:	2b40      	cmp	r3, #64	; 0x40
 80070b8:	bf0c      	ite	eq
 80070ba:	2301      	moveq	r3, #1
 80070bc:	2300      	movne	r3, #0
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b22      	cmp	r3, #34	; 0x22
 80070cc:	d116      	bne.n	80070fc <HAL_UART_DMAStop+0xac>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d013      	beq.n	80070fc <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	695a      	ldr	r2, [r3, #20]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070e2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d004      	beq.n	80070f6 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fd f96b 	bl	80043cc <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fa47 	bl	800758a <UART_EndRxTransfer>
  }

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007128:	2300      	movs	r3, #0
 800712a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10d      	bne.n	800715a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	f003 0320 	and.w	r3, r3, #32
 8007144:	2b00      	cmp	r3, #0
 8007146:	d008      	beq.n	800715a <HAL_UART_IRQHandler+0x52>
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fab9 	bl	80076ca <UART_Receive_IT>
      return;
 8007158:	e0d1      	b.n	80072fe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 80b0 	beq.w	80072c2 <HAL_UART_IRQHandler+0x1ba>
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	d105      	bne.n	8007178 <HAL_UART_IRQHandler+0x70>
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 80a5 	beq.w	80072c2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <HAL_UART_IRQHandler+0x90>
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007188:	2b00      	cmp	r3, #0
 800718a:	d005      	beq.n	8007198 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007190:	f043 0201 	orr.w	r2, r3, #1
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <HAL_UART_IRQHandler+0xb0>
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b0:	f043 0202 	orr.w	r2, r3, #2
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00a      	beq.n	80071d8 <HAL_UART_IRQHandler+0xd0>
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d005      	beq.n	80071d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d0:	f043 0204 	orr.w	r2, r3, #4
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00f      	beq.n	8007202 <HAL_UART_IRQHandler+0xfa>
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	f003 0320 	and.w	r3, r3, #32
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d104      	bne.n	80071f6 <HAL_UART_IRQHandler+0xee>
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071fa:	f043 0208 	orr.w	r2, r3, #8
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d078      	beq.n	80072fc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b00      	cmp	r3, #0
 8007212:	d007      	beq.n	8007224 <HAL_UART_IRQHandler+0x11c>
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	f003 0320 	and.w	r3, r3, #32
 800721a:	2b00      	cmp	r3, #0
 800721c:	d002      	beq.n	8007224 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fa53 	bl	80076ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722e:	2b40      	cmp	r3, #64	; 0x40
 8007230:	bf0c      	ite	eq
 8007232:	2301      	moveq	r3, #1
 8007234:	2300      	movne	r3, #0
 8007236:	b2db      	uxtb	r3, r3
 8007238:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723e:	f003 0308 	and.w	r3, r3, #8
 8007242:	2b00      	cmp	r3, #0
 8007244:	d102      	bne.n	800724c <HAL_UART_IRQHandler+0x144>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d031      	beq.n	80072b0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f99c 	bl	800758a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725c:	2b40      	cmp	r3, #64	; 0x40
 800725e:	d123      	bne.n	80072a8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695a      	ldr	r2, [r3, #20]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800726e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007274:	2b00      	cmp	r3, #0
 8007276:	d013      	beq.n	80072a0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727c:	4a21      	ldr	r2, [pc, #132]	; (8007304 <HAL_UART_IRQHandler+0x1fc>)
 800727e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007284:	4618      	mov	r0, r3
 8007286:	f7fd f911 	bl	80044ac <HAL_DMA_Abort_IT>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d016      	beq.n	80072be <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800729a:	4610      	mov	r0, r2
 800729c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729e:	e00e      	b.n	80072be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f845 	bl	8007330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a6:	e00a      	b.n	80072be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f841 	bl	8007330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ae:	e006      	b.n	80072be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f83d 	bl	8007330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80072bc:	e01e      	b.n	80072fc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072be:	bf00      	nop
    return;
 80072c0:	e01c      	b.n	80072fc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d008      	beq.n	80072de <HAL_UART_IRQHandler+0x1d6>
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f989 	bl	80075ee <UART_Transmit_IT>
    return;
 80072dc:	e00f      	b.n	80072fe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00a      	beq.n	80072fe <HAL_UART_IRQHandler+0x1f6>
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d005      	beq.n	80072fe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f9d1 	bl	800769a <UART_EndTransmit_IT>
    return;
 80072f8:	bf00      	nop
 80072fa:	e000      	b.n	80072fe <HAL_UART_IRQHandler+0x1f6>
    return;
 80072fc:	bf00      	nop
  }
}
 80072fe:	3720      	adds	r7, #32
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	080075c7 	.word	0x080075c7

08007308 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007350:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735c:	2b00      	cmp	r3, #0
 800735e:	d113      	bne.n	8007388 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695a      	ldr	r2, [r3, #20]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007374:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007384:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007386:	e002      	b.n	800738e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f7fa fa09 	bl	80017a0 <HAL_UART_TxCpltCallback>
}
 800738e:	bf00      	nop
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7ff ffaf 	bl	8007308 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073aa:	bf00      	nop
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d11e      	bne.n	800740c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073e2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	695a      	ldr	r2, [r3, #20]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0201 	bic.w	r2, r2, #1
 80073f2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695a      	ldr	r2, [r3, #20]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007402:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2220      	movs	r2, #32
 8007408:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f7fa f9b5 	bl	800177c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007412:	bf00      	nop
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007426:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f7ff ff77 	bl	800731c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800742e:	bf00      	nop
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007446:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007452:	2b80      	cmp	r3, #128	; 0x80
 8007454:	bf0c      	ite	eq
 8007456:	2301      	moveq	r3, #1
 8007458:	2300      	movne	r3, #0
 800745a:	b2db      	uxtb	r3, r3
 800745c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b21      	cmp	r3, #33	; 0x21
 8007468:	d108      	bne.n	800747c <UART_DMAError+0x46>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2200      	movs	r2, #0
 8007474:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007476:	68b8      	ldr	r0, [r7, #8]
 8007478:	f000 f871 	bl	800755e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007486:	2b40      	cmp	r3, #64	; 0x40
 8007488:	bf0c      	ite	eq
 800748a:	2301      	moveq	r3, #1
 800748c:	2300      	movne	r3, #0
 800748e:	b2db      	uxtb	r3, r3
 8007490:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b22      	cmp	r3, #34	; 0x22
 800749c:	d108      	bne.n	80074b0 <UART_DMAError+0x7a>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d005      	beq.n	80074b0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2200      	movs	r2, #0
 80074a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80074aa:	68b8      	ldr	r0, [r7, #8]
 80074ac:	f000 f86d 	bl	800758a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b4:	f043 0210 	orr.w	r2, r3, #16
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074bc:	68b8      	ldr	r0, [r7, #8]
 80074be:	f7ff ff37 	bl	8007330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074c2:	bf00      	nop
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	603b      	str	r3, [r7, #0]
 80074d6:	4613      	mov	r3, r2
 80074d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074da:	e02c      	b.n	8007536 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e2:	d028      	beq.n	8007536 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d007      	beq.n	80074fa <UART_WaitOnFlagUntilTimeout+0x30>
 80074ea:	f7fc f94d 	bl	8003788 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d21d      	bcs.n	8007536 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68da      	ldr	r2, [r3, #12]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007508:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	695a      	ldr	r2, [r3, #20]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 0201 	bic.w	r2, r2, #1
 8007518:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2220      	movs	r2, #32
 800751e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2220      	movs	r2, #32
 8007526:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e00f      	b.n	8007556 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	4013      	ands	r3, r2
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	429a      	cmp	r2, r3
 8007544:	bf0c      	ite	eq
 8007546:	2301      	moveq	r3, #1
 8007548:	2300      	movne	r3, #0
 800754a:	b2db      	uxtb	r3, r3
 800754c:	461a      	mov	r2, r3
 800754e:	79fb      	ldrb	r3, [r7, #7]
 8007550:	429a      	cmp	r2, r3
 8007552:	d0c3      	beq.n	80074dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68da      	ldr	r2, [r3, #12]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007574:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075a0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695a      	ldr	r2, [r3, #20]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f022 0201 	bic.w	r2, r2, #1
 80075b0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2220      	movs	r2, #32
 80075b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f7ff fea5 	bl	8007330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075e6:	bf00      	nop
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b085      	sub	sp, #20
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b21      	cmp	r3, #33	; 0x21
 8007600:	d144      	bne.n	800768c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800760a:	d11a      	bne.n	8007642 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007620:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d105      	bne.n	8007636 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	1c9a      	adds	r2, r3, #2
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	621a      	str	r2, [r3, #32]
 8007634:	e00e      	b.n	8007654 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	621a      	str	r2, [r3, #32]
 8007640:	e008      	b.n	8007654 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	1c59      	adds	r1, r3, #1
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	6211      	str	r1, [r2, #32]
 800764c:	781a      	ldrb	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007658:	b29b      	uxth	r3, r3
 800765a:	3b01      	subs	r3, #1
 800765c:	b29b      	uxth	r3, r3
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	4619      	mov	r1, r3
 8007662:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10f      	bne.n	8007688 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007676:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007686:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	e000      	b.n	800768e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800768c:	2302      	movs	r3, #2
  }
}
 800768e:	4618      	mov	r0, r3
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68da      	ldr	r2, [r3, #12]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2220      	movs	r2, #32
 80076b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7fa f870 	bl	80017a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b22      	cmp	r3, #34	; 0x22
 80076dc:	d171      	bne.n	80077c2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e6:	d123      	bne.n	8007730 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ec:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10e      	bne.n	8007714 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770c:	1c9a      	adds	r2, r3, #2
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	629a      	str	r2, [r3, #40]	; 0x28
 8007712:	e029      	b.n	8007768 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	b29b      	uxth	r3, r3
 800771c:	b2db      	uxtb	r3, r3
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	629a      	str	r2, [r3, #40]	; 0x28
 800772e:	e01b      	b.n	8007768 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10a      	bne.n	800774e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6858      	ldr	r0, [r3, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007742:	1c59      	adds	r1, r3, #1
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	6291      	str	r1, [r2, #40]	; 0x28
 8007748:	b2c2      	uxtb	r2, r0
 800774a:	701a      	strb	r2, [r3, #0]
 800774c:	e00c      	b.n	8007768 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	b2da      	uxtb	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	1c58      	adds	r0, r3, #1
 800775c:	6879      	ldr	r1, [r7, #4]
 800775e:	6288      	str	r0, [r1, #40]	; 0x28
 8007760:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007764:	b2d2      	uxtb	r2, r2
 8007766:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800776c:	b29b      	uxth	r3, r3
 800776e:	3b01      	subs	r3, #1
 8007770:	b29b      	uxth	r3, r3
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	4619      	mov	r1, r3
 8007776:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007778:	2b00      	cmp	r3, #0
 800777a:	d120      	bne.n	80077be <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68da      	ldr	r2, [r3, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 0220 	bic.w	r2, r2, #32
 800778a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800779a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	695a      	ldr	r2, [r3, #20]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 0201 	bic.w	r2, r2, #1
 80077aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2220      	movs	r2, #32
 80077b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7f9 ffe1 	bl	800177c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	e002      	b.n	80077c4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	e000      	b.n	80077c4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80077c2:	2302      	movs	r3, #2
  }
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d0:	b085      	sub	sp, #20
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68da      	ldr	r2, [r3, #12]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	431a      	orrs	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	431a      	orrs	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	4313      	orrs	r3, r2
 8007802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800780e:	f023 030c 	bic.w	r3, r3, #12
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	6812      	ldr	r2, [r2, #0]
 8007816:	68f9      	ldr	r1, [r7, #12]
 8007818:	430b      	orrs	r3, r1
 800781a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800783a:	f040 8199 	bne.w	8007b70 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4ac6      	ldr	r2, [pc, #792]	; (8007b5c <UART_SetConfig+0x390>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d00f      	beq.n	8007868 <UART_SetConfig+0x9c>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4ac4      	ldr	r2, [pc, #784]	; (8007b60 <UART_SetConfig+0x394>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d00a      	beq.n	8007868 <UART_SetConfig+0x9c>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4ac3      	ldr	r2, [pc, #780]	; (8007b64 <UART_SetConfig+0x398>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d005      	beq.n	8007868 <UART_SetConfig+0x9c>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4ac1      	ldr	r2, [pc, #772]	; (8007b68 <UART_SetConfig+0x39c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	f040 80bd 	bne.w	80079e2 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007868:	f7fd fc28 	bl	80050bc <HAL_RCC_GetPCLK2Freq>
 800786c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	461d      	mov	r5, r3
 8007872:	f04f 0600 	mov.w	r6, #0
 8007876:	46a8      	mov	r8, r5
 8007878:	46b1      	mov	r9, r6
 800787a:	eb18 0308 	adds.w	r3, r8, r8
 800787e:	eb49 0409 	adc.w	r4, r9, r9
 8007882:	4698      	mov	r8, r3
 8007884:	46a1      	mov	r9, r4
 8007886:	eb18 0805 	adds.w	r8, r8, r5
 800788a:	eb49 0906 	adc.w	r9, r9, r6
 800788e:	f04f 0100 	mov.w	r1, #0
 8007892:	f04f 0200 	mov.w	r2, #0
 8007896:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800789a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800789e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80078a2:	4688      	mov	r8, r1
 80078a4:	4691      	mov	r9, r2
 80078a6:	eb18 0005 	adds.w	r0, r8, r5
 80078aa:	eb49 0106 	adc.w	r1, r9, r6
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	461d      	mov	r5, r3
 80078b4:	f04f 0600 	mov.w	r6, #0
 80078b8:	196b      	adds	r3, r5, r5
 80078ba:	eb46 0406 	adc.w	r4, r6, r6
 80078be:	461a      	mov	r2, r3
 80078c0:	4623      	mov	r3, r4
 80078c2:	f7f9 fb17 	bl	8000ef4 <__aeabi_uldivmod>
 80078c6:	4603      	mov	r3, r0
 80078c8:	460c      	mov	r4, r1
 80078ca:	461a      	mov	r2, r3
 80078cc:	4ba7      	ldr	r3, [pc, #668]	; (8007b6c <UART_SetConfig+0x3a0>)
 80078ce:	fba3 2302 	umull	r2, r3, r3, r2
 80078d2:	095b      	lsrs	r3, r3, #5
 80078d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	461d      	mov	r5, r3
 80078dc:	f04f 0600 	mov.w	r6, #0
 80078e0:	46a9      	mov	r9, r5
 80078e2:	46b2      	mov	sl, r6
 80078e4:	eb19 0309 	adds.w	r3, r9, r9
 80078e8:	eb4a 040a 	adc.w	r4, sl, sl
 80078ec:	4699      	mov	r9, r3
 80078ee:	46a2      	mov	sl, r4
 80078f0:	eb19 0905 	adds.w	r9, r9, r5
 80078f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80078f8:	f04f 0100 	mov.w	r1, #0
 80078fc:	f04f 0200 	mov.w	r2, #0
 8007900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007904:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007908:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800790c:	4689      	mov	r9, r1
 800790e:	4692      	mov	sl, r2
 8007910:	eb19 0005 	adds.w	r0, r9, r5
 8007914:	eb4a 0106 	adc.w	r1, sl, r6
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	461d      	mov	r5, r3
 800791e:	f04f 0600 	mov.w	r6, #0
 8007922:	196b      	adds	r3, r5, r5
 8007924:	eb46 0406 	adc.w	r4, r6, r6
 8007928:	461a      	mov	r2, r3
 800792a:	4623      	mov	r3, r4
 800792c:	f7f9 fae2 	bl	8000ef4 <__aeabi_uldivmod>
 8007930:	4603      	mov	r3, r0
 8007932:	460c      	mov	r4, r1
 8007934:	461a      	mov	r2, r3
 8007936:	4b8d      	ldr	r3, [pc, #564]	; (8007b6c <UART_SetConfig+0x3a0>)
 8007938:	fba3 1302 	umull	r1, r3, r3, r2
 800793c:	095b      	lsrs	r3, r3, #5
 800793e:	2164      	movs	r1, #100	; 0x64
 8007940:	fb01 f303 	mul.w	r3, r1, r3
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	00db      	lsls	r3, r3, #3
 8007948:	3332      	adds	r3, #50	; 0x32
 800794a:	4a88      	ldr	r2, [pc, #544]	; (8007b6c <UART_SetConfig+0x3a0>)
 800794c:	fba2 2303 	umull	r2, r3, r2, r3
 8007950:	095b      	lsrs	r3, r3, #5
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007958:	4498      	add	r8, r3
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	461d      	mov	r5, r3
 800795e:	f04f 0600 	mov.w	r6, #0
 8007962:	46a9      	mov	r9, r5
 8007964:	46b2      	mov	sl, r6
 8007966:	eb19 0309 	adds.w	r3, r9, r9
 800796a:	eb4a 040a 	adc.w	r4, sl, sl
 800796e:	4699      	mov	r9, r3
 8007970:	46a2      	mov	sl, r4
 8007972:	eb19 0905 	adds.w	r9, r9, r5
 8007976:	eb4a 0a06 	adc.w	sl, sl, r6
 800797a:	f04f 0100 	mov.w	r1, #0
 800797e:	f04f 0200 	mov.w	r2, #0
 8007982:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007986:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800798a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800798e:	4689      	mov	r9, r1
 8007990:	4692      	mov	sl, r2
 8007992:	eb19 0005 	adds.w	r0, r9, r5
 8007996:	eb4a 0106 	adc.w	r1, sl, r6
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	461d      	mov	r5, r3
 80079a0:	f04f 0600 	mov.w	r6, #0
 80079a4:	196b      	adds	r3, r5, r5
 80079a6:	eb46 0406 	adc.w	r4, r6, r6
 80079aa:	461a      	mov	r2, r3
 80079ac:	4623      	mov	r3, r4
 80079ae:	f7f9 faa1 	bl	8000ef4 <__aeabi_uldivmod>
 80079b2:	4603      	mov	r3, r0
 80079b4:	460c      	mov	r4, r1
 80079b6:	461a      	mov	r2, r3
 80079b8:	4b6c      	ldr	r3, [pc, #432]	; (8007b6c <UART_SetConfig+0x3a0>)
 80079ba:	fba3 1302 	umull	r1, r3, r3, r2
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	2164      	movs	r1, #100	; 0x64
 80079c2:	fb01 f303 	mul.w	r3, r1, r3
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	3332      	adds	r3, #50	; 0x32
 80079cc:	4a67      	ldr	r2, [pc, #412]	; (8007b6c <UART_SetConfig+0x3a0>)
 80079ce:	fba2 2303 	umull	r2, r3, r2, r3
 80079d2:	095b      	lsrs	r3, r3, #5
 80079d4:	f003 0207 	and.w	r2, r3, #7
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4442      	add	r2, r8
 80079de:	609a      	str	r2, [r3, #8]
 80079e0:	e27d      	b.n	8007ede <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079e2:	f7fd fb57 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 80079e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	461d      	mov	r5, r3
 80079ec:	f04f 0600 	mov.w	r6, #0
 80079f0:	46a8      	mov	r8, r5
 80079f2:	46b1      	mov	r9, r6
 80079f4:	eb18 0308 	adds.w	r3, r8, r8
 80079f8:	eb49 0409 	adc.w	r4, r9, r9
 80079fc:	4698      	mov	r8, r3
 80079fe:	46a1      	mov	r9, r4
 8007a00:	eb18 0805 	adds.w	r8, r8, r5
 8007a04:	eb49 0906 	adc.w	r9, r9, r6
 8007a08:	f04f 0100 	mov.w	r1, #0
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a1c:	4688      	mov	r8, r1
 8007a1e:	4691      	mov	r9, r2
 8007a20:	eb18 0005 	adds.w	r0, r8, r5
 8007a24:	eb49 0106 	adc.w	r1, r9, r6
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	461d      	mov	r5, r3
 8007a2e:	f04f 0600 	mov.w	r6, #0
 8007a32:	196b      	adds	r3, r5, r5
 8007a34:	eb46 0406 	adc.w	r4, r6, r6
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4623      	mov	r3, r4
 8007a3c:	f7f9 fa5a 	bl	8000ef4 <__aeabi_uldivmod>
 8007a40:	4603      	mov	r3, r0
 8007a42:	460c      	mov	r4, r1
 8007a44:	461a      	mov	r2, r3
 8007a46:	4b49      	ldr	r3, [pc, #292]	; (8007b6c <UART_SetConfig+0x3a0>)
 8007a48:	fba3 2302 	umull	r2, r3, r3, r2
 8007a4c:	095b      	lsrs	r3, r3, #5
 8007a4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	461d      	mov	r5, r3
 8007a56:	f04f 0600 	mov.w	r6, #0
 8007a5a:	46a9      	mov	r9, r5
 8007a5c:	46b2      	mov	sl, r6
 8007a5e:	eb19 0309 	adds.w	r3, r9, r9
 8007a62:	eb4a 040a 	adc.w	r4, sl, sl
 8007a66:	4699      	mov	r9, r3
 8007a68:	46a2      	mov	sl, r4
 8007a6a:	eb19 0905 	adds.w	r9, r9, r5
 8007a6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a72:	f04f 0100 	mov.w	r1, #0
 8007a76:	f04f 0200 	mov.w	r2, #0
 8007a7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a86:	4689      	mov	r9, r1
 8007a88:	4692      	mov	sl, r2
 8007a8a:	eb19 0005 	adds.w	r0, r9, r5
 8007a8e:	eb4a 0106 	adc.w	r1, sl, r6
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	461d      	mov	r5, r3
 8007a98:	f04f 0600 	mov.w	r6, #0
 8007a9c:	196b      	adds	r3, r5, r5
 8007a9e:	eb46 0406 	adc.w	r4, r6, r6
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	4623      	mov	r3, r4
 8007aa6:	f7f9 fa25 	bl	8000ef4 <__aeabi_uldivmod>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	460c      	mov	r4, r1
 8007aae:	461a      	mov	r2, r3
 8007ab0:	4b2e      	ldr	r3, [pc, #184]	; (8007b6c <UART_SetConfig+0x3a0>)
 8007ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ab6:	095b      	lsrs	r3, r3, #5
 8007ab8:	2164      	movs	r1, #100	; 0x64
 8007aba:	fb01 f303 	mul.w	r3, r1, r3
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	00db      	lsls	r3, r3, #3
 8007ac2:	3332      	adds	r3, #50	; 0x32
 8007ac4:	4a29      	ldr	r2, [pc, #164]	; (8007b6c <UART_SetConfig+0x3a0>)
 8007ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aca:	095b      	lsrs	r3, r3, #5
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ad2:	4498      	add	r8, r3
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	461d      	mov	r5, r3
 8007ad8:	f04f 0600 	mov.w	r6, #0
 8007adc:	46a9      	mov	r9, r5
 8007ade:	46b2      	mov	sl, r6
 8007ae0:	eb19 0309 	adds.w	r3, r9, r9
 8007ae4:	eb4a 040a 	adc.w	r4, sl, sl
 8007ae8:	4699      	mov	r9, r3
 8007aea:	46a2      	mov	sl, r4
 8007aec:	eb19 0905 	adds.w	r9, r9, r5
 8007af0:	eb4a 0a06 	adc.w	sl, sl, r6
 8007af4:	f04f 0100 	mov.w	r1, #0
 8007af8:	f04f 0200 	mov.w	r2, #0
 8007afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b08:	4689      	mov	r9, r1
 8007b0a:	4692      	mov	sl, r2
 8007b0c:	eb19 0005 	adds.w	r0, r9, r5
 8007b10:	eb4a 0106 	adc.w	r1, sl, r6
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	461d      	mov	r5, r3
 8007b1a:	f04f 0600 	mov.w	r6, #0
 8007b1e:	196b      	adds	r3, r5, r5
 8007b20:	eb46 0406 	adc.w	r4, r6, r6
 8007b24:	461a      	mov	r2, r3
 8007b26:	4623      	mov	r3, r4
 8007b28:	f7f9 f9e4 	bl	8000ef4 <__aeabi_uldivmod>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	460c      	mov	r4, r1
 8007b30:	461a      	mov	r2, r3
 8007b32:	4b0e      	ldr	r3, [pc, #56]	; (8007b6c <UART_SetConfig+0x3a0>)
 8007b34:	fba3 1302 	umull	r1, r3, r3, r2
 8007b38:	095b      	lsrs	r3, r3, #5
 8007b3a:	2164      	movs	r1, #100	; 0x64
 8007b3c:	fb01 f303 	mul.w	r3, r1, r3
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	3332      	adds	r3, #50	; 0x32
 8007b46:	4a09      	ldr	r2, [pc, #36]	; (8007b6c <UART_SetConfig+0x3a0>)
 8007b48:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4c:	095b      	lsrs	r3, r3, #5
 8007b4e:	f003 0207 	and.w	r2, r3, #7
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4442      	add	r2, r8
 8007b58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007b5a:	e1c0      	b.n	8007ede <UART_SetConfig+0x712>
 8007b5c:	40011000 	.word	0x40011000
 8007b60:	40011400 	.word	0x40011400
 8007b64:	40011800 	.word	0x40011800
 8007b68:	40011c00 	.word	0x40011c00
 8007b6c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4adc      	ldr	r2, [pc, #880]	; (8007ee8 <UART_SetConfig+0x71c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d00f      	beq.n	8007b9a <UART_SetConfig+0x3ce>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4adb      	ldr	r2, [pc, #876]	; (8007eec <UART_SetConfig+0x720>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00a      	beq.n	8007b9a <UART_SetConfig+0x3ce>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4ad9      	ldr	r2, [pc, #868]	; (8007ef0 <UART_SetConfig+0x724>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d005      	beq.n	8007b9a <UART_SetConfig+0x3ce>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4ad8      	ldr	r2, [pc, #864]	; (8007ef4 <UART_SetConfig+0x728>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	f040 80d1 	bne.w	8007d3c <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b9a:	f7fd fa8f 	bl	80050bc <HAL_RCC_GetPCLK2Freq>
 8007b9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	469a      	mov	sl, r3
 8007ba4:	f04f 0b00 	mov.w	fp, #0
 8007ba8:	46d0      	mov	r8, sl
 8007baa:	46d9      	mov	r9, fp
 8007bac:	eb18 0308 	adds.w	r3, r8, r8
 8007bb0:	eb49 0409 	adc.w	r4, r9, r9
 8007bb4:	4698      	mov	r8, r3
 8007bb6:	46a1      	mov	r9, r4
 8007bb8:	eb18 080a 	adds.w	r8, r8, sl
 8007bbc:	eb49 090b 	adc.w	r9, r9, fp
 8007bc0:	f04f 0100 	mov.w	r1, #0
 8007bc4:	f04f 0200 	mov.w	r2, #0
 8007bc8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007bcc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007bd0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007bd4:	4688      	mov	r8, r1
 8007bd6:	4691      	mov	r9, r2
 8007bd8:	eb1a 0508 	adds.w	r5, sl, r8
 8007bdc:	eb4b 0609 	adc.w	r6, fp, r9
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	4619      	mov	r1, r3
 8007be6:	f04f 0200 	mov.w	r2, #0
 8007bea:	f04f 0300 	mov.w	r3, #0
 8007bee:	f04f 0400 	mov.w	r4, #0
 8007bf2:	0094      	lsls	r4, r2, #2
 8007bf4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bf8:	008b      	lsls	r3, r1, #2
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4623      	mov	r3, r4
 8007bfe:	4628      	mov	r0, r5
 8007c00:	4631      	mov	r1, r6
 8007c02:	f7f9 f977 	bl	8000ef4 <__aeabi_uldivmod>
 8007c06:	4603      	mov	r3, r0
 8007c08:	460c      	mov	r4, r1
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	4bba      	ldr	r3, [pc, #744]	; (8007ef8 <UART_SetConfig+0x72c>)
 8007c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c12:	095b      	lsrs	r3, r3, #5
 8007c14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	469b      	mov	fp, r3
 8007c1c:	f04f 0c00 	mov.w	ip, #0
 8007c20:	46d9      	mov	r9, fp
 8007c22:	46e2      	mov	sl, ip
 8007c24:	eb19 0309 	adds.w	r3, r9, r9
 8007c28:	eb4a 040a 	adc.w	r4, sl, sl
 8007c2c:	4699      	mov	r9, r3
 8007c2e:	46a2      	mov	sl, r4
 8007c30:	eb19 090b 	adds.w	r9, r9, fp
 8007c34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c38:	f04f 0100 	mov.w	r1, #0
 8007c3c:	f04f 0200 	mov.w	r2, #0
 8007c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c4c:	4689      	mov	r9, r1
 8007c4e:	4692      	mov	sl, r2
 8007c50:	eb1b 0509 	adds.w	r5, fp, r9
 8007c54:	eb4c 060a 	adc.w	r6, ip, sl
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	f04f 0300 	mov.w	r3, #0
 8007c66:	f04f 0400 	mov.w	r4, #0
 8007c6a:	0094      	lsls	r4, r2, #2
 8007c6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c70:	008b      	lsls	r3, r1, #2
 8007c72:	461a      	mov	r2, r3
 8007c74:	4623      	mov	r3, r4
 8007c76:	4628      	mov	r0, r5
 8007c78:	4631      	mov	r1, r6
 8007c7a:	f7f9 f93b 	bl	8000ef4 <__aeabi_uldivmod>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	460c      	mov	r4, r1
 8007c82:	461a      	mov	r2, r3
 8007c84:	4b9c      	ldr	r3, [pc, #624]	; (8007ef8 <UART_SetConfig+0x72c>)
 8007c86:	fba3 1302 	umull	r1, r3, r3, r2
 8007c8a:	095b      	lsrs	r3, r3, #5
 8007c8c:	2164      	movs	r1, #100	; 0x64
 8007c8e:	fb01 f303 	mul.w	r3, r1, r3
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	011b      	lsls	r3, r3, #4
 8007c96:	3332      	adds	r3, #50	; 0x32
 8007c98:	4a97      	ldr	r2, [pc, #604]	; (8007ef8 <UART_SetConfig+0x72c>)
 8007c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9e:	095b      	lsrs	r3, r3, #5
 8007ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ca4:	4498      	add	r8, r3
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	469b      	mov	fp, r3
 8007caa:	f04f 0c00 	mov.w	ip, #0
 8007cae:	46d9      	mov	r9, fp
 8007cb0:	46e2      	mov	sl, ip
 8007cb2:	eb19 0309 	adds.w	r3, r9, r9
 8007cb6:	eb4a 040a 	adc.w	r4, sl, sl
 8007cba:	4699      	mov	r9, r3
 8007cbc:	46a2      	mov	sl, r4
 8007cbe:	eb19 090b 	adds.w	r9, r9, fp
 8007cc2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007cc6:	f04f 0100 	mov.w	r1, #0
 8007cca:	f04f 0200 	mov.w	r2, #0
 8007cce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cda:	4689      	mov	r9, r1
 8007cdc:	4692      	mov	sl, r2
 8007cde:	eb1b 0509 	adds.w	r5, fp, r9
 8007ce2:	eb4c 060a 	adc.w	r6, ip, sl
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	4619      	mov	r1, r3
 8007cec:	f04f 0200 	mov.w	r2, #0
 8007cf0:	f04f 0300 	mov.w	r3, #0
 8007cf4:	f04f 0400 	mov.w	r4, #0
 8007cf8:	0094      	lsls	r4, r2, #2
 8007cfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cfe:	008b      	lsls	r3, r1, #2
 8007d00:	461a      	mov	r2, r3
 8007d02:	4623      	mov	r3, r4
 8007d04:	4628      	mov	r0, r5
 8007d06:	4631      	mov	r1, r6
 8007d08:	f7f9 f8f4 	bl	8000ef4 <__aeabi_uldivmod>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	460c      	mov	r4, r1
 8007d10:	461a      	mov	r2, r3
 8007d12:	4b79      	ldr	r3, [pc, #484]	; (8007ef8 <UART_SetConfig+0x72c>)
 8007d14:	fba3 1302 	umull	r1, r3, r3, r2
 8007d18:	095b      	lsrs	r3, r3, #5
 8007d1a:	2164      	movs	r1, #100	; 0x64
 8007d1c:	fb01 f303 	mul.w	r3, r1, r3
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	3332      	adds	r3, #50	; 0x32
 8007d26:	4a74      	ldr	r2, [pc, #464]	; (8007ef8 <UART_SetConfig+0x72c>)
 8007d28:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2c:	095b      	lsrs	r3, r3, #5
 8007d2e:	f003 020f 	and.w	r2, r3, #15
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4442      	add	r2, r8
 8007d38:	609a      	str	r2, [r3, #8]
 8007d3a:	e0d0      	b.n	8007ede <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d3c:	f7fd f9aa 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 8007d40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	469a      	mov	sl, r3
 8007d46:	f04f 0b00 	mov.w	fp, #0
 8007d4a:	46d0      	mov	r8, sl
 8007d4c:	46d9      	mov	r9, fp
 8007d4e:	eb18 0308 	adds.w	r3, r8, r8
 8007d52:	eb49 0409 	adc.w	r4, r9, r9
 8007d56:	4698      	mov	r8, r3
 8007d58:	46a1      	mov	r9, r4
 8007d5a:	eb18 080a 	adds.w	r8, r8, sl
 8007d5e:	eb49 090b 	adc.w	r9, r9, fp
 8007d62:	f04f 0100 	mov.w	r1, #0
 8007d66:	f04f 0200 	mov.w	r2, #0
 8007d6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d76:	4688      	mov	r8, r1
 8007d78:	4691      	mov	r9, r2
 8007d7a:	eb1a 0508 	adds.w	r5, sl, r8
 8007d7e:	eb4b 0609 	adc.w	r6, fp, r9
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	4619      	mov	r1, r3
 8007d88:	f04f 0200 	mov.w	r2, #0
 8007d8c:	f04f 0300 	mov.w	r3, #0
 8007d90:	f04f 0400 	mov.w	r4, #0
 8007d94:	0094      	lsls	r4, r2, #2
 8007d96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d9a:	008b      	lsls	r3, r1, #2
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	4623      	mov	r3, r4
 8007da0:	4628      	mov	r0, r5
 8007da2:	4631      	mov	r1, r6
 8007da4:	f7f9 f8a6 	bl	8000ef4 <__aeabi_uldivmod>
 8007da8:	4603      	mov	r3, r0
 8007daa:	460c      	mov	r4, r1
 8007dac:	461a      	mov	r2, r3
 8007dae:	4b52      	ldr	r3, [pc, #328]	; (8007ef8 <UART_SetConfig+0x72c>)
 8007db0:	fba3 2302 	umull	r2, r3, r3, r2
 8007db4:	095b      	lsrs	r3, r3, #5
 8007db6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	469b      	mov	fp, r3
 8007dbe:	f04f 0c00 	mov.w	ip, #0
 8007dc2:	46d9      	mov	r9, fp
 8007dc4:	46e2      	mov	sl, ip
 8007dc6:	eb19 0309 	adds.w	r3, r9, r9
 8007dca:	eb4a 040a 	adc.w	r4, sl, sl
 8007dce:	4699      	mov	r9, r3
 8007dd0:	46a2      	mov	sl, r4
 8007dd2:	eb19 090b 	adds.w	r9, r9, fp
 8007dd6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007dda:	f04f 0100 	mov.w	r1, #0
 8007dde:	f04f 0200 	mov.w	r2, #0
 8007de2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007de6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007dea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007dee:	4689      	mov	r9, r1
 8007df0:	4692      	mov	sl, r2
 8007df2:	eb1b 0509 	adds.w	r5, fp, r9
 8007df6:	eb4c 060a 	adc.w	r6, ip, sl
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	f04f 0200 	mov.w	r2, #0
 8007e04:	f04f 0300 	mov.w	r3, #0
 8007e08:	f04f 0400 	mov.w	r4, #0
 8007e0c:	0094      	lsls	r4, r2, #2
 8007e0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e12:	008b      	lsls	r3, r1, #2
 8007e14:	461a      	mov	r2, r3
 8007e16:	4623      	mov	r3, r4
 8007e18:	4628      	mov	r0, r5
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	f7f9 f86a 	bl	8000ef4 <__aeabi_uldivmod>
 8007e20:	4603      	mov	r3, r0
 8007e22:	460c      	mov	r4, r1
 8007e24:	461a      	mov	r2, r3
 8007e26:	4b34      	ldr	r3, [pc, #208]	; (8007ef8 <UART_SetConfig+0x72c>)
 8007e28:	fba3 1302 	umull	r1, r3, r3, r2
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	2164      	movs	r1, #100	; 0x64
 8007e30:	fb01 f303 	mul.w	r3, r1, r3
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	3332      	adds	r3, #50	; 0x32
 8007e3a:	4a2f      	ldr	r2, [pc, #188]	; (8007ef8 <UART_SetConfig+0x72c>)
 8007e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e40:	095b      	lsrs	r3, r3, #5
 8007e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e46:	4498      	add	r8, r3
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	469b      	mov	fp, r3
 8007e4c:	f04f 0c00 	mov.w	ip, #0
 8007e50:	46d9      	mov	r9, fp
 8007e52:	46e2      	mov	sl, ip
 8007e54:	eb19 0309 	adds.w	r3, r9, r9
 8007e58:	eb4a 040a 	adc.w	r4, sl, sl
 8007e5c:	4699      	mov	r9, r3
 8007e5e:	46a2      	mov	sl, r4
 8007e60:	eb19 090b 	adds.w	r9, r9, fp
 8007e64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e68:	f04f 0100 	mov.w	r1, #0
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e7c:	4689      	mov	r9, r1
 8007e7e:	4692      	mov	sl, r2
 8007e80:	eb1b 0509 	adds.w	r5, fp, r9
 8007e84:	eb4c 060a 	adc.w	r6, ip, sl
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	f04f 0200 	mov.w	r2, #0
 8007e92:	f04f 0300 	mov.w	r3, #0
 8007e96:	f04f 0400 	mov.w	r4, #0
 8007e9a:	0094      	lsls	r4, r2, #2
 8007e9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ea0:	008b      	lsls	r3, r1, #2
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	4623      	mov	r3, r4
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	f7f9 f823 	bl	8000ef4 <__aeabi_uldivmod>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	460c      	mov	r4, r1
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	4b10      	ldr	r3, [pc, #64]	; (8007ef8 <UART_SetConfig+0x72c>)
 8007eb6:	fba3 1302 	umull	r1, r3, r3, r2
 8007eba:	095b      	lsrs	r3, r3, #5
 8007ebc:	2164      	movs	r1, #100	; 0x64
 8007ebe:	fb01 f303 	mul.w	r3, r1, r3
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	011b      	lsls	r3, r3, #4
 8007ec6:	3332      	adds	r3, #50	; 0x32
 8007ec8:	4a0b      	ldr	r2, [pc, #44]	; (8007ef8 <UART_SetConfig+0x72c>)
 8007eca:	fba2 2303 	umull	r2, r3, r2, r3
 8007ece:	095b      	lsrs	r3, r3, #5
 8007ed0:	f003 020f 	and.w	r2, r3, #15
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4442      	add	r2, r8
 8007eda:	609a      	str	r2, [r3, #8]
}
 8007edc:	e7ff      	b.n	8007ede <UART_SetConfig+0x712>
 8007ede:	bf00      	nop
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee8:	40011000 	.word	0x40011000
 8007eec:	40011400 	.word	0x40011400
 8007ef0:	40011800 	.word	0x40011800
 8007ef4:	40011c00 	.word	0x40011c00
 8007ef8:	51eb851f 	.word	0x51eb851f

08007efc <__errno>:
 8007efc:	4b01      	ldr	r3, [pc, #4]	; (8007f04 <__errno+0x8>)
 8007efe:	6818      	ldr	r0, [r3, #0]
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	20000040 	.word	0x20000040

08007f08 <__sflush_r>:
 8007f08:	898a      	ldrh	r2, [r1, #12]
 8007f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0e:	4605      	mov	r5, r0
 8007f10:	0710      	lsls	r0, r2, #28
 8007f12:	460c      	mov	r4, r1
 8007f14:	d458      	bmi.n	8007fc8 <__sflush_r+0xc0>
 8007f16:	684b      	ldr	r3, [r1, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	dc05      	bgt.n	8007f28 <__sflush_r+0x20>
 8007f1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	dc02      	bgt.n	8007f28 <__sflush_r+0x20>
 8007f22:	2000      	movs	r0, #0
 8007f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f2a:	2e00      	cmp	r6, #0
 8007f2c:	d0f9      	beq.n	8007f22 <__sflush_r+0x1a>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f34:	682f      	ldr	r7, [r5, #0]
 8007f36:	6a21      	ldr	r1, [r4, #32]
 8007f38:	602b      	str	r3, [r5, #0]
 8007f3a:	d032      	beq.n	8007fa2 <__sflush_r+0x9a>
 8007f3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f3e:	89a3      	ldrh	r3, [r4, #12]
 8007f40:	075a      	lsls	r2, r3, #29
 8007f42:	d505      	bpl.n	8007f50 <__sflush_r+0x48>
 8007f44:	6863      	ldr	r3, [r4, #4]
 8007f46:	1ac0      	subs	r0, r0, r3
 8007f48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f4a:	b10b      	cbz	r3, 8007f50 <__sflush_r+0x48>
 8007f4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f4e:	1ac0      	subs	r0, r0, r3
 8007f50:	2300      	movs	r3, #0
 8007f52:	4602      	mov	r2, r0
 8007f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f56:	6a21      	ldr	r1, [r4, #32]
 8007f58:	4628      	mov	r0, r5
 8007f5a:	47b0      	blx	r6
 8007f5c:	1c43      	adds	r3, r0, #1
 8007f5e:	89a3      	ldrh	r3, [r4, #12]
 8007f60:	d106      	bne.n	8007f70 <__sflush_r+0x68>
 8007f62:	6829      	ldr	r1, [r5, #0]
 8007f64:	291d      	cmp	r1, #29
 8007f66:	d848      	bhi.n	8007ffa <__sflush_r+0xf2>
 8007f68:	4a29      	ldr	r2, [pc, #164]	; (8008010 <__sflush_r+0x108>)
 8007f6a:	40ca      	lsrs	r2, r1
 8007f6c:	07d6      	lsls	r6, r2, #31
 8007f6e:	d544      	bpl.n	8007ffa <__sflush_r+0xf2>
 8007f70:	2200      	movs	r2, #0
 8007f72:	6062      	str	r2, [r4, #4]
 8007f74:	04d9      	lsls	r1, r3, #19
 8007f76:	6922      	ldr	r2, [r4, #16]
 8007f78:	6022      	str	r2, [r4, #0]
 8007f7a:	d504      	bpl.n	8007f86 <__sflush_r+0x7e>
 8007f7c:	1c42      	adds	r2, r0, #1
 8007f7e:	d101      	bne.n	8007f84 <__sflush_r+0x7c>
 8007f80:	682b      	ldr	r3, [r5, #0]
 8007f82:	b903      	cbnz	r3, 8007f86 <__sflush_r+0x7e>
 8007f84:	6560      	str	r0, [r4, #84]	; 0x54
 8007f86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f88:	602f      	str	r7, [r5, #0]
 8007f8a:	2900      	cmp	r1, #0
 8007f8c:	d0c9      	beq.n	8007f22 <__sflush_r+0x1a>
 8007f8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f92:	4299      	cmp	r1, r3
 8007f94:	d002      	beq.n	8007f9c <__sflush_r+0x94>
 8007f96:	4628      	mov	r0, r5
 8007f98:	f000 f96e 	bl	8008278 <_free_r>
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	6360      	str	r0, [r4, #52]	; 0x34
 8007fa0:	e7c0      	b.n	8007f24 <__sflush_r+0x1c>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	47b0      	blx	r6
 8007fa8:	1c41      	adds	r1, r0, #1
 8007faa:	d1c8      	bne.n	8007f3e <__sflush_r+0x36>
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d0c5      	beq.n	8007f3e <__sflush_r+0x36>
 8007fb2:	2b1d      	cmp	r3, #29
 8007fb4:	d001      	beq.n	8007fba <__sflush_r+0xb2>
 8007fb6:	2b16      	cmp	r3, #22
 8007fb8:	d101      	bne.n	8007fbe <__sflush_r+0xb6>
 8007fba:	602f      	str	r7, [r5, #0]
 8007fbc:	e7b1      	b.n	8007f22 <__sflush_r+0x1a>
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fc4:	81a3      	strh	r3, [r4, #12]
 8007fc6:	e7ad      	b.n	8007f24 <__sflush_r+0x1c>
 8007fc8:	690f      	ldr	r7, [r1, #16]
 8007fca:	2f00      	cmp	r7, #0
 8007fcc:	d0a9      	beq.n	8007f22 <__sflush_r+0x1a>
 8007fce:	0793      	lsls	r3, r2, #30
 8007fd0:	680e      	ldr	r6, [r1, #0]
 8007fd2:	bf08      	it	eq
 8007fd4:	694b      	ldreq	r3, [r1, #20]
 8007fd6:	600f      	str	r7, [r1, #0]
 8007fd8:	bf18      	it	ne
 8007fda:	2300      	movne	r3, #0
 8007fdc:	eba6 0807 	sub.w	r8, r6, r7
 8007fe0:	608b      	str	r3, [r1, #8]
 8007fe2:	f1b8 0f00 	cmp.w	r8, #0
 8007fe6:	dd9c      	ble.n	8007f22 <__sflush_r+0x1a>
 8007fe8:	4643      	mov	r3, r8
 8007fea:	463a      	mov	r2, r7
 8007fec:	6a21      	ldr	r1, [r4, #32]
 8007fee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	47b0      	blx	r6
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	dc06      	bgt.n	8008006 <__sflush_r+0xfe>
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ffe:	81a3      	strh	r3, [r4, #12]
 8008000:	f04f 30ff 	mov.w	r0, #4294967295
 8008004:	e78e      	b.n	8007f24 <__sflush_r+0x1c>
 8008006:	4407      	add	r7, r0
 8008008:	eba8 0800 	sub.w	r8, r8, r0
 800800c:	e7e9      	b.n	8007fe2 <__sflush_r+0xda>
 800800e:	bf00      	nop
 8008010:	20400001 	.word	0x20400001

08008014 <_fflush_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	690b      	ldr	r3, [r1, #16]
 8008018:	4605      	mov	r5, r0
 800801a:	460c      	mov	r4, r1
 800801c:	b1db      	cbz	r3, 8008056 <_fflush_r+0x42>
 800801e:	b118      	cbz	r0, 8008028 <_fflush_r+0x14>
 8008020:	6983      	ldr	r3, [r0, #24]
 8008022:	b90b      	cbnz	r3, 8008028 <_fflush_r+0x14>
 8008024:	f000 f872 	bl	800810c <__sinit>
 8008028:	4b0c      	ldr	r3, [pc, #48]	; (800805c <_fflush_r+0x48>)
 800802a:	429c      	cmp	r4, r3
 800802c:	d109      	bne.n	8008042 <_fflush_r+0x2e>
 800802e:	686c      	ldr	r4, [r5, #4]
 8008030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008034:	b17b      	cbz	r3, 8008056 <_fflush_r+0x42>
 8008036:	4621      	mov	r1, r4
 8008038:	4628      	mov	r0, r5
 800803a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800803e:	f7ff bf63 	b.w	8007f08 <__sflush_r>
 8008042:	4b07      	ldr	r3, [pc, #28]	; (8008060 <_fflush_r+0x4c>)
 8008044:	429c      	cmp	r4, r3
 8008046:	d101      	bne.n	800804c <_fflush_r+0x38>
 8008048:	68ac      	ldr	r4, [r5, #8]
 800804a:	e7f1      	b.n	8008030 <_fflush_r+0x1c>
 800804c:	4b05      	ldr	r3, [pc, #20]	; (8008064 <_fflush_r+0x50>)
 800804e:	429c      	cmp	r4, r3
 8008050:	bf08      	it	eq
 8008052:	68ec      	ldreq	r4, [r5, #12]
 8008054:	e7ec      	b.n	8008030 <_fflush_r+0x1c>
 8008056:	2000      	movs	r0, #0
 8008058:	bd38      	pop	{r3, r4, r5, pc}
 800805a:	bf00      	nop
 800805c:	0800c628 	.word	0x0800c628
 8008060:	0800c648 	.word	0x0800c648
 8008064:	0800c608 	.word	0x0800c608

08008068 <fflush>:
 8008068:	4601      	mov	r1, r0
 800806a:	b920      	cbnz	r0, 8008076 <fflush+0xe>
 800806c:	4b04      	ldr	r3, [pc, #16]	; (8008080 <fflush+0x18>)
 800806e:	4905      	ldr	r1, [pc, #20]	; (8008084 <fflush+0x1c>)
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	f000 b8b7 	b.w	80081e4 <_fwalk_reent>
 8008076:	4b04      	ldr	r3, [pc, #16]	; (8008088 <fflush+0x20>)
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	f7ff bfcb 	b.w	8008014 <_fflush_r>
 800807e:	bf00      	nop
 8008080:	0800c668 	.word	0x0800c668
 8008084:	08008015 	.word	0x08008015
 8008088:	20000040 	.word	0x20000040

0800808c <std>:
 800808c:	2300      	movs	r3, #0
 800808e:	b510      	push	{r4, lr}
 8008090:	4604      	mov	r4, r0
 8008092:	e9c0 3300 	strd	r3, r3, [r0]
 8008096:	6083      	str	r3, [r0, #8]
 8008098:	8181      	strh	r1, [r0, #12]
 800809a:	6643      	str	r3, [r0, #100]	; 0x64
 800809c:	81c2      	strh	r2, [r0, #14]
 800809e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080a2:	6183      	str	r3, [r0, #24]
 80080a4:	4619      	mov	r1, r3
 80080a6:	2208      	movs	r2, #8
 80080a8:	305c      	adds	r0, #92	; 0x5c
 80080aa:	f000 f8dd 	bl	8008268 <memset>
 80080ae:	4b05      	ldr	r3, [pc, #20]	; (80080c4 <std+0x38>)
 80080b0:	6263      	str	r3, [r4, #36]	; 0x24
 80080b2:	4b05      	ldr	r3, [pc, #20]	; (80080c8 <std+0x3c>)
 80080b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80080b6:	4b05      	ldr	r3, [pc, #20]	; (80080cc <std+0x40>)
 80080b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080ba:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <std+0x44>)
 80080bc:	6224      	str	r4, [r4, #32]
 80080be:	6323      	str	r3, [r4, #48]	; 0x30
 80080c0:	bd10      	pop	{r4, pc}
 80080c2:	bf00      	nop
 80080c4:	0800924d 	.word	0x0800924d
 80080c8:	0800926f 	.word	0x0800926f
 80080cc:	080092a7 	.word	0x080092a7
 80080d0:	080092cb 	.word	0x080092cb

080080d4 <_cleanup_r>:
 80080d4:	4901      	ldr	r1, [pc, #4]	; (80080dc <_cleanup_r+0x8>)
 80080d6:	f000 b885 	b.w	80081e4 <_fwalk_reent>
 80080da:	bf00      	nop
 80080dc:	08008015 	.word	0x08008015

080080e0 <__sfmoreglue>:
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	1e4a      	subs	r2, r1, #1
 80080e4:	2568      	movs	r5, #104	; 0x68
 80080e6:	4355      	muls	r5, r2
 80080e8:	460e      	mov	r6, r1
 80080ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080ee:	f000 f911 	bl	8008314 <_malloc_r>
 80080f2:	4604      	mov	r4, r0
 80080f4:	b140      	cbz	r0, 8008108 <__sfmoreglue+0x28>
 80080f6:	2100      	movs	r1, #0
 80080f8:	e9c0 1600 	strd	r1, r6, [r0]
 80080fc:	300c      	adds	r0, #12
 80080fe:	60a0      	str	r0, [r4, #8]
 8008100:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008104:	f000 f8b0 	bl	8008268 <memset>
 8008108:	4620      	mov	r0, r4
 800810a:	bd70      	pop	{r4, r5, r6, pc}

0800810c <__sinit>:
 800810c:	6983      	ldr	r3, [r0, #24]
 800810e:	b510      	push	{r4, lr}
 8008110:	4604      	mov	r4, r0
 8008112:	bb33      	cbnz	r3, 8008162 <__sinit+0x56>
 8008114:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008118:	6503      	str	r3, [r0, #80]	; 0x50
 800811a:	4b12      	ldr	r3, [pc, #72]	; (8008164 <__sinit+0x58>)
 800811c:	4a12      	ldr	r2, [pc, #72]	; (8008168 <__sinit+0x5c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6282      	str	r2, [r0, #40]	; 0x28
 8008122:	4298      	cmp	r0, r3
 8008124:	bf04      	itt	eq
 8008126:	2301      	moveq	r3, #1
 8008128:	6183      	streq	r3, [r0, #24]
 800812a:	f000 f81f 	bl	800816c <__sfp>
 800812e:	6060      	str	r0, [r4, #4]
 8008130:	4620      	mov	r0, r4
 8008132:	f000 f81b 	bl	800816c <__sfp>
 8008136:	60a0      	str	r0, [r4, #8]
 8008138:	4620      	mov	r0, r4
 800813a:	f000 f817 	bl	800816c <__sfp>
 800813e:	2200      	movs	r2, #0
 8008140:	60e0      	str	r0, [r4, #12]
 8008142:	2104      	movs	r1, #4
 8008144:	6860      	ldr	r0, [r4, #4]
 8008146:	f7ff ffa1 	bl	800808c <std>
 800814a:	2201      	movs	r2, #1
 800814c:	2109      	movs	r1, #9
 800814e:	68a0      	ldr	r0, [r4, #8]
 8008150:	f7ff ff9c 	bl	800808c <std>
 8008154:	2202      	movs	r2, #2
 8008156:	2112      	movs	r1, #18
 8008158:	68e0      	ldr	r0, [r4, #12]
 800815a:	f7ff ff97 	bl	800808c <std>
 800815e:	2301      	movs	r3, #1
 8008160:	61a3      	str	r3, [r4, #24]
 8008162:	bd10      	pop	{r4, pc}
 8008164:	0800c668 	.word	0x0800c668
 8008168:	080080d5 	.word	0x080080d5

0800816c <__sfp>:
 800816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816e:	4b1b      	ldr	r3, [pc, #108]	; (80081dc <__sfp+0x70>)
 8008170:	681e      	ldr	r6, [r3, #0]
 8008172:	69b3      	ldr	r3, [r6, #24]
 8008174:	4607      	mov	r7, r0
 8008176:	b913      	cbnz	r3, 800817e <__sfp+0x12>
 8008178:	4630      	mov	r0, r6
 800817a:	f7ff ffc7 	bl	800810c <__sinit>
 800817e:	3648      	adds	r6, #72	; 0x48
 8008180:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008184:	3b01      	subs	r3, #1
 8008186:	d503      	bpl.n	8008190 <__sfp+0x24>
 8008188:	6833      	ldr	r3, [r6, #0]
 800818a:	b133      	cbz	r3, 800819a <__sfp+0x2e>
 800818c:	6836      	ldr	r6, [r6, #0]
 800818e:	e7f7      	b.n	8008180 <__sfp+0x14>
 8008190:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008194:	b16d      	cbz	r5, 80081b2 <__sfp+0x46>
 8008196:	3468      	adds	r4, #104	; 0x68
 8008198:	e7f4      	b.n	8008184 <__sfp+0x18>
 800819a:	2104      	movs	r1, #4
 800819c:	4638      	mov	r0, r7
 800819e:	f7ff ff9f 	bl	80080e0 <__sfmoreglue>
 80081a2:	6030      	str	r0, [r6, #0]
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d1f1      	bne.n	800818c <__sfp+0x20>
 80081a8:	230c      	movs	r3, #12
 80081aa:	603b      	str	r3, [r7, #0]
 80081ac:	4604      	mov	r4, r0
 80081ae:	4620      	mov	r0, r4
 80081b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081b2:	4b0b      	ldr	r3, [pc, #44]	; (80081e0 <__sfp+0x74>)
 80081b4:	6665      	str	r5, [r4, #100]	; 0x64
 80081b6:	e9c4 5500 	strd	r5, r5, [r4]
 80081ba:	60a5      	str	r5, [r4, #8]
 80081bc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80081c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80081c4:	2208      	movs	r2, #8
 80081c6:	4629      	mov	r1, r5
 80081c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081cc:	f000 f84c 	bl	8008268 <memset>
 80081d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081d8:	e7e9      	b.n	80081ae <__sfp+0x42>
 80081da:	bf00      	nop
 80081dc:	0800c668 	.word	0x0800c668
 80081e0:	ffff0001 	.word	0xffff0001

080081e4 <_fwalk_reent>:
 80081e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e8:	4680      	mov	r8, r0
 80081ea:	4689      	mov	r9, r1
 80081ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081f0:	2600      	movs	r6, #0
 80081f2:	b914      	cbnz	r4, 80081fa <_fwalk_reent+0x16>
 80081f4:	4630      	mov	r0, r6
 80081f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80081fe:	3f01      	subs	r7, #1
 8008200:	d501      	bpl.n	8008206 <_fwalk_reent+0x22>
 8008202:	6824      	ldr	r4, [r4, #0]
 8008204:	e7f5      	b.n	80081f2 <_fwalk_reent+0xe>
 8008206:	89ab      	ldrh	r3, [r5, #12]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d907      	bls.n	800821c <_fwalk_reent+0x38>
 800820c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008210:	3301      	adds	r3, #1
 8008212:	d003      	beq.n	800821c <_fwalk_reent+0x38>
 8008214:	4629      	mov	r1, r5
 8008216:	4640      	mov	r0, r8
 8008218:	47c8      	blx	r9
 800821a:	4306      	orrs	r6, r0
 800821c:	3568      	adds	r5, #104	; 0x68
 800821e:	e7ee      	b.n	80081fe <_fwalk_reent+0x1a>

08008220 <__libc_init_array>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	4e0d      	ldr	r6, [pc, #52]	; (8008258 <__libc_init_array+0x38>)
 8008224:	4c0d      	ldr	r4, [pc, #52]	; (800825c <__libc_init_array+0x3c>)
 8008226:	1ba4      	subs	r4, r4, r6
 8008228:	10a4      	asrs	r4, r4, #2
 800822a:	2500      	movs	r5, #0
 800822c:	42a5      	cmp	r5, r4
 800822e:	d109      	bne.n	8008244 <__libc_init_array+0x24>
 8008230:	4e0b      	ldr	r6, [pc, #44]	; (8008260 <__libc_init_array+0x40>)
 8008232:	4c0c      	ldr	r4, [pc, #48]	; (8008264 <__libc_init_array+0x44>)
 8008234:	f004 f936 	bl	800c4a4 <_init>
 8008238:	1ba4      	subs	r4, r4, r6
 800823a:	10a4      	asrs	r4, r4, #2
 800823c:	2500      	movs	r5, #0
 800823e:	42a5      	cmp	r5, r4
 8008240:	d105      	bne.n	800824e <__libc_init_array+0x2e>
 8008242:	bd70      	pop	{r4, r5, r6, pc}
 8008244:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008248:	4798      	blx	r3
 800824a:	3501      	adds	r5, #1
 800824c:	e7ee      	b.n	800822c <__libc_init_array+0xc>
 800824e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008252:	4798      	blx	r3
 8008254:	3501      	adds	r5, #1
 8008256:	e7f2      	b.n	800823e <__libc_init_array+0x1e>
 8008258:	0800c928 	.word	0x0800c928
 800825c:	0800c928 	.word	0x0800c928
 8008260:	0800c928 	.word	0x0800c928
 8008264:	0800c92c 	.word	0x0800c92c

08008268 <memset>:
 8008268:	4402      	add	r2, r0
 800826a:	4603      	mov	r3, r0
 800826c:	4293      	cmp	r3, r2
 800826e:	d100      	bne.n	8008272 <memset+0xa>
 8008270:	4770      	bx	lr
 8008272:	f803 1b01 	strb.w	r1, [r3], #1
 8008276:	e7f9      	b.n	800826c <memset+0x4>

08008278 <_free_r>:
 8008278:	b538      	push	{r3, r4, r5, lr}
 800827a:	4605      	mov	r5, r0
 800827c:	2900      	cmp	r1, #0
 800827e:	d045      	beq.n	800830c <_free_r+0x94>
 8008280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008284:	1f0c      	subs	r4, r1, #4
 8008286:	2b00      	cmp	r3, #0
 8008288:	bfb8      	it	lt
 800828a:	18e4      	addlt	r4, r4, r3
 800828c:	f003 f90d 	bl	800b4aa <__malloc_lock>
 8008290:	4a1f      	ldr	r2, [pc, #124]	; (8008310 <_free_r+0x98>)
 8008292:	6813      	ldr	r3, [r2, #0]
 8008294:	4610      	mov	r0, r2
 8008296:	b933      	cbnz	r3, 80082a6 <_free_r+0x2e>
 8008298:	6063      	str	r3, [r4, #4]
 800829a:	6014      	str	r4, [r2, #0]
 800829c:	4628      	mov	r0, r5
 800829e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082a2:	f003 b903 	b.w	800b4ac <__malloc_unlock>
 80082a6:	42a3      	cmp	r3, r4
 80082a8:	d90c      	bls.n	80082c4 <_free_r+0x4c>
 80082aa:	6821      	ldr	r1, [r4, #0]
 80082ac:	1862      	adds	r2, r4, r1
 80082ae:	4293      	cmp	r3, r2
 80082b0:	bf04      	itt	eq
 80082b2:	681a      	ldreq	r2, [r3, #0]
 80082b4:	685b      	ldreq	r3, [r3, #4]
 80082b6:	6063      	str	r3, [r4, #4]
 80082b8:	bf04      	itt	eq
 80082ba:	1852      	addeq	r2, r2, r1
 80082bc:	6022      	streq	r2, [r4, #0]
 80082be:	6004      	str	r4, [r0, #0]
 80082c0:	e7ec      	b.n	800829c <_free_r+0x24>
 80082c2:	4613      	mov	r3, r2
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	b10a      	cbz	r2, 80082cc <_free_r+0x54>
 80082c8:	42a2      	cmp	r2, r4
 80082ca:	d9fa      	bls.n	80082c2 <_free_r+0x4a>
 80082cc:	6819      	ldr	r1, [r3, #0]
 80082ce:	1858      	adds	r0, r3, r1
 80082d0:	42a0      	cmp	r0, r4
 80082d2:	d10b      	bne.n	80082ec <_free_r+0x74>
 80082d4:	6820      	ldr	r0, [r4, #0]
 80082d6:	4401      	add	r1, r0
 80082d8:	1858      	adds	r0, r3, r1
 80082da:	4282      	cmp	r2, r0
 80082dc:	6019      	str	r1, [r3, #0]
 80082de:	d1dd      	bne.n	800829c <_free_r+0x24>
 80082e0:	6810      	ldr	r0, [r2, #0]
 80082e2:	6852      	ldr	r2, [r2, #4]
 80082e4:	605a      	str	r2, [r3, #4]
 80082e6:	4401      	add	r1, r0
 80082e8:	6019      	str	r1, [r3, #0]
 80082ea:	e7d7      	b.n	800829c <_free_r+0x24>
 80082ec:	d902      	bls.n	80082f4 <_free_r+0x7c>
 80082ee:	230c      	movs	r3, #12
 80082f0:	602b      	str	r3, [r5, #0]
 80082f2:	e7d3      	b.n	800829c <_free_r+0x24>
 80082f4:	6820      	ldr	r0, [r4, #0]
 80082f6:	1821      	adds	r1, r4, r0
 80082f8:	428a      	cmp	r2, r1
 80082fa:	bf04      	itt	eq
 80082fc:	6811      	ldreq	r1, [r2, #0]
 80082fe:	6852      	ldreq	r2, [r2, #4]
 8008300:	6062      	str	r2, [r4, #4]
 8008302:	bf04      	itt	eq
 8008304:	1809      	addeq	r1, r1, r0
 8008306:	6021      	streq	r1, [r4, #0]
 8008308:	605c      	str	r4, [r3, #4]
 800830a:	e7c7      	b.n	800829c <_free_r+0x24>
 800830c:	bd38      	pop	{r3, r4, r5, pc}
 800830e:	bf00      	nop
 8008310:	200002ac 	.word	0x200002ac

08008314 <_malloc_r>:
 8008314:	b570      	push	{r4, r5, r6, lr}
 8008316:	1ccd      	adds	r5, r1, #3
 8008318:	f025 0503 	bic.w	r5, r5, #3
 800831c:	3508      	adds	r5, #8
 800831e:	2d0c      	cmp	r5, #12
 8008320:	bf38      	it	cc
 8008322:	250c      	movcc	r5, #12
 8008324:	2d00      	cmp	r5, #0
 8008326:	4606      	mov	r6, r0
 8008328:	db01      	blt.n	800832e <_malloc_r+0x1a>
 800832a:	42a9      	cmp	r1, r5
 800832c:	d903      	bls.n	8008336 <_malloc_r+0x22>
 800832e:	230c      	movs	r3, #12
 8008330:	6033      	str	r3, [r6, #0]
 8008332:	2000      	movs	r0, #0
 8008334:	bd70      	pop	{r4, r5, r6, pc}
 8008336:	f003 f8b8 	bl	800b4aa <__malloc_lock>
 800833a:	4a21      	ldr	r2, [pc, #132]	; (80083c0 <_malloc_r+0xac>)
 800833c:	6814      	ldr	r4, [r2, #0]
 800833e:	4621      	mov	r1, r4
 8008340:	b991      	cbnz	r1, 8008368 <_malloc_r+0x54>
 8008342:	4c20      	ldr	r4, [pc, #128]	; (80083c4 <_malloc_r+0xb0>)
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	b91b      	cbnz	r3, 8008350 <_malloc_r+0x3c>
 8008348:	4630      	mov	r0, r6
 800834a:	f000 fe93 	bl	8009074 <_sbrk_r>
 800834e:	6020      	str	r0, [r4, #0]
 8008350:	4629      	mov	r1, r5
 8008352:	4630      	mov	r0, r6
 8008354:	f000 fe8e 	bl	8009074 <_sbrk_r>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d124      	bne.n	80083a6 <_malloc_r+0x92>
 800835c:	230c      	movs	r3, #12
 800835e:	6033      	str	r3, [r6, #0]
 8008360:	4630      	mov	r0, r6
 8008362:	f003 f8a3 	bl	800b4ac <__malloc_unlock>
 8008366:	e7e4      	b.n	8008332 <_malloc_r+0x1e>
 8008368:	680b      	ldr	r3, [r1, #0]
 800836a:	1b5b      	subs	r3, r3, r5
 800836c:	d418      	bmi.n	80083a0 <_malloc_r+0x8c>
 800836e:	2b0b      	cmp	r3, #11
 8008370:	d90f      	bls.n	8008392 <_malloc_r+0x7e>
 8008372:	600b      	str	r3, [r1, #0]
 8008374:	50cd      	str	r5, [r1, r3]
 8008376:	18cc      	adds	r4, r1, r3
 8008378:	4630      	mov	r0, r6
 800837a:	f003 f897 	bl	800b4ac <__malloc_unlock>
 800837e:	f104 000b 	add.w	r0, r4, #11
 8008382:	1d23      	adds	r3, r4, #4
 8008384:	f020 0007 	bic.w	r0, r0, #7
 8008388:	1ac3      	subs	r3, r0, r3
 800838a:	d0d3      	beq.n	8008334 <_malloc_r+0x20>
 800838c:	425a      	negs	r2, r3
 800838e:	50e2      	str	r2, [r4, r3]
 8008390:	e7d0      	b.n	8008334 <_malloc_r+0x20>
 8008392:	428c      	cmp	r4, r1
 8008394:	684b      	ldr	r3, [r1, #4]
 8008396:	bf16      	itet	ne
 8008398:	6063      	strne	r3, [r4, #4]
 800839a:	6013      	streq	r3, [r2, #0]
 800839c:	460c      	movne	r4, r1
 800839e:	e7eb      	b.n	8008378 <_malloc_r+0x64>
 80083a0:	460c      	mov	r4, r1
 80083a2:	6849      	ldr	r1, [r1, #4]
 80083a4:	e7cc      	b.n	8008340 <_malloc_r+0x2c>
 80083a6:	1cc4      	adds	r4, r0, #3
 80083a8:	f024 0403 	bic.w	r4, r4, #3
 80083ac:	42a0      	cmp	r0, r4
 80083ae:	d005      	beq.n	80083bc <_malloc_r+0xa8>
 80083b0:	1a21      	subs	r1, r4, r0
 80083b2:	4630      	mov	r0, r6
 80083b4:	f000 fe5e 	bl	8009074 <_sbrk_r>
 80083b8:	3001      	adds	r0, #1
 80083ba:	d0cf      	beq.n	800835c <_malloc_r+0x48>
 80083bc:	6025      	str	r5, [r4, #0]
 80083be:	e7db      	b.n	8008378 <_malloc_r+0x64>
 80083c0:	200002ac 	.word	0x200002ac
 80083c4:	200002b0 	.word	0x200002b0

080083c8 <__cvt>:
 80083c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083cc:	ec55 4b10 	vmov	r4, r5, d0
 80083d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80083d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80083d6:	2d00      	cmp	r5, #0
 80083d8:	460e      	mov	r6, r1
 80083da:	4691      	mov	r9, r2
 80083dc:	4619      	mov	r1, r3
 80083de:	bfb8      	it	lt
 80083e0:	4622      	movlt	r2, r4
 80083e2:	462b      	mov	r3, r5
 80083e4:	f027 0720 	bic.w	r7, r7, #32
 80083e8:	bfbb      	ittet	lt
 80083ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80083ee:	461d      	movlt	r5, r3
 80083f0:	2300      	movge	r3, #0
 80083f2:	232d      	movlt	r3, #45	; 0x2d
 80083f4:	bfb8      	it	lt
 80083f6:	4614      	movlt	r4, r2
 80083f8:	2f46      	cmp	r7, #70	; 0x46
 80083fa:	700b      	strb	r3, [r1, #0]
 80083fc:	d004      	beq.n	8008408 <__cvt+0x40>
 80083fe:	2f45      	cmp	r7, #69	; 0x45
 8008400:	d100      	bne.n	8008404 <__cvt+0x3c>
 8008402:	3601      	adds	r6, #1
 8008404:	2102      	movs	r1, #2
 8008406:	e000      	b.n	800840a <__cvt+0x42>
 8008408:	2103      	movs	r1, #3
 800840a:	ab03      	add	r3, sp, #12
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	ab02      	add	r3, sp, #8
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	4632      	mov	r2, r6
 8008414:	4653      	mov	r3, sl
 8008416:	ec45 4b10 	vmov	d0, r4, r5
 800841a:	f001 feb9 	bl	800a190 <_dtoa_r>
 800841e:	2f47      	cmp	r7, #71	; 0x47
 8008420:	4680      	mov	r8, r0
 8008422:	d102      	bne.n	800842a <__cvt+0x62>
 8008424:	f019 0f01 	tst.w	r9, #1
 8008428:	d026      	beq.n	8008478 <__cvt+0xb0>
 800842a:	2f46      	cmp	r7, #70	; 0x46
 800842c:	eb08 0906 	add.w	r9, r8, r6
 8008430:	d111      	bne.n	8008456 <__cvt+0x8e>
 8008432:	f898 3000 	ldrb.w	r3, [r8]
 8008436:	2b30      	cmp	r3, #48	; 0x30
 8008438:	d10a      	bne.n	8008450 <__cvt+0x88>
 800843a:	2200      	movs	r2, #0
 800843c:	2300      	movs	r3, #0
 800843e:	4620      	mov	r0, r4
 8008440:	4629      	mov	r1, r5
 8008442:	f7f8 fb69 	bl	8000b18 <__aeabi_dcmpeq>
 8008446:	b918      	cbnz	r0, 8008450 <__cvt+0x88>
 8008448:	f1c6 0601 	rsb	r6, r6, #1
 800844c:	f8ca 6000 	str.w	r6, [sl]
 8008450:	f8da 3000 	ldr.w	r3, [sl]
 8008454:	4499      	add	r9, r3
 8008456:	2200      	movs	r2, #0
 8008458:	2300      	movs	r3, #0
 800845a:	4620      	mov	r0, r4
 800845c:	4629      	mov	r1, r5
 800845e:	f7f8 fb5b 	bl	8000b18 <__aeabi_dcmpeq>
 8008462:	b938      	cbnz	r0, 8008474 <__cvt+0xac>
 8008464:	2230      	movs	r2, #48	; 0x30
 8008466:	9b03      	ldr	r3, [sp, #12]
 8008468:	454b      	cmp	r3, r9
 800846a:	d205      	bcs.n	8008478 <__cvt+0xb0>
 800846c:	1c59      	adds	r1, r3, #1
 800846e:	9103      	str	r1, [sp, #12]
 8008470:	701a      	strb	r2, [r3, #0]
 8008472:	e7f8      	b.n	8008466 <__cvt+0x9e>
 8008474:	f8cd 900c 	str.w	r9, [sp, #12]
 8008478:	9b03      	ldr	r3, [sp, #12]
 800847a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800847c:	eba3 0308 	sub.w	r3, r3, r8
 8008480:	4640      	mov	r0, r8
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	b004      	add	sp, #16
 8008486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800848a <__exponent>:
 800848a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800848c:	2900      	cmp	r1, #0
 800848e:	4604      	mov	r4, r0
 8008490:	bfba      	itte	lt
 8008492:	4249      	neglt	r1, r1
 8008494:	232d      	movlt	r3, #45	; 0x2d
 8008496:	232b      	movge	r3, #43	; 0x2b
 8008498:	2909      	cmp	r1, #9
 800849a:	f804 2b02 	strb.w	r2, [r4], #2
 800849e:	7043      	strb	r3, [r0, #1]
 80084a0:	dd20      	ble.n	80084e4 <__exponent+0x5a>
 80084a2:	f10d 0307 	add.w	r3, sp, #7
 80084a6:	461f      	mov	r7, r3
 80084a8:	260a      	movs	r6, #10
 80084aa:	fb91 f5f6 	sdiv	r5, r1, r6
 80084ae:	fb06 1115 	mls	r1, r6, r5, r1
 80084b2:	3130      	adds	r1, #48	; 0x30
 80084b4:	2d09      	cmp	r5, #9
 80084b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80084ba:	f103 32ff 	add.w	r2, r3, #4294967295
 80084be:	4629      	mov	r1, r5
 80084c0:	dc09      	bgt.n	80084d6 <__exponent+0x4c>
 80084c2:	3130      	adds	r1, #48	; 0x30
 80084c4:	3b02      	subs	r3, #2
 80084c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80084ca:	42bb      	cmp	r3, r7
 80084cc:	4622      	mov	r2, r4
 80084ce:	d304      	bcc.n	80084da <__exponent+0x50>
 80084d0:	1a10      	subs	r0, r2, r0
 80084d2:	b003      	add	sp, #12
 80084d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084d6:	4613      	mov	r3, r2
 80084d8:	e7e7      	b.n	80084aa <__exponent+0x20>
 80084da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084de:	f804 2b01 	strb.w	r2, [r4], #1
 80084e2:	e7f2      	b.n	80084ca <__exponent+0x40>
 80084e4:	2330      	movs	r3, #48	; 0x30
 80084e6:	4419      	add	r1, r3
 80084e8:	7083      	strb	r3, [r0, #2]
 80084ea:	1d02      	adds	r2, r0, #4
 80084ec:	70c1      	strb	r1, [r0, #3]
 80084ee:	e7ef      	b.n	80084d0 <__exponent+0x46>

080084f0 <_printf_float>:
 80084f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f4:	b08d      	sub	sp, #52	; 0x34
 80084f6:	460c      	mov	r4, r1
 80084f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80084fc:	4616      	mov	r6, r2
 80084fe:	461f      	mov	r7, r3
 8008500:	4605      	mov	r5, r0
 8008502:	f002 ff29 	bl	800b358 <_localeconv_r>
 8008506:	6803      	ldr	r3, [r0, #0]
 8008508:	9304      	str	r3, [sp, #16]
 800850a:	4618      	mov	r0, r3
 800850c:	f7f7 fe88 	bl	8000220 <strlen>
 8008510:	2300      	movs	r3, #0
 8008512:	930a      	str	r3, [sp, #40]	; 0x28
 8008514:	f8d8 3000 	ldr.w	r3, [r8]
 8008518:	9005      	str	r0, [sp, #20]
 800851a:	3307      	adds	r3, #7
 800851c:	f023 0307 	bic.w	r3, r3, #7
 8008520:	f103 0208 	add.w	r2, r3, #8
 8008524:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008528:	f8d4 b000 	ldr.w	fp, [r4]
 800852c:	f8c8 2000 	str.w	r2, [r8]
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008538:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800853c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008540:	9307      	str	r3, [sp, #28]
 8008542:	f8cd 8018 	str.w	r8, [sp, #24]
 8008546:	f04f 32ff 	mov.w	r2, #4294967295
 800854a:	4ba7      	ldr	r3, [pc, #668]	; (80087e8 <_printf_float+0x2f8>)
 800854c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008550:	f7f8 fb14 	bl	8000b7c <__aeabi_dcmpun>
 8008554:	bb70      	cbnz	r0, 80085b4 <_printf_float+0xc4>
 8008556:	f04f 32ff 	mov.w	r2, #4294967295
 800855a:	4ba3      	ldr	r3, [pc, #652]	; (80087e8 <_printf_float+0x2f8>)
 800855c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008560:	f7f8 faee 	bl	8000b40 <__aeabi_dcmple>
 8008564:	bb30      	cbnz	r0, 80085b4 <_printf_float+0xc4>
 8008566:	2200      	movs	r2, #0
 8008568:	2300      	movs	r3, #0
 800856a:	4640      	mov	r0, r8
 800856c:	4649      	mov	r1, r9
 800856e:	f7f8 fadd 	bl	8000b2c <__aeabi_dcmplt>
 8008572:	b110      	cbz	r0, 800857a <_printf_float+0x8a>
 8008574:	232d      	movs	r3, #45	; 0x2d
 8008576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800857a:	4a9c      	ldr	r2, [pc, #624]	; (80087ec <_printf_float+0x2fc>)
 800857c:	4b9c      	ldr	r3, [pc, #624]	; (80087f0 <_printf_float+0x300>)
 800857e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008582:	bf8c      	ite	hi
 8008584:	4690      	movhi	r8, r2
 8008586:	4698      	movls	r8, r3
 8008588:	2303      	movs	r3, #3
 800858a:	f02b 0204 	bic.w	r2, fp, #4
 800858e:	6123      	str	r3, [r4, #16]
 8008590:	6022      	str	r2, [r4, #0]
 8008592:	f04f 0900 	mov.w	r9, #0
 8008596:	9700      	str	r7, [sp, #0]
 8008598:	4633      	mov	r3, r6
 800859a:	aa0b      	add	r2, sp, #44	; 0x2c
 800859c:	4621      	mov	r1, r4
 800859e:	4628      	mov	r0, r5
 80085a0:	f000 f9e6 	bl	8008970 <_printf_common>
 80085a4:	3001      	adds	r0, #1
 80085a6:	f040 808d 	bne.w	80086c4 <_printf_float+0x1d4>
 80085aa:	f04f 30ff 	mov.w	r0, #4294967295
 80085ae:	b00d      	add	sp, #52	; 0x34
 80085b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b4:	4642      	mov	r2, r8
 80085b6:	464b      	mov	r3, r9
 80085b8:	4640      	mov	r0, r8
 80085ba:	4649      	mov	r1, r9
 80085bc:	f7f8 fade 	bl	8000b7c <__aeabi_dcmpun>
 80085c0:	b110      	cbz	r0, 80085c8 <_printf_float+0xd8>
 80085c2:	4a8c      	ldr	r2, [pc, #560]	; (80087f4 <_printf_float+0x304>)
 80085c4:	4b8c      	ldr	r3, [pc, #560]	; (80087f8 <_printf_float+0x308>)
 80085c6:	e7da      	b.n	800857e <_printf_float+0x8e>
 80085c8:	6861      	ldr	r1, [r4, #4]
 80085ca:	1c4b      	adds	r3, r1, #1
 80085cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80085d0:	a80a      	add	r0, sp, #40	; 0x28
 80085d2:	d13e      	bne.n	8008652 <_printf_float+0x162>
 80085d4:	2306      	movs	r3, #6
 80085d6:	6063      	str	r3, [r4, #4]
 80085d8:	2300      	movs	r3, #0
 80085da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80085de:	ab09      	add	r3, sp, #36	; 0x24
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	ec49 8b10 	vmov	d0, r8, r9
 80085e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80085ea:	6022      	str	r2, [r4, #0]
 80085ec:	f8cd a004 	str.w	sl, [sp, #4]
 80085f0:	6861      	ldr	r1, [r4, #4]
 80085f2:	4628      	mov	r0, r5
 80085f4:	f7ff fee8 	bl	80083c8 <__cvt>
 80085f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80085fc:	2b47      	cmp	r3, #71	; 0x47
 80085fe:	4680      	mov	r8, r0
 8008600:	d109      	bne.n	8008616 <_printf_float+0x126>
 8008602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008604:	1cd8      	adds	r0, r3, #3
 8008606:	db02      	blt.n	800860e <_printf_float+0x11e>
 8008608:	6862      	ldr	r2, [r4, #4]
 800860a:	4293      	cmp	r3, r2
 800860c:	dd47      	ble.n	800869e <_printf_float+0x1ae>
 800860e:	f1aa 0a02 	sub.w	sl, sl, #2
 8008612:	fa5f fa8a 	uxtb.w	sl, sl
 8008616:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800861a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800861c:	d824      	bhi.n	8008668 <_printf_float+0x178>
 800861e:	3901      	subs	r1, #1
 8008620:	4652      	mov	r2, sl
 8008622:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008626:	9109      	str	r1, [sp, #36]	; 0x24
 8008628:	f7ff ff2f 	bl	800848a <__exponent>
 800862c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800862e:	1813      	adds	r3, r2, r0
 8008630:	2a01      	cmp	r2, #1
 8008632:	4681      	mov	r9, r0
 8008634:	6123      	str	r3, [r4, #16]
 8008636:	dc02      	bgt.n	800863e <_printf_float+0x14e>
 8008638:	6822      	ldr	r2, [r4, #0]
 800863a:	07d1      	lsls	r1, r2, #31
 800863c:	d501      	bpl.n	8008642 <_printf_float+0x152>
 800863e:	3301      	adds	r3, #1
 8008640:	6123      	str	r3, [r4, #16]
 8008642:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008646:	2b00      	cmp	r3, #0
 8008648:	d0a5      	beq.n	8008596 <_printf_float+0xa6>
 800864a:	232d      	movs	r3, #45	; 0x2d
 800864c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008650:	e7a1      	b.n	8008596 <_printf_float+0xa6>
 8008652:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008656:	f000 8177 	beq.w	8008948 <_printf_float+0x458>
 800865a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800865e:	d1bb      	bne.n	80085d8 <_printf_float+0xe8>
 8008660:	2900      	cmp	r1, #0
 8008662:	d1b9      	bne.n	80085d8 <_printf_float+0xe8>
 8008664:	2301      	movs	r3, #1
 8008666:	e7b6      	b.n	80085d6 <_printf_float+0xe6>
 8008668:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800866c:	d119      	bne.n	80086a2 <_printf_float+0x1b2>
 800866e:	2900      	cmp	r1, #0
 8008670:	6863      	ldr	r3, [r4, #4]
 8008672:	dd0c      	ble.n	800868e <_printf_float+0x19e>
 8008674:	6121      	str	r1, [r4, #16]
 8008676:	b913      	cbnz	r3, 800867e <_printf_float+0x18e>
 8008678:	6822      	ldr	r2, [r4, #0]
 800867a:	07d2      	lsls	r2, r2, #31
 800867c:	d502      	bpl.n	8008684 <_printf_float+0x194>
 800867e:	3301      	adds	r3, #1
 8008680:	440b      	add	r3, r1
 8008682:	6123      	str	r3, [r4, #16]
 8008684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008686:	65a3      	str	r3, [r4, #88]	; 0x58
 8008688:	f04f 0900 	mov.w	r9, #0
 800868c:	e7d9      	b.n	8008642 <_printf_float+0x152>
 800868e:	b913      	cbnz	r3, 8008696 <_printf_float+0x1a6>
 8008690:	6822      	ldr	r2, [r4, #0]
 8008692:	07d0      	lsls	r0, r2, #31
 8008694:	d501      	bpl.n	800869a <_printf_float+0x1aa>
 8008696:	3302      	adds	r3, #2
 8008698:	e7f3      	b.n	8008682 <_printf_float+0x192>
 800869a:	2301      	movs	r3, #1
 800869c:	e7f1      	b.n	8008682 <_printf_float+0x192>
 800869e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80086a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80086a6:	4293      	cmp	r3, r2
 80086a8:	db05      	blt.n	80086b6 <_printf_float+0x1c6>
 80086aa:	6822      	ldr	r2, [r4, #0]
 80086ac:	6123      	str	r3, [r4, #16]
 80086ae:	07d1      	lsls	r1, r2, #31
 80086b0:	d5e8      	bpl.n	8008684 <_printf_float+0x194>
 80086b2:	3301      	adds	r3, #1
 80086b4:	e7e5      	b.n	8008682 <_printf_float+0x192>
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	bfd4      	ite	le
 80086ba:	f1c3 0302 	rsble	r3, r3, #2
 80086be:	2301      	movgt	r3, #1
 80086c0:	4413      	add	r3, r2
 80086c2:	e7de      	b.n	8008682 <_printf_float+0x192>
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	055a      	lsls	r2, r3, #21
 80086c8:	d407      	bmi.n	80086da <_printf_float+0x1ea>
 80086ca:	6923      	ldr	r3, [r4, #16]
 80086cc:	4642      	mov	r2, r8
 80086ce:	4631      	mov	r1, r6
 80086d0:	4628      	mov	r0, r5
 80086d2:	47b8      	blx	r7
 80086d4:	3001      	adds	r0, #1
 80086d6:	d12b      	bne.n	8008730 <_printf_float+0x240>
 80086d8:	e767      	b.n	80085aa <_printf_float+0xba>
 80086da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80086de:	f240 80dc 	bls.w	800889a <_printf_float+0x3aa>
 80086e2:	2200      	movs	r2, #0
 80086e4:	2300      	movs	r3, #0
 80086e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086ea:	f7f8 fa15 	bl	8000b18 <__aeabi_dcmpeq>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d033      	beq.n	800875a <_printf_float+0x26a>
 80086f2:	2301      	movs	r3, #1
 80086f4:	4a41      	ldr	r2, [pc, #260]	; (80087fc <_printf_float+0x30c>)
 80086f6:	4631      	mov	r1, r6
 80086f8:	4628      	mov	r0, r5
 80086fa:	47b8      	blx	r7
 80086fc:	3001      	adds	r0, #1
 80086fe:	f43f af54 	beq.w	80085aa <_printf_float+0xba>
 8008702:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008706:	429a      	cmp	r2, r3
 8008708:	db02      	blt.n	8008710 <_printf_float+0x220>
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	07d8      	lsls	r0, r3, #31
 800870e:	d50f      	bpl.n	8008730 <_printf_float+0x240>
 8008710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008714:	4631      	mov	r1, r6
 8008716:	4628      	mov	r0, r5
 8008718:	47b8      	blx	r7
 800871a:	3001      	adds	r0, #1
 800871c:	f43f af45 	beq.w	80085aa <_printf_float+0xba>
 8008720:	f04f 0800 	mov.w	r8, #0
 8008724:	f104 091a 	add.w	r9, r4, #26
 8008728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800872a:	3b01      	subs	r3, #1
 800872c:	4543      	cmp	r3, r8
 800872e:	dc09      	bgt.n	8008744 <_printf_float+0x254>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	079b      	lsls	r3, r3, #30
 8008734:	f100 8103 	bmi.w	800893e <_printf_float+0x44e>
 8008738:	68e0      	ldr	r0, [r4, #12]
 800873a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800873c:	4298      	cmp	r0, r3
 800873e:	bfb8      	it	lt
 8008740:	4618      	movlt	r0, r3
 8008742:	e734      	b.n	80085ae <_printf_float+0xbe>
 8008744:	2301      	movs	r3, #1
 8008746:	464a      	mov	r2, r9
 8008748:	4631      	mov	r1, r6
 800874a:	4628      	mov	r0, r5
 800874c:	47b8      	blx	r7
 800874e:	3001      	adds	r0, #1
 8008750:	f43f af2b 	beq.w	80085aa <_printf_float+0xba>
 8008754:	f108 0801 	add.w	r8, r8, #1
 8008758:	e7e6      	b.n	8008728 <_printf_float+0x238>
 800875a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875c:	2b00      	cmp	r3, #0
 800875e:	dc2b      	bgt.n	80087b8 <_printf_float+0x2c8>
 8008760:	2301      	movs	r3, #1
 8008762:	4a26      	ldr	r2, [pc, #152]	; (80087fc <_printf_float+0x30c>)
 8008764:	4631      	mov	r1, r6
 8008766:	4628      	mov	r0, r5
 8008768:	47b8      	blx	r7
 800876a:	3001      	adds	r0, #1
 800876c:	f43f af1d 	beq.w	80085aa <_printf_float+0xba>
 8008770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008772:	b923      	cbnz	r3, 800877e <_printf_float+0x28e>
 8008774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008776:	b913      	cbnz	r3, 800877e <_printf_float+0x28e>
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	07d9      	lsls	r1, r3, #31
 800877c:	d5d8      	bpl.n	8008730 <_printf_float+0x240>
 800877e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008782:	4631      	mov	r1, r6
 8008784:	4628      	mov	r0, r5
 8008786:	47b8      	blx	r7
 8008788:	3001      	adds	r0, #1
 800878a:	f43f af0e 	beq.w	80085aa <_printf_float+0xba>
 800878e:	f04f 0900 	mov.w	r9, #0
 8008792:	f104 0a1a 	add.w	sl, r4, #26
 8008796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008798:	425b      	negs	r3, r3
 800879a:	454b      	cmp	r3, r9
 800879c:	dc01      	bgt.n	80087a2 <_printf_float+0x2b2>
 800879e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a0:	e794      	b.n	80086cc <_printf_float+0x1dc>
 80087a2:	2301      	movs	r3, #1
 80087a4:	4652      	mov	r2, sl
 80087a6:	4631      	mov	r1, r6
 80087a8:	4628      	mov	r0, r5
 80087aa:	47b8      	blx	r7
 80087ac:	3001      	adds	r0, #1
 80087ae:	f43f aefc 	beq.w	80085aa <_printf_float+0xba>
 80087b2:	f109 0901 	add.w	r9, r9, #1
 80087b6:	e7ee      	b.n	8008796 <_printf_float+0x2a6>
 80087b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087bc:	429a      	cmp	r2, r3
 80087be:	bfa8      	it	ge
 80087c0:	461a      	movge	r2, r3
 80087c2:	2a00      	cmp	r2, #0
 80087c4:	4691      	mov	r9, r2
 80087c6:	dd07      	ble.n	80087d8 <_printf_float+0x2e8>
 80087c8:	4613      	mov	r3, r2
 80087ca:	4631      	mov	r1, r6
 80087cc:	4642      	mov	r2, r8
 80087ce:	4628      	mov	r0, r5
 80087d0:	47b8      	blx	r7
 80087d2:	3001      	adds	r0, #1
 80087d4:	f43f aee9 	beq.w	80085aa <_printf_float+0xba>
 80087d8:	f104 031a 	add.w	r3, r4, #26
 80087dc:	f04f 0b00 	mov.w	fp, #0
 80087e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087e4:	9306      	str	r3, [sp, #24]
 80087e6:	e015      	b.n	8008814 <_printf_float+0x324>
 80087e8:	7fefffff 	.word	0x7fefffff
 80087ec:	0800c670 	.word	0x0800c670
 80087f0:	0800c66c 	.word	0x0800c66c
 80087f4:	0800c678 	.word	0x0800c678
 80087f8:	0800c674 	.word	0x0800c674
 80087fc:	0800c67c 	.word	0x0800c67c
 8008800:	2301      	movs	r3, #1
 8008802:	9a06      	ldr	r2, [sp, #24]
 8008804:	4631      	mov	r1, r6
 8008806:	4628      	mov	r0, r5
 8008808:	47b8      	blx	r7
 800880a:	3001      	adds	r0, #1
 800880c:	f43f aecd 	beq.w	80085aa <_printf_float+0xba>
 8008810:	f10b 0b01 	add.w	fp, fp, #1
 8008814:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008818:	ebaa 0309 	sub.w	r3, sl, r9
 800881c:	455b      	cmp	r3, fp
 800881e:	dcef      	bgt.n	8008800 <_printf_float+0x310>
 8008820:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008824:	429a      	cmp	r2, r3
 8008826:	44d0      	add	r8, sl
 8008828:	db15      	blt.n	8008856 <_printf_float+0x366>
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	07da      	lsls	r2, r3, #31
 800882e:	d412      	bmi.n	8008856 <_printf_float+0x366>
 8008830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008832:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008834:	eba3 020a 	sub.w	r2, r3, sl
 8008838:	eba3 0a01 	sub.w	sl, r3, r1
 800883c:	4592      	cmp	sl, r2
 800883e:	bfa8      	it	ge
 8008840:	4692      	movge	sl, r2
 8008842:	f1ba 0f00 	cmp.w	sl, #0
 8008846:	dc0e      	bgt.n	8008866 <_printf_float+0x376>
 8008848:	f04f 0800 	mov.w	r8, #0
 800884c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008850:	f104 091a 	add.w	r9, r4, #26
 8008854:	e019      	b.n	800888a <_printf_float+0x39a>
 8008856:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800885a:	4631      	mov	r1, r6
 800885c:	4628      	mov	r0, r5
 800885e:	47b8      	blx	r7
 8008860:	3001      	adds	r0, #1
 8008862:	d1e5      	bne.n	8008830 <_printf_float+0x340>
 8008864:	e6a1      	b.n	80085aa <_printf_float+0xba>
 8008866:	4653      	mov	r3, sl
 8008868:	4642      	mov	r2, r8
 800886a:	4631      	mov	r1, r6
 800886c:	4628      	mov	r0, r5
 800886e:	47b8      	blx	r7
 8008870:	3001      	adds	r0, #1
 8008872:	d1e9      	bne.n	8008848 <_printf_float+0x358>
 8008874:	e699      	b.n	80085aa <_printf_float+0xba>
 8008876:	2301      	movs	r3, #1
 8008878:	464a      	mov	r2, r9
 800887a:	4631      	mov	r1, r6
 800887c:	4628      	mov	r0, r5
 800887e:	47b8      	blx	r7
 8008880:	3001      	adds	r0, #1
 8008882:	f43f ae92 	beq.w	80085aa <_printf_float+0xba>
 8008886:	f108 0801 	add.w	r8, r8, #1
 800888a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800888e:	1a9b      	subs	r3, r3, r2
 8008890:	eba3 030a 	sub.w	r3, r3, sl
 8008894:	4543      	cmp	r3, r8
 8008896:	dcee      	bgt.n	8008876 <_printf_float+0x386>
 8008898:	e74a      	b.n	8008730 <_printf_float+0x240>
 800889a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800889c:	2a01      	cmp	r2, #1
 800889e:	dc01      	bgt.n	80088a4 <_printf_float+0x3b4>
 80088a0:	07db      	lsls	r3, r3, #31
 80088a2:	d53a      	bpl.n	800891a <_printf_float+0x42a>
 80088a4:	2301      	movs	r3, #1
 80088a6:	4642      	mov	r2, r8
 80088a8:	4631      	mov	r1, r6
 80088aa:	4628      	mov	r0, r5
 80088ac:	47b8      	blx	r7
 80088ae:	3001      	adds	r0, #1
 80088b0:	f43f ae7b 	beq.w	80085aa <_printf_float+0xba>
 80088b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088b8:	4631      	mov	r1, r6
 80088ba:	4628      	mov	r0, r5
 80088bc:	47b8      	blx	r7
 80088be:	3001      	adds	r0, #1
 80088c0:	f108 0801 	add.w	r8, r8, #1
 80088c4:	f43f ae71 	beq.w	80085aa <_printf_float+0xba>
 80088c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ca:	2200      	movs	r2, #0
 80088cc:	f103 3aff 	add.w	sl, r3, #4294967295
 80088d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088d4:	2300      	movs	r3, #0
 80088d6:	f7f8 f91f 	bl	8000b18 <__aeabi_dcmpeq>
 80088da:	b9c8      	cbnz	r0, 8008910 <_printf_float+0x420>
 80088dc:	4653      	mov	r3, sl
 80088de:	4642      	mov	r2, r8
 80088e0:	4631      	mov	r1, r6
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	d10e      	bne.n	8008908 <_printf_float+0x418>
 80088ea:	e65e      	b.n	80085aa <_printf_float+0xba>
 80088ec:	2301      	movs	r3, #1
 80088ee:	4652      	mov	r2, sl
 80088f0:	4631      	mov	r1, r6
 80088f2:	4628      	mov	r0, r5
 80088f4:	47b8      	blx	r7
 80088f6:	3001      	adds	r0, #1
 80088f8:	f43f ae57 	beq.w	80085aa <_printf_float+0xba>
 80088fc:	f108 0801 	add.w	r8, r8, #1
 8008900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008902:	3b01      	subs	r3, #1
 8008904:	4543      	cmp	r3, r8
 8008906:	dcf1      	bgt.n	80088ec <_printf_float+0x3fc>
 8008908:	464b      	mov	r3, r9
 800890a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800890e:	e6de      	b.n	80086ce <_printf_float+0x1de>
 8008910:	f04f 0800 	mov.w	r8, #0
 8008914:	f104 0a1a 	add.w	sl, r4, #26
 8008918:	e7f2      	b.n	8008900 <_printf_float+0x410>
 800891a:	2301      	movs	r3, #1
 800891c:	e7df      	b.n	80088de <_printf_float+0x3ee>
 800891e:	2301      	movs	r3, #1
 8008920:	464a      	mov	r2, r9
 8008922:	4631      	mov	r1, r6
 8008924:	4628      	mov	r0, r5
 8008926:	47b8      	blx	r7
 8008928:	3001      	adds	r0, #1
 800892a:	f43f ae3e 	beq.w	80085aa <_printf_float+0xba>
 800892e:	f108 0801 	add.w	r8, r8, #1
 8008932:	68e3      	ldr	r3, [r4, #12]
 8008934:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008936:	1a9b      	subs	r3, r3, r2
 8008938:	4543      	cmp	r3, r8
 800893a:	dcf0      	bgt.n	800891e <_printf_float+0x42e>
 800893c:	e6fc      	b.n	8008738 <_printf_float+0x248>
 800893e:	f04f 0800 	mov.w	r8, #0
 8008942:	f104 0919 	add.w	r9, r4, #25
 8008946:	e7f4      	b.n	8008932 <_printf_float+0x442>
 8008948:	2900      	cmp	r1, #0
 800894a:	f43f ae8b 	beq.w	8008664 <_printf_float+0x174>
 800894e:	2300      	movs	r3, #0
 8008950:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008954:	ab09      	add	r3, sp, #36	; 0x24
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	ec49 8b10 	vmov	d0, r8, r9
 800895c:	6022      	str	r2, [r4, #0]
 800895e:	f8cd a004 	str.w	sl, [sp, #4]
 8008962:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008966:	4628      	mov	r0, r5
 8008968:	f7ff fd2e 	bl	80083c8 <__cvt>
 800896c:	4680      	mov	r8, r0
 800896e:	e648      	b.n	8008602 <_printf_float+0x112>

08008970 <_printf_common>:
 8008970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008974:	4691      	mov	r9, r2
 8008976:	461f      	mov	r7, r3
 8008978:	688a      	ldr	r2, [r1, #8]
 800897a:	690b      	ldr	r3, [r1, #16]
 800897c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008980:	4293      	cmp	r3, r2
 8008982:	bfb8      	it	lt
 8008984:	4613      	movlt	r3, r2
 8008986:	f8c9 3000 	str.w	r3, [r9]
 800898a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800898e:	4606      	mov	r6, r0
 8008990:	460c      	mov	r4, r1
 8008992:	b112      	cbz	r2, 800899a <_printf_common+0x2a>
 8008994:	3301      	adds	r3, #1
 8008996:	f8c9 3000 	str.w	r3, [r9]
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	0699      	lsls	r1, r3, #26
 800899e:	bf42      	ittt	mi
 80089a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80089a4:	3302      	addmi	r3, #2
 80089a6:	f8c9 3000 	strmi.w	r3, [r9]
 80089aa:	6825      	ldr	r5, [r4, #0]
 80089ac:	f015 0506 	ands.w	r5, r5, #6
 80089b0:	d107      	bne.n	80089c2 <_printf_common+0x52>
 80089b2:	f104 0a19 	add.w	sl, r4, #25
 80089b6:	68e3      	ldr	r3, [r4, #12]
 80089b8:	f8d9 2000 	ldr.w	r2, [r9]
 80089bc:	1a9b      	subs	r3, r3, r2
 80089be:	42ab      	cmp	r3, r5
 80089c0:	dc28      	bgt.n	8008a14 <_printf_common+0xa4>
 80089c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80089c6:	6822      	ldr	r2, [r4, #0]
 80089c8:	3300      	adds	r3, #0
 80089ca:	bf18      	it	ne
 80089cc:	2301      	movne	r3, #1
 80089ce:	0692      	lsls	r2, r2, #26
 80089d0:	d42d      	bmi.n	8008a2e <_printf_common+0xbe>
 80089d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089d6:	4639      	mov	r1, r7
 80089d8:	4630      	mov	r0, r6
 80089da:	47c0      	blx	r8
 80089dc:	3001      	adds	r0, #1
 80089de:	d020      	beq.n	8008a22 <_printf_common+0xb2>
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	68e5      	ldr	r5, [r4, #12]
 80089e4:	f8d9 2000 	ldr.w	r2, [r9]
 80089e8:	f003 0306 	and.w	r3, r3, #6
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	bf08      	it	eq
 80089f0:	1aad      	subeq	r5, r5, r2
 80089f2:	68a3      	ldr	r3, [r4, #8]
 80089f4:	6922      	ldr	r2, [r4, #16]
 80089f6:	bf0c      	ite	eq
 80089f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089fc:	2500      	movne	r5, #0
 80089fe:	4293      	cmp	r3, r2
 8008a00:	bfc4      	itt	gt
 8008a02:	1a9b      	subgt	r3, r3, r2
 8008a04:	18ed      	addgt	r5, r5, r3
 8008a06:	f04f 0900 	mov.w	r9, #0
 8008a0a:	341a      	adds	r4, #26
 8008a0c:	454d      	cmp	r5, r9
 8008a0e:	d11a      	bne.n	8008a46 <_printf_common+0xd6>
 8008a10:	2000      	movs	r0, #0
 8008a12:	e008      	b.n	8008a26 <_printf_common+0xb6>
 8008a14:	2301      	movs	r3, #1
 8008a16:	4652      	mov	r2, sl
 8008a18:	4639      	mov	r1, r7
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	47c0      	blx	r8
 8008a1e:	3001      	adds	r0, #1
 8008a20:	d103      	bne.n	8008a2a <_printf_common+0xba>
 8008a22:	f04f 30ff 	mov.w	r0, #4294967295
 8008a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a2a:	3501      	adds	r5, #1
 8008a2c:	e7c3      	b.n	80089b6 <_printf_common+0x46>
 8008a2e:	18e1      	adds	r1, r4, r3
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	2030      	movs	r0, #48	; 0x30
 8008a34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a38:	4422      	add	r2, r4
 8008a3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a42:	3302      	adds	r3, #2
 8008a44:	e7c5      	b.n	80089d2 <_printf_common+0x62>
 8008a46:	2301      	movs	r3, #1
 8008a48:	4622      	mov	r2, r4
 8008a4a:	4639      	mov	r1, r7
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	47c0      	blx	r8
 8008a50:	3001      	adds	r0, #1
 8008a52:	d0e6      	beq.n	8008a22 <_printf_common+0xb2>
 8008a54:	f109 0901 	add.w	r9, r9, #1
 8008a58:	e7d8      	b.n	8008a0c <_printf_common+0x9c>
	...

08008a5c <_printf_i>:
 8008a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008a64:	460c      	mov	r4, r1
 8008a66:	7e09      	ldrb	r1, [r1, #24]
 8008a68:	b085      	sub	sp, #20
 8008a6a:	296e      	cmp	r1, #110	; 0x6e
 8008a6c:	4617      	mov	r7, r2
 8008a6e:	4606      	mov	r6, r0
 8008a70:	4698      	mov	r8, r3
 8008a72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a74:	f000 80b3 	beq.w	8008bde <_printf_i+0x182>
 8008a78:	d822      	bhi.n	8008ac0 <_printf_i+0x64>
 8008a7a:	2963      	cmp	r1, #99	; 0x63
 8008a7c:	d036      	beq.n	8008aec <_printf_i+0x90>
 8008a7e:	d80a      	bhi.n	8008a96 <_printf_i+0x3a>
 8008a80:	2900      	cmp	r1, #0
 8008a82:	f000 80b9 	beq.w	8008bf8 <_printf_i+0x19c>
 8008a86:	2958      	cmp	r1, #88	; 0x58
 8008a88:	f000 8083 	beq.w	8008b92 <_printf_i+0x136>
 8008a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008a94:	e032      	b.n	8008afc <_printf_i+0xa0>
 8008a96:	2964      	cmp	r1, #100	; 0x64
 8008a98:	d001      	beq.n	8008a9e <_printf_i+0x42>
 8008a9a:	2969      	cmp	r1, #105	; 0x69
 8008a9c:	d1f6      	bne.n	8008a8c <_printf_i+0x30>
 8008a9e:	6820      	ldr	r0, [r4, #0]
 8008aa0:	6813      	ldr	r3, [r2, #0]
 8008aa2:	0605      	lsls	r5, r0, #24
 8008aa4:	f103 0104 	add.w	r1, r3, #4
 8008aa8:	d52a      	bpl.n	8008b00 <_printf_i+0xa4>
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6011      	str	r1, [r2, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	da03      	bge.n	8008aba <_printf_i+0x5e>
 8008ab2:	222d      	movs	r2, #45	; 0x2d
 8008ab4:	425b      	negs	r3, r3
 8008ab6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008aba:	486f      	ldr	r0, [pc, #444]	; (8008c78 <_printf_i+0x21c>)
 8008abc:	220a      	movs	r2, #10
 8008abe:	e039      	b.n	8008b34 <_printf_i+0xd8>
 8008ac0:	2973      	cmp	r1, #115	; 0x73
 8008ac2:	f000 809d 	beq.w	8008c00 <_printf_i+0x1a4>
 8008ac6:	d808      	bhi.n	8008ada <_printf_i+0x7e>
 8008ac8:	296f      	cmp	r1, #111	; 0x6f
 8008aca:	d020      	beq.n	8008b0e <_printf_i+0xb2>
 8008acc:	2970      	cmp	r1, #112	; 0x70
 8008ace:	d1dd      	bne.n	8008a8c <_printf_i+0x30>
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	f043 0320 	orr.w	r3, r3, #32
 8008ad6:	6023      	str	r3, [r4, #0]
 8008ad8:	e003      	b.n	8008ae2 <_printf_i+0x86>
 8008ada:	2975      	cmp	r1, #117	; 0x75
 8008adc:	d017      	beq.n	8008b0e <_printf_i+0xb2>
 8008ade:	2978      	cmp	r1, #120	; 0x78
 8008ae0:	d1d4      	bne.n	8008a8c <_printf_i+0x30>
 8008ae2:	2378      	movs	r3, #120	; 0x78
 8008ae4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ae8:	4864      	ldr	r0, [pc, #400]	; (8008c7c <_printf_i+0x220>)
 8008aea:	e055      	b.n	8008b98 <_printf_i+0x13c>
 8008aec:	6813      	ldr	r3, [r2, #0]
 8008aee:	1d19      	adds	r1, r3, #4
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6011      	str	r1, [r2, #0]
 8008af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008af8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008afc:	2301      	movs	r3, #1
 8008afe:	e08c      	b.n	8008c1a <_printf_i+0x1be>
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6011      	str	r1, [r2, #0]
 8008b04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b08:	bf18      	it	ne
 8008b0a:	b21b      	sxthne	r3, r3
 8008b0c:	e7cf      	b.n	8008aae <_printf_i+0x52>
 8008b0e:	6813      	ldr	r3, [r2, #0]
 8008b10:	6825      	ldr	r5, [r4, #0]
 8008b12:	1d18      	adds	r0, r3, #4
 8008b14:	6010      	str	r0, [r2, #0]
 8008b16:	0628      	lsls	r0, r5, #24
 8008b18:	d501      	bpl.n	8008b1e <_printf_i+0xc2>
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	e002      	b.n	8008b24 <_printf_i+0xc8>
 8008b1e:	0668      	lsls	r0, r5, #25
 8008b20:	d5fb      	bpl.n	8008b1a <_printf_i+0xbe>
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	4854      	ldr	r0, [pc, #336]	; (8008c78 <_printf_i+0x21c>)
 8008b26:	296f      	cmp	r1, #111	; 0x6f
 8008b28:	bf14      	ite	ne
 8008b2a:	220a      	movne	r2, #10
 8008b2c:	2208      	moveq	r2, #8
 8008b2e:	2100      	movs	r1, #0
 8008b30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b34:	6865      	ldr	r5, [r4, #4]
 8008b36:	60a5      	str	r5, [r4, #8]
 8008b38:	2d00      	cmp	r5, #0
 8008b3a:	f2c0 8095 	blt.w	8008c68 <_printf_i+0x20c>
 8008b3e:	6821      	ldr	r1, [r4, #0]
 8008b40:	f021 0104 	bic.w	r1, r1, #4
 8008b44:	6021      	str	r1, [r4, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d13d      	bne.n	8008bc6 <_printf_i+0x16a>
 8008b4a:	2d00      	cmp	r5, #0
 8008b4c:	f040 808e 	bne.w	8008c6c <_printf_i+0x210>
 8008b50:	4665      	mov	r5, ip
 8008b52:	2a08      	cmp	r2, #8
 8008b54:	d10b      	bne.n	8008b6e <_printf_i+0x112>
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	07db      	lsls	r3, r3, #31
 8008b5a:	d508      	bpl.n	8008b6e <_printf_i+0x112>
 8008b5c:	6923      	ldr	r3, [r4, #16]
 8008b5e:	6862      	ldr	r2, [r4, #4]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	bfde      	ittt	le
 8008b64:	2330      	movle	r3, #48	; 0x30
 8008b66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b6e:	ebac 0305 	sub.w	r3, ip, r5
 8008b72:	6123      	str	r3, [r4, #16]
 8008b74:	f8cd 8000 	str.w	r8, [sp]
 8008b78:	463b      	mov	r3, r7
 8008b7a:	aa03      	add	r2, sp, #12
 8008b7c:	4621      	mov	r1, r4
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f7ff fef6 	bl	8008970 <_printf_common>
 8008b84:	3001      	adds	r0, #1
 8008b86:	d14d      	bne.n	8008c24 <_printf_i+0x1c8>
 8008b88:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8c:	b005      	add	sp, #20
 8008b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b92:	4839      	ldr	r0, [pc, #228]	; (8008c78 <_printf_i+0x21c>)
 8008b94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008b98:	6813      	ldr	r3, [r2, #0]
 8008b9a:	6821      	ldr	r1, [r4, #0]
 8008b9c:	1d1d      	adds	r5, r3, #4
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6015      	str	r5, [r2, #0]
 8008ba2:	060a      	lsls	r2, r1, #24
 8008ba4:	d50b      	bpl.n	8008bbe <_printf_i+0x162>
 8008ba6:	07ca      	lsls	r2, r1, #31
 8008ba8:	bf44      	itt	mi
 8008baa:	f041 0120 	orrmi.w	r1, r1, #32
 8008bae:	6021      	strmi	r1, [r4, #0]
 8008bb0:	b91b      	cbnz	r3, 8008bba <_printf_i+0x15e>
 8008bb2:	6822      	ldr	r2, [r4, #0]
 8008bb4:	f022 0220 	bic.w	r2, r2, #32
 8008bb8:	6022      	str	r2, [r4, #0]
 8008bba:	2210      	movs	r2, #16
 8008bbc:	e7b7      	b.n	8008b2e <_printf_i+0xd2>
 8008bbe:	064d      	lsls	r5, r1, #25
 8008bc0:	bf48      	it	mi
 8008bc2:	b29b      	uxthmi	r3, r3
 8008bc4:	e7ef      	b.n	8008ba6 <_printf_i+0x14a>
 8008bc6:	4665      	mov	r5, ip
 8008bc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bcc:	fb02 3311 	mls	r3, r2, r1, r3
 8008bd0:	5cc3      	ldrb	r3, [r0, r3]
 8008bd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	2900      	cmp	r1, #0
 8008bda:	d1f5      	bne.n	8008bc8 <_printf_i+0x16c>
 8008bdc:	e7b9      	b.n	8008b52 <_printf_i+0xf6>
 8008bde:	6813      	ldr	r3, [r2, #0]
 8008be0:	6825      	ldr	r5, [r4, #0]
 8008be2:	6961      	ldr	r1, [r4, #20]
 8008be4:	1d18      	adds	r0, r3, #4
 8008be6:	6010      	str	r0, [r2, #0]
 8008be8:	0628      	lsls	r0, r5, #24
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	d501      	bpl.n	8008bf2 <_printf_i+0x196>
 8008bee:	6019      	str	r1, [r3, #0]
 8008bf0:	e002      	b.n	8008bf8 <_printf_i+0x19c>
 8008bf2:	066a      	lsls	r2, r5, #25
 8008bf4:	d5fb      	bpl.n	8008bee <_printf_i+0x192>
 8008bf6:	8019      	strh	r1, [r3, #0]
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	6123      	str	r3, [r4, #16]
 8008bfc:	4665      	mov	r5, ip
 8008bfe:	e7b9      	b.n	8008b74 <_printf_i+0x118>
 8008c00:	6813      	ldr	r3, [r2, #0]
 8008c02:	1d19      	adds	r1, r3, #4
 8008c04:	6011      	str	r1, [r2, #0]
 8008c06:	681d      	ldr	r5, [r3, #0]
 8008c08:	6862      	ldr	r2, [r4, #4]
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	f7f7 fb0f 	bl	8000230 <memchr>
 8008c12:	b108      	cbz	r0, 8008c18 <_printf_i+0x1bc>
 8008c14:	1b40      	subs	r0, r0, r5
 8008c16:	6060      	str	r0, [r4, #4]
 8008c18:	6863      	ldr	r3, [r4, #4]
 8008c1a:	6123      	str	r3, [r4, #16]
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c22:	e7a7      	b.n	8008b74 <_printf_i+0x118>
 8008c24:	6923      	ldr	r3, [r4, #16]
 8008c26:	462a      	mov	r2, r5
 8008c28:	4639      	mov	r1, r7
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	47c0      	blx	r8
 8008c2e:	3001      	adds	r0, #1
 8008c30:	d0aa      	beq.n	8008b88 <_printf_i+0x12c>
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	079b      	lsls	r3, r3, #30
 8008c36:	d413      	bmi.n	8008c60 <_printf_i+0x204>
 8008c38:	68e0      	ldr	r0, [r4, #12]
 8008c3a:	9b03      	ldr	r3, [sp, #12]
 8008c3c:	4298      	cmp	r0, r3
 8008c3e:	bfb8      	it	lt
 8008c40:	4618      	movlt	r0, r3
 8008c42:	e7a3      	b.n	8008b8c <_printf_i+0x130>
 8008c44:	2301      	movs	r3, #1
 8008c46:	464a      	mov	r2, r9
 8008c48:	4639      	mov	r1, r7
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	47c0      	blx	r8
 8008c4e:	3001      	adds	r0, #1
 8008c50:	d09a      	beq.n	8008b88 <_printf_i+0x12c>
 8008c52:	3501      	adds	r5, #1
 8008c54:	68e3      	ldr	r3, [r4, #12]
 8008c56:	9a03      	ldr	r2, [sp, #12]
 8008c58:	1a9b      	subs	r3, r3, r2
 8008c5a:	42ab      	cmp	r3, r5
 8008c5c:	dcf2      	bgt.n	8008c44 <_printf_i+0x1e8>
 8008c5e:	e7eb      	b.n	8008c38 <_printf_i+0x1dc>
 8008c60:	2500      	movs	r5, #0
 8008c62:	f104 0919 	add.w	r9, r4, #25
 8008c66:	e7f5      	b.n	8008c54 <_printf_i+0x1f8>
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1ac      	bne.n	8008bc6 <_printf_i+0x16a>
 8008c6c:	7803      	ldrb	r3, [r0, #0]
 8008c6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c76:	e76c      	b.n	8008b52 <_printf_i+0xf6>
 8008c78:	0800c67e 	.word	0x0800c67e
 8008c7c:	0800c68f 	.word	0x0800c68f

08008c80 <_scanf_float>:
 8008c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c84:	469a      	mov	sl, r3
 8008c86:	688b      	ldr	r3, [r1, #8]
 8008c88:	4616      	mov	r6, r2
 8008c8a:	1e5a      	subs	r2, r3, #1
 8008c8c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008c90:	b087      	sub	sp, #28
 8008c92:	bf83      	ittte	hi
 8008c94:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8008c98:	189b      	addhi	r3, r3, r2
 8008c9a:	9301      	strhi	r3, [sp, #4]
 8008c9c:	2300      	movls	r3, #0
 8008c9e:	bf86      	itte	hi
 8008ca0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008ca4:	608b      	strhi	r3, [r1, #8]
 8008ca6:	9301      	strls	r3, [sp, #4]
 8008ca8:	680b      	ldr	r3, [r1, #0]
 8008caa:	4688      	mov	r8, r1
 8008cac:	f04f 0b00 	mov.w	fp, #0
 8008cb0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008cb4:	f848 3b1c 	str.w	r3, [r8], #28
 8008cb8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008cbc:	4607      	mov	r7, r0
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	4645      	mov	r5, r8
 8008cc2:	465a      	mov	r2, fp
 8008cc4:	46d9      	mov	r9, fp
 8008cc6:	f8cd b008 	str.w	fp, [sp, #8]
 8008cca:	68a1      	ldr	r1, [r4, #8]
 8008ccc:	b181      	cbz	r1, 8008cf0 <_scanf_float+0x70>
 8008cce:	6833      	ldr	r3, [r6, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	2b49      	cmp	r3, #73	; 0x49
 8008cd4:	d071      	beq.n	8008dba <_scanf_float+0x13a>
 8008cd6:	d84d      	bhi.n	8008d74 <_scanf_float+0xf4>
 8008cd8:	2b39      	cmp	r3, #57	; 0x39
 8008cda:	d840      	bhi.n	8008d5e <_scanf_float+0xde>
 8008cdc:	2b31      	cmp	r3, #49	; 0x31
 8008cde:	f080 8088 	bcs.w	8008df2 <_scanf_float+0x172>
 8008ce2:	2b2d      	cmp	r3, #45	; 0x2d
 8008ce4:	f000 8090 	beq.w	8008e08 <_scanf_float+0x188>
 8008ce8:	d815      	bhi.n	8008d16 <_scanf_float+0x96>
 8008cea:	2b2b      	cmp	r3, #43	; 0x2b
 8008cec:	f000 808c 	beq.w	8008e08 <_scanf_float+0x188>
 8008cf0:	f1b9 0f00 	cmp.w	r9, #0
 8008cf4:	d003      	beq.n	8008cfe <_scanf_float+0x7e>
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	3a01      	subs	r2, #1
 8008d00:	2a01      	cmp	r2, #1
 8008d02:	f200 80ea 	bhi.w	8008eda <_scanf_float+0x25a>
 8008d06:	4545      	cmp	r5, r8
 8008d08:	f200 80dc 	bhi.w	8008ec4 <_scanf_float+0x244>
 8008d0c:	2601      	movs	r6, #1
 8008d0e:	4630      	mov	r0, r6
 8008d10:	b007      	add	sp, #28
 8008d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d16:	2b2e      	cmp	r3, #46	; 0x2e
 8008d18:	f000 809f 	beq.w	8008e5a <_scanf_float+0x1da>
 8008d1c:	2b30      	cmp	r3, #48	; 0x30
 8008d1e:	d1e7      	bne.n	8008cf0 <_scanf_float+0x70>
 8008d20:	6820      	ldr	r0, [r4, #0]
 8008d22:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008d26:	d064      	beq.n	8008df2 <_scanf_float+0x172>
 8008d28:	9b01      	ldr	r3, [sp, #4]
 8008d2a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8008d2e:	6020      	str	r0, [r4, #0]
 8008d30:	f109 0901 	add.w	r9, r9, #1
 8008d34:	b11b      	cbz	r3, 8008d3e <_scanf_float+0xbe>
 8008d36:	3b01      	subs	r3, #1
 8008d38:	3101      	adds	r1, #1
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	60a1      	str	r1, [r4, #8]
 8008d3e:	68a3      	ldr	r3, [r4, #8]
 8008d40:	3b01      	subs	r3, #1
 8008d42:	60a3      	str	r3, [r4, #8]
 8008d44:	6923      	ldr	r3, [r4, #16]
 8008d46:	3301      	adds	r3, #1
 8008d48:	6123      	str	r3, [r4, #16]
 8008d4a:	6873      	ldr	r3, [r6, #4]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	6073      	str	r3, [r6, #4]
 8008d52:	f340 80ac 	ble.w	8008eae <_scanf_float+0x22e>
 8008d56:	6833      	ldr	r3, [r6, #0]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	6033      	str	r3, [r6, #0]
 8008d5c:	e7b5      	b.n	8008cca <_scanf_float+0x4a>
 8008d5e:	2b45      	cmp	r3, #69	; 0x45
 8008d60:	f000 8085 	beq.w	8008e6e <_scanf_float+0x1ee>
 8008d64:	2b46      	cmp	r3, #70	; 0x46
 8008d66:	d06a      	beq.n	8008e3e <_scanf_float+0x1be>
 8008d68:	2b41      	cmp	r3, #65	; 0x41
 8008d6a:	d1c1      	bne.n	8008cf0 <_scanf_float+0x70>
 8008d6c:	2a01      	cmp	r2, #1
 8008d6e:	d1bf      	bne.n	8008cf0 <_scanf_float+0x70>
 8008d70:	2202      	movs	r2, #2
 8008d72:	e046      	b.n	8008e02 <_scanf_float+0x182>
 8008d74:	2b65      	cmp	r3, #101	; 0x65
 8008d76:	d07a      	beq.n	8008e6e <_scanf_float+0x1ee>
 8008d78:	d818      	bhi.n	8008dac <_scanf_float+0x12c>
 8008d7a:	2b54      	cmp	r3, #84	; 0x54
 8008d7c:	d066      	beq.n	8008e4c <_scanf_float+0x1cc>
 8008d7e:	d811      	bhi.n	8008da4 <_scanf_float+0x124>
 8008d80:	2b4e      	cmp	r3, #78	; 0x4e
 8008d82:	d1b5      	bne.n	8008cf0 <_scanf_float+0x70>
 8008d84:	2a00      	cmp	r2, #0
 8008d86:	d146      	bne.n	8008e16 <_scanf_float+0x196>
 8008d88:	f1b9 0f00 	cmp.w	r9, #0
 8008d8c:	d145      	bne.n	8008e1a <_scanf_float+0x19a>
 8008d8e:	6821      	ldr	r1, [r4, #0]
 8008d90:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008d94:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008d98:	d13f      	bne.n	8008e1a <_scanf_float+0x19a>
 8008d9a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008d9e:	6021      	str	r1, [r4, #0]
 8008da0:	2201      	movs	r2, #1
 8008da2:	e02e      	b.n	8008e02 <_scanf_float+0x182>
 8008da4:	2b59      	cmp	r3, #89	; 0x59
 8008da6:	d01e      	beq.n	8008de6 <_scanf_float+0x166>
 8008da8:	2b61      	cmp	r3, #97	; 0x61
 8008daa:	e7de      	b.n	8008d6a <_scanf_float+0xea>
 8008dac:	2b6e      	cmp	r3, #110	; 0x6e
 8008dae:	d0e9      	beq.n	8008d84 <_scanf_float+0x104>
 8008db0:	d815      	bhi.n	8008dde <_scanf_float+0x15e>
 8008db2:	2b66      	cmp	r3, #102	; 0x66
 8008db4:	d043      	beq.n	8008e3e <_scanf_float+0x1be>
 8008db6:	2b69      	cmp	r3, #105	; 0x69
 8008db8:	d19a      	bne.n	8008cf0 <_scanf_float+0x70>
 8008dba:	f1bb 0f00 	cmp.w	fp, #0
 8008dbe:	d138      	bne.n	8008e32 <_scanf_float+0x1b2>
 8008dc0:	f1b9 0f00 	cmp.w	r9, #0
 8008dc4:	d197      	bne.n	8008cf6 <_scanf_float+0x76>
 8008dc6:	6821      	ldr	r1, [r4, #0]
 8008dc8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008dcc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008dd0:	d195      	bne.n	8008cfe <_scanf_float+0x7e>
 8008dd2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008dd6:	6021      	str	r1, [r4, #0]
 8008dd8:	f04f 0b01 	mov.w	fp, #1
 8008ddc:	e011      	b.n	8008e02 <_scanf_float+0x182>
 8008dde:	2b74      	cmp	r3, #116	; 0x74
 8008de0:	d034      	beq.n	8008e4c <_scanf_float+0x1cc>
 8008de2:	2b79      	cmp	r3, #121	; 0x79
 8008de4:	d184      	bne.n	8008cf0 <_scanf_float+0x70>
 8008de6:	f1bb 0f07 	cmp.w	fp, #7
 8008dea:	d181      	bne.n	8008cf0 <_scanf_float+0x70>
 8008dec:	f04f 0b08 	mov.w	fp, #8
 8008df0:	e007      	b.n	8008e02 <_scanf_float+0x182>
 8008df2:	eb12 0f0b 	cmn.w	r2, fp
 8008df6:	f47f af7b 	bne.w	8008cf0 <_scanf_float+0x70>
 8008dfa:	6821      	ldr	r1, [r4, #0]
 8008dfc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8008e00:	6021      	str	r1, [r4, #0]
 8008e02:	702b      	strb	r3, [r5, #0]
 8008e04:	3501      	adds	r5, #1
 8008e06:	e79a      	b.n	8008d3e <_scanf_float+0xbe>
 8008e08:	6821      	ldr	r1, [r4, #0]
 8008e0a:	0608      	lsls	r0, r1, #24
 8008e0c:	f57f af70 	bpl.w	8008cf0 <_scanf_float+0x70>
 8008e10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008e14:	e7f4      	b.n	8008e00 <_scanf_float+0x180>
 8008e16:	2a02      	cmp	r2, #2
 8008e18:	d047      	beq.n	8008eaa <_scanf_float+0x22a>
 8008e1a:	f1bb 0f01 	cmp.w	fp, #1
 8008e1e:	d003      	beq.n	8008e28 <_scanf_float+0x1a8>
 8008e20:	f1bb 0f04 	cmp.w	fp, #4
 8008e24:	f47f af64 	bne.w	8008cf0 <_scanf_float+0x70>
 8008e28:	f10b 0b01 	add.w	fp, fp, #1
 8008e2c:	fa5f fb8b 	uxtb.w	fp, fp
 8008e30:	e7e7      	b.n	8008e02 <_scanf_float+0x182>
 8008e32:	f1bb 0f03 	cmp.w	fp, #3
 8008e36:	d0f7      	beq.n	8008e28 <_scanf_float+0x1a8>
 8008e38:	f1bb 0f05 	cmp.w	fp, #5
 8008e3c:	e7f2      	b.n	8008e24 <_scanf_float+0x1a4>
 8008e3e:	f1bb 0f02 	cmp.w	fp, #2
 8008e42:	f47f af55 	bne.w	8008cf0 <_scanf_float+0x70>
 8008e46:	f04f 0b03 	mov.w	fp, #3
 8008e4a:	e7da      	b.n	8008e02 <_scanf_float+0x182>
 8008e4c:	f1bb 0f06 	cmp.w	fp, #6
 8008e50:	f47f af4e 	bne.w	8008cf0 <_scanf_float+0x70>
 8008e54:	f04f 0b07 	mov.w	fp, #7
 8008e58:	e7d3      	b.n	8008e02 <_scanf_float+0x182>
 8008e5a:	6821      	ldr	r1, [r4, #0]
 8008e5c:	0588      	lsls	r0, r1, #22
 8008e5e:	f57f af47 	bpl.w	8008cf0 <_scanf_float+0x70>
 8008e62:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8008e66:	6021      	str	r1, [r4, #0]
 8008e68:	f8cd 9008 	str.w	r9, [sp, #8]
 8008e6c:	e7c9      	b.n	8008e02 <_scanf_float+0x182>
 8008e6e:	6821      	ldr	r1, [r4, #0]
 8008e70:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8008e74:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008e78:	d006      	beq.n	8008e88 <_scanf_float+0x208>
 8008e7a:	0548      	lsls	r0, r1, #21
 8008e7c:	f57f af38 	bpl.w	8008cf0 <_scanf_float+0x70>
 8008e80:	f1b9 0f00 	cmp.w	r9, #0
 8008e84:	f43f af3b 	beq.w	8008cfe <_scanf_float+0x7e>
 8008e88:	0588      	lsls	r0, r1, #22
 8008e8a:	bf58      	it	pl
 8008e8c:	9802      	ldrpl	r0, [sp, #8]
 8008e8e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008e92:	bf58      	it	pl
 8008e94:	eba9 0000 	subpl.w	r0, r9, r0
 8008e98:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008e9c:	bf58      	it	pl
 8008e9e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008ea2:	6021      	str	r1, [r4, #0]
 8008ea4:	f04f 0900 	mov.w	r9, #0
 8008ea8:	e7ab      	b.n	8008e02 <_scanf_float+0x182>
 8008eaa:	2203      	movs	r2, #3
 8008eac:	e7a9      	b.n	8008e02 <_scanf_float+0x182>
 8008eae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008eb2:	9205      	str	r2, [sp, #20]
 8008eb4:	4631      	mov	r1, r6
 8008eb6:	4638      	mov	r0, r7
 8008eb8:	4798      	blx	r3
 8008eba:	9a05      	ldr	r2, [sp, #20]
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	f43f af04 	beq.w	8008cca <_scanf_float+0x4a>
 8008ec2:	e715      	b.n	8008cf0 <_scanf_float+0x70>
 8008ec4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ec8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008ecc:	4632      	mov	r2, r6
 8008ece:	4638      	mov	r0, r7
 8008ed0:	4798      	blx	r3
 8008ed2:	6923      	ldr	r3, [r4, #16]
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	6123      	str	r3, [r4, #16]
 8008ed8:	e715      	b.n	8008d06 <_scanf_float+0x86>
 8008eda:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008ede:	2b06      	cmp	r3, #6
 8008ee0:	d80a      	bhi.n	8008ef8 <_scanf_float+0x278>
 8008ee2:	f1bb 0f02 	cmp.w	fp, #2
 8008ee6:	d968      	bls.n	8008fba <_scanf_float+0x33a>
 8008ee8:	f1ab 0b03 	sub.w	fp, fp, #3
 8008eec:	fa5f fb8b 	uxtb.w	fp, fp
 8008ef0:	eba5 0b0b 	sub.w	fp, r5, fp
 8008ef4:	455d      	cmp	r5, fp
 8008ef6:	d14b      	bne.n	8008f90 <_scanf_float+0x310>
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	05da      	lsls	r2, r3, #23
 8008efc:	d51f      	bpl.n	8008f3e <_scanf_float+0x2be>
 8008efe:	055b      	lsls	r3, r3, #21
 8008f00:	d468      	bmi.n	8008fd4 <_scanf_float+0x354>
 8008f02:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	2965      	cmp	r1, #101	; 0x65
 8008f0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f0e:	f105 3bff 	add.w	fp, r5, #4294967295
 8008f12:	6123      	str	r3, [r4, #16]
 8008f14:	d00d      	beq.n	8008f32 <_scanf_float+0x2b2>
 8008f16:	2945      	cmp	r1, #69	; 0x45
 8008f18:	d00b      	beq.n	8008f32 <_scanf_float+0x2b2>
 8008f1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f1e:	4632      	mov	r2, r6
 8008f20:	4638      	mov	r0, r7
 8008f22:	4798      	blx	r3
 8008f24:	6923      	ldr	r3, [r4, #16]
 8008f26:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	f1a5 0b02 	sub.w	fp, r5, #2
 8008f30:	6123      	str	r3, [r4, #16]
 8008f32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f36:	4632      	mov	r2, r6
 8008f38:	4638      	mov	r0, r7
 8008f3a:	4798      	blx	r3
 8008f3c:	465d      	mov	r5, fp
 8008f3e:	6826      	ldr	r6, [r4, #0]
 8008f40:	f016 0610 	ands.w	r6, r6, #16
 8008f44:	d17a      	bne.n	800903c <_scanf_float+0x3bc>
 8008f46:	702e      	strb	r6, [r5, #0]
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f52:	d142      	bne.n	8008fda <_scanf_float+0x35a>
 8008f54:	9b02      	ldr	r3, [sp, #8]
 8008f56:	eba9 0303 	sub.w	r3, r9, r3
 8008f5a:	425a      	negs	r2, r3
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d149      	bne.n	8008ff4 <_scanf_float+0x374>
 8008f60:	2200      	movs	r2, #0
 8008f62:	4641      	mov	r1, r8
 8008f64:	4638      	mov	r0, r7
 8008f66:	f000 ffc7 	bl	8009ef8 <_strtod_r>
 8008f6a:	6825      	ldr	r5, [r4, #0]
 8008f6c:	f8da 3000 	ldr.w	r3, [sl]
 8008f70:	f015 0f02 	tst.w	r5, #2
 8008f74:	f103 0204 	add.w	r2, r3, #4
 8008f78:	ec59 8b10 	vmov	r8, r9, d0
 8008f7c:	f8ca 2000 	str.w	r2, [sl]
 8008f80:	d043      	beq.n	800900a <_scanf_float+0x38a>
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	e9c3 8900 	strd	r8, r9, [r3]
 8008f88:	68e3      	ldr	r3, [r4, #12]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	60e3      	str	r3, [r4, #12]
 8008f8e:	e6be      	b.n	8008d0e <_scanf_float+0x8e>
 8008f90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008f98:	4632      	mov	r2, r6
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	4798      	blx	r3
 8008f9e:	6923      	ldr	r3, [r4, #16]
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	6123      	str	r3, [r4, #16]
 8008fa4:	e7a6      	b.n	8008ef4 <_scanf_float+0x274>
 8008fa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008faa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008fae:	4632      	mov	r2, r6
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	4798      	blx	r3
 8008fb4:	6923      	ldr	r3, [r4, #16]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	6123      	str	r3, [r4, #16]
 8008fba:	4545      	cmp	r5, r8
 8008fbc:	d8f3      	bhi.n	8008fa6 <_scanf_float+0x326>
 8008fbe:	e6a5      	b.n	8008d0c <_scanf_float+0x8c>
 8008fc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fc4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008fc8:	4632      	mov	r2, r6
 8008fca:	4638      	mov	r0, r7
 8008fcc:	4798      	blx	r3
 8008fce:	6923      	ldr	r3, [r4, #16]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	6123      	str	r3, [r4, #16]
 8008fd4:	4545      	cmp	r5, r8
 8008fd6:	d8f3      	bhi.n	8008fc0 <_scanf_float+0x340>
 8008fd8:	e698      	b.n	8008d0c <_scanf_float+0x8c>
 8008fda:	9b03      	ldr	r3, [sp, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d0bf      	beq.n	8008f60 <_scanf_float+0x2e0>
 8008fe0:	9904      	ldr	r1, [sp, #16]
 8008fe2:	230a      	movs	r3, #10
 8008fe4:	4632      	mov	r2, r6
 8008fe6:	3101      	adds	r1, #1
 8008fe8:	4638      	mov	r0, r7
 8008fea:	f001 f811 	bl	800a010 <_strtol_r>
 8008fee:	9b03      	ldr	r3, [sp, #12]
 8008ff0:	9d04      	ldr	r5, [sp, #16]
 8008ff2:	1ac2      	subs	r2, r0, r3
 8008ff4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008ff8:	429d      	cmp	r5, r3
 8008ffa:	bf28      	it	cs
 8008ffc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009000:	490f      	ldr	r1, [pc, #60]	; (8009040 <_scanf_float+0x3c0>)
 8009002:	4628      	mov	r0, r5
 8009004:	f000 f902 	bl	800920c <siprintf>
 8009008:	e7aa      	b.n	8008f60 <_scanf_float+0x2e0>
 800900a:	f015 0504 	ands.w	r5, r5, #4
 800900e:	d1b8      	bne.n	8008f82 <_scanf_float+0x302>
 8009010:	681f      	ldr	r7, [r3, #0]
 8009012:	ee10 2a10 	vmov	r2, s0
 8009016:	464b      	mov	r3, r9
 8009018:	ee10 0a10 	vmov	r0, s0
 800901c:	4649      	mov	r1, r9
 800901e:	f7f7 fdad 	bl	8000b7c <__aeabi_dcmpun>
 8009022:	b128      	cbz	r0, 8009030 <_scanf_float+0x3b0>
 8009024:	4628      	mov	r0, r5
 8009026:	f000 f8eb 	bl	8009200 <nanf>
 800902a:	ed87 0a00 	vstr	s0, [r7]
 800902e:	e7ab      	b.n	8008f88 <_scanf_float+0x308>
 8009030:	4640      	mov	r0, r8
 8009032:	4649      	mov	r1, r9
 8009034:	f7f7 fe00 	bl	8000c38 <__aeabi_d2f>
 8009038:	6038      	str	r0, [r7, #0]
 800903a:	e7a5      	b.n	8008f88 <_scanf_float+0x308>
 800903c:	2600      	movs	r6, #0
 800903e:	e666      	b.n	8008d0e <_scanf_float+0x8e>
 8009040:	0800c6a0 	.word	0x0800c6a0

08009044 <iprintf>:
 8009044:	b40f      	push	{r0, r1, r2, r3}
 8009046:	4b0a      	ldr	r3, [pc, #40]	; (8009070 <iprintf+0x2c>)
 8009048:	b513      	push	{r0, r1, r4, lr}
 800904a:	681c      	ldr	r4, [r3, #0]
 800904c:	b124      	cbz	r4, 8009058 <iprintf+0x14>
 800904e:	69a3      	ldr	r3, [r4, #24]
 8009050:	b913      	cbnz	r3, 8009058 <iprintf+0x14>
 8009052:	4620      	mov	r0, r4
 8009054:	f7ff f85a 	bl	800810c <__sinit>
 8009058:	ab05      	add	r3, sp, #20
 800905a:	9a04      	ldr	r2, [sp, #16]
 800905c:	68a1      	ldr	r1, [r4, #8]
 800905e:	9301      	str	r3, [sp, #4]
 8009060:	4620      	mov	r0, r4
 8009062:	f002 ffad 	bl	800bfc0 <_vfiprintf_r>
 8009066:	b002      	add	sp, #8
 8009068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800906c:	b004      	add	sp, #16
 800906e:	4770      	bx	lr
 8009070:	20000040 	.word	0x20000040

08009074 <_sbrk_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	4c06      	ldr	r4, [pc, #24]	; (8009090 <_sbrk_r+0x1c>)
 8009078:	2300      	movs	r3, #0
 800907a:	4605      	mov	r5, r0
 800907c:	4608      	mov	r0, r1
 800907e:	6023      	str	r3, [r4, #0]
 8009080:	f7f9 fdea 	bl	8002c58 <_sbrk>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	d102      	bne.n	800908e <_sbrk_r+0x1a>
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	b103      	cbz	r3, 800908e <_sbrk_r+0x1a>
 800908c:	602b      	str	r3, [r5, #0]
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	20000888 	.word	0x20000888

08009094 <setbuf>:
 8009094:	2900      	cmp	r1, #0
 8009096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800909a:	bf0c      	ite	eq
 800909c:	2202      	moveq	r2, #2
 800909e:	2200      	movne	r2, #0
 80090a0:	f000 b800 	b.w	80090a4 <setvbuf>

080090a4 <setvbuf>:
 80090a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090a8:	461d      	mov	r5, r3
 80090aa:	4b51      	ldr	r3, [pc, #324]	; (80091f0 <setvbuf+0x14c>)
 80090ac:	681e      	ldr	r6, [r3, #0]
 80090ae:	4604      	mov	r4, r0
 80090b0:	460f      	mov	r7, r1
 80090b2:	4690      	mov	r8, r2
 80090b4:	b126      	cbz	r6, 80090c0 <setvbuf+0x1c>
 80090b6:	69b3      	ldr	r3, [r6, #24]
 80090b8:	b913      	cbnz	r3, 80090c0 <setvbuf+0x1c>
 80090ba:	4630      	mov	r0, r6
 80090bc:	f7ff f826 	bl	800810c <__sinit>
 80090c0:	4b4c      	ldr	r3, [pc, #304]	; (80091f4 <setvbuf+0x150>)
 80090c2:	429c      	cmp	r4, r3
 80090c4:	d152      	bne.n	800916c <setvbuf+0xc8>
 80090c6:	6874      	ldr	r4, [r6, #4]
 80090c8:	f1b8 0f02 	cmp.w	r8, #2
 80090cc:	d006      	beq.n	80090dc <setvbuf+0x38>
 80090ce:	f1b8 0f01 	cmp.w	r8, #1
 80090d2:	f200 8089 	bhi.w	80091e8 <setvbuf+0x144>
 80090d6:	2d00      	cmp	r5, #0
 80090d8:	f2c0 8086 	blt.w	80091e8 <setvbuf+0x144>
 80090dc:	4621      	mov	r1, r4
 80090de:	4630      	mov	r0, r6
 80090e0:	f7fe ff98 	bl	8008014 <_fflush_r>
 80090e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090e6:	b141      	cbz	r1, 80090fa <setvbuf+0x56>
 80090e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090ec:	4299      	cmp	r1, r3
 80090ee:	d002      	beq.n	80090f6 <setvbuf+0x52>
 80090f0:	4630      	mov	r0, r6
 80090f2:	f7ff f8c1 	bl	8008278 <_free_r>
 80090f6:	2300      	movs	r3, #0
 80090f8:	6363      	str	r3, [r4, #52]	; 0x34
 80090fa:	2300      	movs	r3, #0
 80090fc:	61a3      	str	r3, [r4, #24]
 80090fe:	6063      	str	r3, [r4, #4]
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	061b      	lsls	r3, r3, #24
 8009104:	d503      	bpl.n	800910e <setvbuf+0x6a>
 8009106:	6921      	ldr	r1, [r4, #16]
 8009108:	4630      	mov	r0, r6
 800910a:	f7ff f8b5 	bl	8008278 <_free_r>
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009114:	f023 0303 	bic.w	r3, r3, #3
 8009118:	f1b8 0f02 	cmp.w	r8, #2
 800911c:	81a3      	strh	r3, [r4, #12]
 800911e:	d05d      	beq.n	80091dc <setvbuf+0x138>
 8009120:	ab01      	add	r3, sp, #4
 8009122:	466a      	mov	r2, sp
 8009124:	4621      	mov	r1, r4
 8009126:	4630      	mov	r0, r6
 8009128:	f002 f936 	bl	800b398 <__swhatbuf_r>
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	4318      	orrs	r0, r3
 8009130:	81a0      	strh	r0, [r4, #12]
 8009132:	bb2d      	cbnz	r5, 8009180 <setvbuf+0xdc>
 8009134:	9d00      	ldr	r5, [sp, #0]
 8009136:	4628      	mov	r0, r5
 8009138:	f002 f992 	bl	800b460 <malloc>
 800913c:	4607      	mov	r7, r0
 800913e:	2800      	cmp	r0, #0
 8009140:	d14e      	bne.n	80091e0 <setvbuf+0x13c>
 8009142:	f8dd 9000 	ldr.w	r9, [sp]
 8009146:	45a9      	cmp	r9, r5
 8009148:	d13c      	bne.n	80091c4 <setvbuf+0x120>
 800914a:	f04f 30ff 	mov.w	r0, #4294967295
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	f043 0302 	orr.w	r3, r3, #2
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	2300      	movs	r3, #0
 8009158:	60a3      	str	r3, [r4, #8]
 800915a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800915e:	6023      	str	r3, [r4, #0]
 8009160:	6123      	str	r3, [r4, #16]
 8009162:	2301      	movs	r3, #1
 8009164:	6163      	str	r3, [r4, #20]
 8009166:	b003      	add	sp, #12
 8009168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800916c:	4b22      	ldr	r3, [pc, #136]	; (80091f8 <setvbuf+0x154>)
 800916e:	429c      	cmp	r4, r3
 8009170:	d101      	bne.n	8009176 <setvbuf+0xd2>
 8009172:	68b4      	ldr	r4, [r6, #8]
 8009174:	e7a8      	b.n	80090c8 <setvbuf+0x24>
 8009176:	4b21      	ldr	r3, [pc, #132]	; (80091fc <setvbuf+0x158>)
 8009178:	429c      	cmp	r4, r3
 800917a:	bf08      	it	eq
 800917c:	68f4      	ldreq	r4, [r6, #12]
 800917e:	e7a3      	b.n	80090c8 <setvbuf+0x24>
 8009180:	2f00      	cmp	r7, #0
 8009182:	d0d8      	beq.n	8009136 <setvbuf+0x92>
 8009184:	69b3      	ldr	r3, [r6, #24]
 8009186:	b913      	cbnz	r3, 800918e <setvbuf+0xea>
 8009188:	4630      	mov	r0, r6
 800918a:	f7fe ffbf 	bl	800810c <__sinit>
 800918e:	f1b8 0f01 	cmp.w	r8, #1
 8009192:	bf08      	it	eq
 8009194:	89a3      	ldrheq	r3, [r4, #12]
 8009196:	6027      	str	r7, [r4, #0]
 8009198:	bf04      	itt	eq
 800919a:	f043 0301 	orreq.w	r3, r3, #1
 800919e:	81a3      	strheq	r3, [r4, #12]
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	f013 0008 	ands.w	r0, r3, #8
 80091a6:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80091aa:	d01b      	beq.n	80091e4 <setvbuf+0x140>
 80091ac:	f013 0001 	ands.w	r0, r3, #1
 80091b0:	bf18      	it	ne
 80091b2:	426d      	negne	r5, r5
 80091b4:	f04f 0300 	mov.w	r3, #0
 80091b8:	bf1d      	ittte	ne
 80091ba:	60a3      	strne	r3, [r4, #8]
 80091bc:	61a5      	strne	r5, [r4, #24]
 80091be:	4618      	movne	r0, r3
 80091c0:	60a5      	streq	r5, [r4, #8]
 80091c2:	e7d0      	b.n	8009166 <setvbuf+0xc2>
 80091c4:	4648      	mov	r0, r9
 80091c6:	f002 f94b 	bl	800b460 <malloc>
 80091ca:	4607      	mov	r7, r0
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d0bc      	beq.n	800914a <setvbuf+0xa6>
 80091d0:	89a3      	ldrh	r3, [r4, #12]
 80091d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d6:	81a3      	strh	r3, [r4, #12]
 80091d8:	464d      	mov	r5, r9
 80091da:	e7d3      	b.n	8009184 <setvbuf+0xe0>
 80091dc:	2000      	movs	r0, #0
 80091de:	e7b6      	b.n	800914e <setvbuf+0xaa>
 80091e0:	46a9      	mov	r9, r5
 80091e2:	e7f5      	b.n	80091d0 <setvbuf+0x12c>
 80091e4:	60a0      	str	r0, [r4, #8]
 80091e6:	e7be      	b.n	8009166 <setvbuf+0xc2>
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ec:	e7bb      	b.n	8009166 <setvbuf+0xc2>
 80091ee:	bf00      	nop
 80091f0:	20000040 	.word	0x20000040
 80091f4:	0800c628 	.word	0x0800c628
 80091f8:	0800c648 	.word	0x0800c648
 80091fc:	0800c608 	.word	0x0800c608

08009200 <nanf>:
 8009200:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009208 <nanf+0x8>
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	7fc00000 	.word	0x7fc00000

0800920c <siprintf>:
 800920c:	b40e      	push	{r1, r2, r3}
 800920e:	b500      	push	{lr}
 8009210:	b09c      	sub	sp, #112	; 0x70
 8009212:	ab1d      	add	r3, sp, #116	; 0x74
 8009214:	9002      	str	r0, [sp, #8]
 8009216:	9006      	str	r0, [sp, #24]
 8009218:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800921c:	4809      	ldr	r0, [pc, #36]	; (8009244 <siprintf+0x38>)
 800921e:	9107      	str	r1, [sp, #28]
 8009220:	9104      	str	r1, [sp, #16]
 8009222:	4909      	ldr	r1, [pc, #36]	; (8009248 <siprintf+0x3c>)
 8009224:	f853 2b04 	ldr.w	r2, [r3], #4
 8009228:	9105      	str	r1, [sp, #20]
 800922a:	6800      	ldr	r0, [r0, #0]
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	a902      	add	r1, sp, #8
 8009230:	f002 fda4 	bl	800bd7c <_svfiprintf_r>
 8009234:	9b02      	ldr	r3, [sp, #8]
 8009236:	2200      	movs	r2, #0
 8009238:	701a      	strb	r2, [r3, #0]
 800923a:	b01c      	add	sp, #112	; 0x70
 800923c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009240:	b003      	add	sp, #12
 8009242:	4770      	bx	lr
 8009244:	20000040 	.word	0x20000040
 8009248:	ffff0208 	.word	0xffff0208

0800924c <__sread>:
 800924c:	b510      	push	{r4, lr}
 800924e:	460c      	mov	r4, r1
 8009250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009254:	f002 ffca 	bl	800c1ec <_read_r>
 8009258:	2800      	cmp	r0, #0
 800925a:	bfab      	itete	ge
 800925c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800925e:	89a3      	ldrhlt	r3, [r4, #12]
 8009260:	181b      	addge	r3, r3, r0
 8009262:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009266:	bfac      	ite	ge
 8009268:	6563      	strge	r3, [r4, #84]	; 0x54
 800926a:	81a3      	strhlt	r3, [r4, #12]
 800926c:	bd10      	pop	{r4, pc}

0800926e <__swrite>:
 800926e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009272:	461f      	mov	r7, r3
 8009274:	898b      	ldrh	r3, [r1, #12]
 8009276:	05db      	lsls	r3, r3, #23
 8009278:	4605      	mov	r5, r0
 800927a:	460c      	mov	r4, r1
 800927c:	4616      	mov	r6, r2
 800927e:	d505      	bpl.n	800928c <__swrite+0x1e>
 8009280:	2302      	movs	r3, #2
 8009282:	2200      	movs	r2, #0
 8009284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009288:	f002 f874 	bl	800b374 <_lseek_r>
 800928c:	89a3      	ldrh	r3, [r4, #12]
 800928e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	4632      	mov	r2, r6
 800929a:	463b      	mov	r3, r7
 800929c:	4628      	mov	r0, r5
 800929e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092a2:	f000 bec7 	b.w	800a034 <_write_r>

080092a6 <__sseek>:
 80092a6:	b510      	push	{r4, lr}
 80092a8:	460c      	mov	r4, r1
 80092aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ae:	f002 f861 	bl	800b374 <_lseek_r>
 80092b2:	1c43      	adds	r3, r0, #1
 80092b4:	89a3      	ldrh	r3, [r4, #12]
 80092b6:	bf15      	itete	ne
 80092b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80092ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092c2:	81a3      	strheq	r3, [r4, #12]
 80092c4:	bf18      	it	ne
 80092c6:	81a3      	strhne	r3, [r4, #12]
 80092c8:	bd10      	pop	{r4, pc}

080092ca <__sclose>:
 80092ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ce:	f000 bec3 	b.w	800a058 <_close_r>

080092d2 <sulp>:
 80092d2:	b570      	push	{r4, r5, r6, lr}
 80092d4:	4604      	mov	r4, r0
 80092d6:	460d      	mov	r5, r1
 80092d8:	ec45 4b10 	vmov	d0, r4, r5
 80092dc:	4616      	mov	r6, r2
 80092de:	f002 fbb1 	bl	800ba44 <__ulp>
 80092e2:	ec51 0b10 	vmov	r0, r1, d0
 80092e6:	b17e      	cbz	r6, 8009308 <sulp+0x36>
 80092e8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80092ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	dd09      	ble.n	8009308 <sulp+0x36>
 80092f4:	051b      	lsls	r3, r3, #20
 80092f6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80092fa:	2400      	movs	r4, #0
 80092fc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009300:	4622      	mov	r2, r4
 8009302:	462b      	mov	r3, r5
 8009304:	f7f7 f9a0 	bl	8000648 <__aeabi_dmul>
 8009308:	bd70      	pop	{r4, r5, r6, pc}
 800930a:	0000      	movs	r0, r0
 800930c:	0000      	movs	r0, r0
	...

08009310 <_strtod_l>:
 8009310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	461f      	mov	r7, r3
 8009316:	b0a1      	sub	sp, #132	; 0x84
 8009318:	2300      	movs	r3, #0
 800931a:	4681      	mov	r9, r0
 800931c:	4638      	mov	r0, r7
 800931e:	460e      	mov	r6, r1
 8009320:	9217      	str	r2, [sp, #92]	; 0x5c
 8009322:	931c      	str	r3, [sp, #112]	; 0x70
 8009324:	f002 f815 	bl	800b352 <__localeconv_l>
 8009328:	4680      	mov	r8, r0
 800932a:	6800      	ldr	r0, [r0, #0]
 800932c:	f7f6 ff78 	bl	8000220 <strlen>
 8009330:	f04f 0a00 	mov.w	sl, #0
 8009334:	4604      	mov	r4, r0
 8009336:	f04f 0b00 	mov.w	fp, #0
 800933a:	961b      	str	r6, [sp, #108]	; 0x6c
 800933c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800933e:	781a      	ldrb	r2, [r3, #0]
 8009340:	2a0d      	cmp	r2, #13
 8009342:	d832      	bhi.n	80093aa <_strtod_l+0x9a>
 8009344:	2a09      	cmp	r2, #9
 8009346:	d236      	bcs.n	80093b6 <_strtod_l+0xa6>
 8009348:	2a00      	cmp	r2, #0
 800934a:	d03e      	beq.n	80093ca <_strtod_l+0xba>
 800934c:	2300      	movs	r3, #0
 800934e:	930d      	str	r3, [sp, #52]	; 0x34
 8009350:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009352:	782b      	ldrb	r3, [r5, #0]
 8009354:	2b30      	cmp	r3, #48	; 0x30
 8009356:	f040 80ac 	bne.w	80094b2 <_strtod_l+0x1a2>
 800935a:	786b      	ldrb	r3, [r5, #1]
 800935c:	2b58      	cmp	r3, #88	; 0x58
 800935e:	d001      	beq.n	8009364 <_strtod_l+0x54>
 8009360:	2b78      	cmp	r3, #120	; 0x78
 8009362:	d167      	bne.n	8009434 <_strtod_l+0x124>
 8009364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009366:	9301      	str	r3, [sp, #4]
 8009368:	ab1c      	add	r3, sp, #112	; 0x70
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	9702      	str	r7, [sp, #8]
 800936e:	ab1d      	add	r3, sp, #116	; 0x74
 8009370:	4a88      	ldr	r2, [pc, #544]	; (8009594 <_strtod_l+0x284>)
 8009372:	a91b      	add	r1, sp, #108	; 0x6c
 8009374:	4648      	mov	r0, r9
 8009376:	f001 fd12 	bl	800ad9e <__gethex>
 800937a:	f010 0407 	ands.w	r4, r0, #7
 800937e:	4606      	mov	r6, r0
 8009380:	d005      	beq.n	800938e <_strtod_l+0x7e>
 8009382:	2c06      	cmp	r4, #6
 8009384:	d12b      	bne.n	80093de <_strtod_l+0xce>
 8009386:	3501      	adds	r5, #1
 8009388:	2300      	movs	r3, #0
 800938a:	951b      	str	r5, [sp, #108]	; 0x6c
 800938c:	930d      	str	r3, [sp, #52]	; 0x34
 800938e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009390:	2b00      	cmp	r3, #0
 8009392:	f040 859a 	bne.w	8009eca <_strtod_l+0xbba>
 8009396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009398:	b1e3      	cbz	r3, 80093d4 <_strtod_l+0xc4>
 800939a:	4652      	mov	r2, sl
 800939c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80093a0:	ec43 2b10 	vmov	d0, r2, r3
 80093a4:	b021      	add	sp, #132	; 0x84
 80093a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093aa:	2a2b      	cmp	r2, #43	; 0x2b
 80093ac:	d015      	beq.n	80093da <_strtod_l+0xca>
 80093ae:	2a2d      	cmp	r2, #45	; 0x2d
 80093b0:	d004      	beq.n	80093bc <_strtod_l+0xac>
 80093b2:	2a20      	cmp	r2, #32
 80093b4:	d1ca      	bne.n	800934c <_strtod_l+0x3c>
 80093b6:	3301      	adds	r3, #1
 80093b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80093ba:	e7bf      	b.n	800933c <_strtod_l+0x2c>
 80093bc:	2201      	movs	r2, #1
 80093be:	920d      	str	r2, [sp, #52]	; 0x34
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	921b      	str	r2, [sp, #108]	; 0x6c
 80093c4:	785b      	ldrb	r3, [r3, #1]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1c2      	bne.n	8009350 <_strtod_l+0x40>
 80093ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093cc:	961b      	str	r6, [sp, #108]	; 0x6c
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f040 8579 	bne.w	8009ec6 <_strtod_l+0xbb6>
 80093d4:	4652      	mov	r2, sl
 80093d6:	465b      	mov	r3, fp
 80093d8:	e7e2      	b.n	80093a0 <_strtod_l+0x90>
 80093da:	2200      	movs	r2, #0
 80093dc:	e7ef      	b.n	80093be <_strtod_l+0xae>
 80093de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80093e0:	b13a      	cbz	r2, 80093f2 <_strtod_l+0xe2>
 80093e2:	2135      	movs	r1, #53	; 0x35
 80093e4:	a81e      	add	r0, sp, #120	; 0x78
 80093e6:	f002 fc25 	bl	800bc34 <__copybits>
 80093ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80093ec:	4648      	mov	r0, r9
 80093ee:	f002 f892 	bl	800b516 <_Bfree>
 80093f2:	3c01      	subs	r4, #1
 80093f4:	2c04      	cmp	r4, #4
 80093f6:	d806      	bhi.n	8009406 <_strtod_l+0xf6>
 80093f8:	e8df f004 	tbb	[pc, r4]
 80093fc:	1714030a 	.word	0x1714030a
 8009400:	0a          	.byte	0x0a
 8009401:	00          	.byte	0x00
 8009402:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8009406:	0730      	lsls	r0, r6, #28
 8009408:	d5c1      	bpl.n	800938e <_strtod_l+0x7e>
 800940a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800940e:	e7be      	b.n	800938e <_strtod_l+0x7e>
 8009410:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8009414:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009416:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800941a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800941e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009422:	e7f0      	b.n	8009406 <_strtod_l+0xf6>
 8009424:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009598 <_strtod_l+0x288>
 8009428:	e7ed      	b.n	8009406 <_strtod_l+0xf6>
 800942a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800942e:	f04f 3aff 	mov.w	sl, #4294967295
 8009432:	e7e8      	b.n	8009406 <_strtod_l+0xf6>
 8009434:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009436:	1c5a      	adds	r2, r3, #1
 8009438:	921b      	str	r2, [sp, #108]	; 0x6c
 800943a:	785b      	ldrb	r3, [r3, #1]
 800943c:	2b30      	cmp	r3, #48	; 0x30
 800943e:	d0f9      	beq.n	8009434 <_strtod_l+0x124>
 8009440:	2b00      	cmp	r3, #0
 8009442:	d0a4      	beq.n	800938e <_strtod_l+0x7e>
 8009444:	2301      	movs	r3, #1
 8009446:	2500      	movs	r5, #0
 8009448:	9306      	str	r3, [sp, #24]
 800944a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800944c:	9308      	str	r3, [sp, #32]
 800944e:	9507      	str	r5, [sp, #28]
 8009450:	9505      	str	r5, [sp, #20]
 8009452:	220a      	movs	r2, #10
 8009454:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009456:	7807      	ldrb	r7, [r0, #0]
 8009458:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800945c:	b2d9      	uxtb	r1, r3
 800945e:	2909      	cmp	r1, #9
 8009460:	d929      	bls.n	80094b6 <_strtod_l+0x1a6>
 8009462:	4622      	mov	r2, r4
 8009464:	f8d8 1000 	ldr.w	r1, [r8]
 8009468:	f002 fed2 	bl	800c210 <strncmp>
 800946c:	2800      	cmp	r0, #0
 800946e:	d031      	beq.n	80094d4 <_strtod_l+0x1c4>
 8009470:	2000      	movs	r0, #0
 8009472:	9c05      	ldr	r4, [sp, #20]
 8009474:	9004      	str	r0, [sp, #16]
 8009476:	463b      	mov	r3, r7
 8009478:	4602      	mov	r2, r0
 800947a:	2b65      	cmp	r3, #101	; 0x65
 800947c:	d001      	beq.n	8009482 <_strtod_l+0x172>
 800947e:	2b45      	cmp	r3, #69	; 0x45
 8009480:	d114      	bne.n	80094ac <_strtod_l+0x19c>
 8009482:	b924      	cbnz	r4, 800948e <_strtod_l+0x17e>
 8009484:	b910      	cbnz	r0, 800948c <_strtod_l+0x17c>
 8009486:	9b06      	ldr	r3, [sp, #24]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d09e      	beq.n	80093ca <_strtod_l+0xba>
 800948c:	2400      	movs	r4, #0
 800948e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009490:	1c73      	adds	r3, r6, #1
 8009492:	931b      	str	r3, [sp, #108]	; 0x6c
 8009494:	7873      	ldrb	r3, [r6, #1]
 8009496:	2b2b      	cmp	r3, #43	; 0x2b
 8009498:	d078      	beq.n	800958c <_strtod_l+0x27c>
 800949a:	2b2d      	cmp	r3, #45	; 0x2d
 800949c:	d070      	beq.n	8009580 <_strtod_l+0x270>
 800949e:	f04f 0c00 	mov.w	ip, #0
 80094a2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80094a6:	2f09      	cmp	r7, #9
 80094a8:	d97c      	bls.n	80095a4 <_strtod_l+0x294>
 80094aa:	961b      	str	r6, [sp, #108]	; 0x6c
 80094ac:	f04f 0e00 	mov.w	lr, #0
 80094b0:	e09a      	b.n	80095e8 <_strtod_l+0x2d8>
 80094b2:	2300      	movs	r3, #0
 80094b4:	e7c7      	b.n	8009446 <_strtod_l+0x136>
 80094b6:	9905      	ldr	r1, [sp, #20]
 80094b8:	2908      	cmp	r1, #8
 80094ba:	bfdd      	ittte	le
 80094bc:	9907      	ldrle	r1, [sp, #28]
 80094be:	fb02 3301 	mlale	r3, r2, r1, r3
 80094c2:	9307      	strle	r3, [sp, #28]
 80094c4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80094c8:	9b05      	ldr	r3, [sp, #20]
 80094ca:	3001      	adds	r0, #1
 80094cc:	3301      	adds	r3, #1
 80094ce:	9305      	str	r3, [sp, #20]
 80094d0:	901b      	str	r0, [sp, #108]	; 0x6c
 80094d2:	e7bf      	b.n	8009454 <_strtod_l+0x144>
 80094d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094d6:	191a      	adds	r2, r3, r4
 80094d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80094da:	9a05      	ldr	r2, [sp, #20]
 80094dc:	5d1b      	ldrb	r3, [r3, r4]
 80094de:	2a00      	cmp	r2, #0
 80094e0:	d037      	beq.n	8009552 <_strtod_l+0x242>
 80094e2:	9c05      	ldr	r4, [sp, #20]
 80094e4:	4602      	mov	r2, r0
 80094e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80094ea:	2909      	cmp	r1, #9
 80094ec:	d913      	bls.n	8009516 <_strtod_l+0x206>
 80094ee:	2101      	movs	r1, #1
 80094f0:	9104      	str	r1, [sp, #16]
 80094f2:	e7c2      	b.n	800947a <_strtod_l+0x16a>
 80094f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094f6:	1c5a      	adds	r2, r3, #1
 80094f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80094fa:	785b      	ldrb	r3, [r3, #1]
 80094fc:	3001      	adds	r0, #1
 80094fe:	2b30      	cmp	r3, #48	; 0x30
 8009500:	d0f8      	beq.n	80094f4 <_strtod_l+0x1e4>
 8009502:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009506:	2a08      	cmp	r2, #8
 8009508:	f200 84e4 	bhi.w	8009ed4 <_strtod_l+0xbc4>
 800950c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800950e:	9208      	str	r2, [sp, #32]
 8009510:	4602      	mov	r2, r0
 8009512:	2000      	movs	r0, #0
 8009514:	4604      	mov	r4, r0
 8009516:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800951a:	f100 0101 	add.w	r1, r0, #1
 800951e:	d012      	beq.n	8009546 <_strtod_l+0x236>
 8009520:	440a      	add	r2, r1
 8009522:	eb00 0c04 	add.w	ip, r0, r4
 8009526:	4621      	mov	r1, r4
 8009528:	270a      	movs	r7, #10
 800952a:	458c      	cmp	ip, r1
 800952c:	d113      	bne.n	8009556 <_strtod_l+0x246>
 800952e:	1821      	adds	r1, r4, r0
 8009530:	2908      	cmp	r1, #8
 8009532:	f104 0401 	add.w	r4, r4, #1
 8009536:	4404      	add	r4, r0
 8009538:	dc19      	bgt.n	800956e <_strtod_l+0x25e>
 800953a:	9b07      	ldr	r3, [sp, #28]
 800953c:	210a      	movs	r1, #10
 800953e:	fb01 e303 	mla	r3, r1, r3, lr
 8009542:	9307      	str	r3, [sp, #28]
 8009544:	2100      	movs	r1, #0
 8009546:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009548:	1c58      	adds	r0, r3, #1
 800954a:	901b      	str	r0, [sp, #108]	; 0x6c
 800954c:	785b      	ldrb	r3, [r3, #1]
 800954e:	4608      	mov	r0, r1
 8009550:	e7c9      	b.n	80094e6 <_strtod_l+0x1d6>
 8009552:	9805      	ldr	r0, [sp, #20]
 8009554:	e7d3      	b.n	80094fe <_strtod_l+0x1ee>
 8009556:	2908      	cmp	r1, #8
 8009558:	f101 0101 	add.w	r1, r1, #1
 800955c:	dc03      	bgt.n	8009566 <_strtod_l+0x256>
 800955e:	9b07      	ldr	r3, [sp, #28]
 8009560:	437b      	muls	r3, r7
 8009562:	9307      	str	r3, [sp, #28]
 8009564:	e7e1      	b.n	800952a <_strtod_l+0x21a>
 8009566:	2910      	cmp	r1, #16
 8009568:	bfd8      	it	le
 800956a:	437d      	mulle	r5, r7
 800956c:	e7dd      	b.n	800952a <_strtod_l+0x21a>
 800956e:	2c10      	cmp	r4, #16
 8009570:	bfdc      	itt	le
 8009572:	210a      	movle	r1, #10
 8009574:	fb01 e505 	mlale	r5, r1, r5, lr
 8009578:	e7e4      	b.n	8009544 <_strtod_l+0x234>
 800957a:	2301      	movs	r3, #1
 800957c:	9304      	str	r3, [sp, #16]
 800957e:	e781      	b.n	8009484 <_strtod_l+0x174>
 8009580:	f04f 0c01 	mov.w	ip, #1
 8009584:	1cb3      	adds	r3, r6, #2
 8009586:	931b      	str	r3, [sp, #108]	; 0x6c
 8009588:	78b3      	ldrb	r3, [r6, #2]
 800958a:	e78a      	b.n	80094a2 <_strtod_l+0x192>
 800958c:	f04f 0c00 	mov.w	ip, #0
 8009590:	e7f8      	b.n	8009584 <_strtod_l+0x274>
 8009592:	bf00      	nop
 8009594:	0800c6a8 	.word	0x0800c6a8
 8009598:	7ff00000 	.word	0x7ff00000
 800959c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800959e:	1c5f      	adds	r7, r3, #1
 80095a0:	971b      	str	r7, [sp, #108]	; 0x6c
 80095a2:	785b      	ldrb	r3, [r3, #1]
 80095a4:	2b30      	cmp	r3, #48	; 0x30
 80095a6:	d0f9      	beq.n	800959c <_strtod_l+0x28c>
 80095a8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80095ac:	2f08      	cmp	r7, #8
 80095ae:	f63f af7d 	bhi.w	80094ac <_strtod_l+0x19c>
 80095b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80095b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095b8:	930a      	str	r3, [sp, #40]	; 0x28
 80095ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095bc:	1c5f      	adds	r7, r3, #1
 80095be:	971b      	str	r7, [sp, #108]	; 0x6c
 80095c0:	785b      	ldrb	r3, [r3, #1]
 80095c2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80095c6:	f1b8 0f09 	cmp.w	r8, #9
 80095ca:	d937      	bls.n	800963c <_strtod_l+0x32c>
 80095cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095ce:	1a7f      	subs	r7, r7, r1
 80095d0:	2f08      	cmp	r7, #8
 80095d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80095d6:	dc37      	bgt.n	8009648 <_strtod_l+0x338>
 80095d8:	45be      	cmp	lr, r7
 80095da:	bfa8      	it	ge
 80095dc:	46be      	movge	lr, r7
 80095de:	f1bc 0f00 	cmp.w	ip, #0
 80095e2:	d001      	beq.n	80095e8 <_strtod_l+0x2d8>
 80095e4:	f1ce 0e00 	rsb	lr, lr, #0
 80095e8:	2c00      	cmp	r4, #0
 80095ea:	d151      	bne.n	8009690 <_strtod_l+0x380>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	f47f aece 	bne.w	800938e <_strtod_l+0x7e>
 80095f2:	9a06      	ldr	r2, [sp, #24]
 80095f4:	2a00      	cmp	r2, #0
 80095f6:	f47f aeca 	bne.w	800938e <_strtod_l+0x7e>
 80095fa:	9a04      	ldr	r2, [sp, #16]
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	f47f aee4 	bne.w	80093ca <_strtod_l+0xba>
 8009602:	2b4e      	cmp	r3, #78	; 0x4e
 8009604:	d027      	beq.n	8009656 <_strtod_l+0x346>
 8009606:	dc21      	bgt.n	800964c <_strtod_l+0x33c>
 8009608:	2b49      	cmp	r3, #73	; 0x49
 800960a:	f47f aede 	bne.w	80093ca <_strtod_l+0xba>
 800960e:	49a0      	ldr	r1, [pc, #640]	; (8009890 <_strtod_l+0x580>)
 8009610:	a81b      	add	r0, sp, #108	; 0x6c
 8009612:	f001 fdf7 	bl	800b204 <__match>
 8009616:	2800      	cmp	r0, #0
 8009618:	f43f aed7 	beq.w	80093ca <_strtod_l+0xba>
 800961c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800961e:	499d      	ldr	r1, [pc, #628]	; (8009894 <_strtod_l+0x584>)
 8009620:	3b01      	subs	r3, #1
 8009622:	a81b      	add	r0, sp, #108	; 0x6c
 8009624:	931b      	str	r3, [sp, #108]	; 0x6c
 8009626:	f001 fded 	bl	800b204 <__match>
 800962a:	b910      	cbnz	r0, 8009632 <_strtod_l+0x322>
 800962c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800962e:	3301      	adds	r3, #1
 8009630:	931b      	str	r3, [sp, #108]	; 0x6c
 8009632:	f8df b274 	ldr.w	fp, [pc, #628]	; 80098a8 <_strtod_l+0x598>
 8009636:	f04f 0a00 	mov.w	sl, #0
 800963a:	e6a8      	b.n	800938e <_strtod_l+0x7e>
 800963c:	210a      	movs	r1, #10
 800963e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009642:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009646:	e7b8      	b.n	80095ba <_strtod_l+0x2aa>
 8009648:	46be      	mov	lr, r7
 800964a:	e7c8      	b.n	80095de <_strtod_l+0x2ce>
 800964c:	2b69      	cmp	r3, #105	; 0x69
 800964e:	d0de      	beq.n	800960e <_strtod_l+0x2fe>
 8009650:	2b6e      	cmp	r3, #110	; 0x6e
 8009652:	f47f aeba 	bne.w	80093ca <_strtod_l+0xba>
 8009656:	4990      	ldr	r1, [pc, #576]	; (8009898 <_strtod_l+0x588>)
 8009658:	a81b      	add	r0, sp, #108	; 0x6c
 800965a:	f001 fdd3 	bl	800b204 <__match>
 800965e:	2800      	cmp	r0, #0
 8009660:	f43f aeb3 	beq.w	80093ca <_strtod_l+0xba>
 8009664:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	2b28      	cmp	r3, #40	; 0x28
 800966a:	d10e      	bne.n	800968a <_strtod_l+0x37a>
 800966c:	aa1e      	add	r2, sp, #120	; 0x78
 800966e:	498b      	ldr	r1, [pc, #556]	; (800989c <_strtod_l+0x58c>)
 8009670:	a81b      	add	r0, sp, #108	; 0x6c
 8009672:	f001 fddb 	bl	800b22c <__hexnan>
 8009676:	2805      	cmp	r0, #5
 8009678:	d107      	bne.n	800968a <_strtod_l+0x37a>
 800967a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800967c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009680:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009684:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009688:	e681      	b.n	800938e <_strtod_l+0x7e>
 800968a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80098b0 <_strtod_l+0x5a0>
 800968e:	e7d2      	b.n	8009636 <_strtod_l+0x326>
 8009690:	ebae 0302 	sub.w	r3, lr, r2
 8009694:	9306      	str	r3, [sp, #24]
 8009696:	9b05      	ldr	r3, [sp, #20]
 8009698:	9807      	ldr	r0, [sp, #28]
 800969a:	2b00      	cmp	r3, #0
 800969c:	bf08      	it	eq
 800969e:	4623      	moveq	r3, r4
 80096a0:	2c10      	cmp	r4, #16
 80096a2:	9305      	str	r3, [sp, #20]
 80096a4:	46a0      	mov	r8, r4
 80096a6:	bfa8      	it	ge
 80096a8:	f04f 0810 	movge.w	r8, #16
 80096ac:	f7f6 ff52 	bl	8000554 <__aeabi_ui2d>
 80096b0:	2c09      	cmp	r4, #9
 80096b2:	4682      	mov	sl, r0
 80096b4:	468b      	mov	fp, r1
 80096b6:	dc13      	bgt.n	80096e0 <_strtod_l+0x3d0>
 80096b8:	9b06      	ldr	r3, [sp, #24]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f43f ae67 	beq.w	800938e <_strtod_l+0x7e>
 80096c0:	9b06      	ldr	r3, [sp, #24]
 80096c2:	dd7a      	ble.n	80097ba <_strtod_l+0x4aa>
 80096c4:	2b16      	cmp	r3, #22
 80096c6:	dc61      	bgt.n	800978c <_strtod_l+0x47c>
 80096c8:	4a75      	ldr	r2, [pc, #468]	; (80098a0 <_strtod_l+0x590>)
 80096ca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80096ce:	e9de 0100 	ldrd	r0, r1, [lr]
 80096d2:	4652      	mov	r2, sl
 80096d4:	465b      	mov	r3, fp
 80096d6:	f7f6 ffb7 	bl	8000648 <__aeabi_dmul>
 80096da:	4682      	mov	sl, r0
 80096dc:	468b      	mov	fp, r1
 80096de:	e656      	b.n	800938e <_strtod_l+0x7e>
 80096e0:	4b6f      	ldr	r3, [pc, #444]	; (80098a0 <_strtod_l+0x590>)
 80096e2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80096e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80096ea:	f7f6 ffad 	bl	8000648 <__aeabi_dmul>
 80096ee:	4606      	mov	r6, r0
 80096f0:	4628      	mov	r0, r5
 80096f2:	460f      	mov	r7, r1
 80096f4:	f7f6 ff2e 	bl	8000554 <__aeabi_ui2d>
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	4630      	mov	r0, r6
 80096fe:	4639      	mov	r1, r7
 8009700:	f7f6 fdec 	bl	80002dc <__adddf3>
 8009704:	2c0f      	cmp	r4, #15
 8009706:	4682      	mov	sl, r0
 8009708:	468b      	mov	fp, r1
 800970a:	ddd5      	ble.n	80096b8 <_strtod_l+0x3a8>
 800970c:	9b06      	ldr	r3, [sp, #24]
 800970e:	eba4 0808 	sub.w	r8, r4, r8
 8009712:	4498      	add	r8, r3
 8009714:	f1b8 0f00 	cmp.w	r8, #0
 8009718:	f340 8096 	ble.w	8009848 <_strtod_l+0x538>
 800971c:	f018 030f 	ands.w	r3, r8, #15
 8009720:	d00a      	beq.n	8009738 <_strtod_l+0x428>
 8009722:	495f      	ldr	r1, [pc, #380]	; (80098a0 <_strtod_l+0x590>)
 8009724:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009728:	4652      	mov	r2, sl
 800972a:	465b      	mov	r3, fp
 800972c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009730:	f7f6 ff8a 	bl	8000648 <__aeabi_dmul>
 8009734:	4682      	mov	sl, r0
 8009736:	468b      	mov	fp, r1
 8009738:	f038 080f 	bics.w	r8, r8, #15
 800973c:	d073      	beq.n	8009826 <_strtod_l+0x516>
 800973e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009742:	dd47      	ble.n	80097d4 <_strtod_l+0x4c4>
 8009744:	2400      	movs	r4, #0
 8009746:	46a0      	mov	r8, r4
 8009748:	9407      	str	r4, [sp, #28]
 800974a:	9405      	str	r4, [sp, #20]
 800974c:	2322      	movs	r3, #34	; 0x22
 800974e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80098a8 <_strtod_l+0x598>
 8009752:	f8c9 3000 	str.w	r3, [r9]
 8009756:	f04f 0a00 	mov.w	sl, #0
 800975a:	9b07      	ldr	r3, [sp, #28]
 800975c:	2b00      	cmp	r3, #0
 800975e:	f43f ae16 	beq.w	800938e <_strtod_l+0x7e>
 8009762:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009764:	4648      	mov	r0, r9
 8009766:	f001 fed6 	bl	800b516 <_Bfree>
 800976a:	9905      	ldr	r1, [sp, #20]
 800976c:	4648      	mov	r0, r9
 800976e:	f001 fed2 	bl	800b516 <_Bfree>
 8009772:	4641      	mov	r1, r8
 8009774:	4648      	mov	r0, r9
 8009776:	f001 fece 	bl	800b516 <_Bfree>
 800977a:	9907      	ldr	r1, [sp, #28]
 800977c:	4648      	mov	r0, r9
 800977e:	f001 feca 	bl	800b516 <_Bfree>
 8009782:	4621      	mov	r1, r4
 8009784:	4648      	mov	r0, r9
 8009786:	f001 fec6 	bl	800b516 <_Bfree>
 800978a:	e600      	b.n	800938e <_strtod_l+0x7e>
 800978c:	9a06      	ldr	r2, [sp, #24]
 800978e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009792:	4293      	cmp	r3, r2
 8009794:	dbba      	blt.n	800970c <_strtod_l+0x3fc>
 8009796:	4d42      	ldr	r5, [pc, #264]	; (80098a0 <_strtod_l+0x590>)
 8009798:	f1c4 040f 	rsb	r4, r4, #15
 800979c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80097a0:	4652      	mov	r2, sl
 80097a2:	465b      	mov	r3, fp
 80097a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097a8:	f7f6 ff4e 	bl	8000648 <__aeabi_dmul>
 80097ac:	9b06      	ldr	r3, [sp, #24]
 80097ae:	1b1c      	subs	r4, r3, r4
 80097b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80097b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097b8:	e78d      	b.n	80096d6 <_strtod_l+0x3c6>
 80097ba:	f113 0f16 	cmn.w	r3, #22
 80097be:	dba5      	blt.n	800970c <_strtod_l+0x3fc>
 80097c0:	4a37      	ldr	r2, [pc, #220]	; (80098a0 <_strtod_l+0x590>)
 80097c2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80097c6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80097ca:	4650      	mov	r0, sl
 80097cc:	4659      	mov	r1, fp
 80097ce:	f7f7 f865 	bl	800089c <__aeabi_ddiv>
 80097d2:	e782      	b.n	80096da <_strtod_l+0x3ca>
 80097d4:	2300      	movs	r3, #0
 80097d6:	4e33      	ldr	r6, [pc, #204]	; (80098a4 <_strtod_l+0x594>)
 80097d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80097dc:	4650      	mov	r0, sl
 80097de:	4659      	mov	r1, fp
 80097e0:	461d      	mov	r5, r3
 80097e2:	f1b8 0f01 	cmp.w	r8, #1
 80097e6:	dc21      	bgt.n	800982c <_strtod_l+0x51c>
 80097e8:	b10b      	cbz	r3, 80097ee <_strtod_l+0x4de>
 80097ea:	4682      	mov	sl, r0
 80097ec:	468b      	mov	fp, r1
 80097ee:	4b2d      	ldr	r3, [pc, #180]	; (80098a4 <_strtod_l+0x594>)
 80097f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80097f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80097f8:	4652      	mov	r2, sl
 80097fa:	465b      	mov	r3, fp
 80097fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009800:	f7f6 ff22 	bl	8000648 <__aeabi_dmul>
 8009804:	4b28      	ldr	r3, [pc, #160]	; (80098a8 <_strtod_l+0x598>)
 8009806:	460a      	mov	r2, r1
 8009808:	400b      	ands	r3, r1
 800980a:	4928      	ldr	r1, [pc, #160]	; (80098ac <_strtod_l+0x59c>)
 800980c:	428b      	cmp	r3, r1
 800980e:	4682      	mov	sl, r0
 8009810:	d898      	bhi.n	8009744 <_strtod_l+0x434>
 8009812:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009816:	428b      	cmp	r3, r1
 8009818:	bf86      	itte	hi
 800981a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80098b4 <_strtod_l+0x5a4>
 800981e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009822:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009826:	2300      	movs	r3, #0
 8009828:	9304      	str	r3, [sp, #16]
 800982a:	e077      	b.n	800991c <_strtod_l+0x60c>
 800982c:	f018 0f01 	tst.w	r8, #1
 8009830:	d006      	beq.n	8009840 <_strtod_l+0x530>
 8009832:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8009836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983a:	f7f6 ff05 	bl	8000648 <__aeabi_dmul>
 800983e:	2301      	movs	r3, #1
 8009840:	3501      	adds	r5, #1
 8009842:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009846:	e7cc      	b.n	80097e2 <_strtod_l+0x4d2>
 8009848:	d0ed      	beq.n	8009826 <_strtod_l+0x516>
 800984a:	f1c8 0800 	rsb	r8, r8, #0
 800984e:	f018 020f 	ands.w	r2, r8, #15
 8009852:	d00a      	beq.n	800986a <_strtod_l+0x55a>
 8009854:	4b12      	ldr	r3, [pc, #72]	; (80098a0 <_strtod_l+0x590>)
 8009856:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800985a:	4650      	mov	r0, sl
 800985c:	4659      	mov	r1, fp
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f7f7 f81b 	bl	800089c <__aeabi_ddiv>
 8009866:	4682      	mov	sl, r0
 8009868:	468b      	mov	fp, r1
 800986a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800986e:	d0da      	beq.n	8009826 <_strtod_l+0x516>
 8009870:	f1b8 0f1f 	cmp.w	r8, #31
 8009874:	dd20      	ble.n	80098b8 <_strtod_l+0x5a8>
 8009876:	2400      	movs	r4, #0
 8009878:	46a0      	mov	r8, r4
 800987a:	9407      	str	r4, [sp, #28]
 800987c:	9405      	str	r4, [sp, #20]
 800987e:	2322      	movs	r3, #34	; 0x22
 8009880:	f04f 0a00 	mov.w	sl, #0
 8009884:	f04f 0b00 	mov.w	fp, #0
 8009888:	f8c9 3000 	str.w	r3, [r9]
 800988c:	e765      	b.n	800975a <_strtod_l+0x44a>
 800988e:	bf00      	nop
 8009890:	0800c671 	.word	0x0800c671
 8009894:	0800c6fb 	.word	0x0800c6fb
 8009898:	0800c679 	.word	0x0800c679
 800989c:	0800c6bc 	.word	0x0800c6bc
 80098a0:	0800c738 	.word	0x0800c738
 80098a4:	0800c710 	.word	0x0800c710
 80098a8:	7ff00000 	.word	0x7ff00000
 80098ac:	7ca00000 	.word	0x7ca00000
 80098b0:	fff80000 	.word	0xfff80000
 80098b4:	7fefffff 	.word	0x7fefffff
 80098b8:	f018 0310 	ands.w	r3, r8, #16
 80098bc:	bf18      	it	ne
 80098be:	236a      	movne	r3, #106	; 0x6a
 80098c0:	4da0      	ldr	r5, [pc, #640]	; (8009b44 <_strtod_l+0x834>)
 80098c2:	9304      	str	r3, [sp, #16]
 80098c4:	4650      	mov	r0, sl
 80098c6:	4659      	mov	r1, fp
 80098c8:	2300      	movs	r3, #0
 80098ca:	f1b8 0f00 	cmp.w	r8, #0
 80098ce:	f300 810a 	bgt.w	8009ae6 <_strtod_l+0x7d6>
 80098d2:	b10b      	cbz	r3, 80098d8 <_strtod_l+0x5c8>
 80098d4:	4682      	mov	sl, r0
 80098d6:	468b      	mov	fp, r1
 80098d8:	9b04      	ldr	r3, [sp, #16]
 80098da:	b1bb      	cbz	r3, 800990c <_strtod_l+0x5fc>
 80098dc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80098e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	4659      	mov	r1, fp
 80098e8:	dd10      	ble.n	800990c <_strtod_l+0x5fc>
 80098ea:	2b1f      	cmp	r3, #31
 80098ec:	f340 8107 	ble.w	8009afe <_strtod_l+0x7ee>
 80098f0:	2b34      	cmp	r3, #52	; 0x34
 80098f2:	bfde      	ittt	le
 80098f4:	3b20      	suble	r3, #32
 80098f6:	f04f 32ff 	movle.w	r2, #4294967295
 80098fa:	fa02 f303 	lslle.w	r3, r2, r3
 80098fe:	f04f 0a00 	mov.w	sl, #0
 8009902:	bfcc      	ite	gt
 8009904:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009908:	ea03 0b01 	andle.w	fp, r3, r1
 800990c:	2200      	movs	r2, #0
 800990e:	2300      	movs	r3, #0
 8009910:	4650      	mov	r0, sl
 8009912:	4659      	mov	r1, fp
 8009914:	f7f7 f900 	bl	8000b18 <__aeabi_dcmpeq>
 8009918:	2800      	cmp	r0, #0
 800991a:	d1ac      	bne.n	8009876 <_strtod_l+0x566>
 800991c:	9b07      	ldr	r3, [sp, #28]
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	9a05      	ldr	r2, [sp, #20]
 8009922:	9908      	ldr	r1, [sp, #32]
 8009924:	4623      	mov	r3, r4
 8009926:	4648      	mov	r0, r9
 8009928:	f001 fe47 	bl	800b5ba <__s2b>
 800992c:	9007      	str	r0, [sp, #28]
 800992e:	2800      	cmp	r0, #0
 8009930:	f43f af08 	beq.w	8009744 <_strtod_l+0x434>
 8009934:	9a06      	ldr	r2, [sp, #24]
 8009936:	9b06      	ldr	r3, [sp, #24]
 8009938:	2a00      	cmp	r2, #0
 800993a:	f1c3 0300 	rsb	r3, r3, #0
 800993e:	bfa8      	it	ge
 8009940:	2300      	movge	r3, #0
 8009942:	930e      	str	r3, [sp, #56]	; 0x38
 8009944:	2400      	movs	r4, #0
 8009946:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800994a:	9316      	str	r3, [sp, #88]	; 0x58
 800994c:	46a0      	mov	r8, r4
 800994e:	9b07      	ldr	r3, [sp, #28]
 8009950:	4648      	mov	r0, r9
 8009952:	6859      	ldr	r1, [r3, #4]
 8009954:	f001 fdab 	bl	800b4ae <_Balloc>
 8009958:	9005      	str	r0, [sp, #20]
 800995a:	2800      	cmp	r0, #0
 800995c:	f43f aef6 	beq.w	800974c <_strtod_l+0x43c>
 8009960:	9b07      	ldr	r3, [sp, #28]
 8009962:	691a      	ldr	r2, [r3, #16]
 8009964:	3202      	adds	r2, #2
 8009966:	f103 010c 	add.w	r1, r3, #12
 800996a:	0092      	lsls	r2, r2, #2
 800996c:	300c      	adds	r0, #12
 800996e:	f001 fd91 	bl	800b494 <memcpy>
 8009972:	aa1e      	add	r2, sp, #120	; 0x78
 8009974:	a91d      	add	r1, sp, #116	; 0x74
 8009976:	ec4b ab10 	vmov	d0, sl, fp
 800997a:	4648      	mov	r0, r9
 800997c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009980:	f002 f8d6 	bl	800bb30 <__d2b>
 8009984:	901c      	str	r0, [sp, #112]	; 0x70
 8009986:	2800      	cmp	r0, #0
 8009988:	f43f aee0 	beq.w	800974c <_strtod_l+0x43c>
 800998c:	2101      	movs	r1, #1
 800998e:	4648      	mov	r0, r9
 8009990:	f001 fe9f 	bl	800b6d2 <__i2b>
 8009994:	4680      	mov	r8, r0
 8009996:	2800      	cmp	r0, #0
 8009998:	f43f aed8 	beq.w	800974c <_strtod_l+0x43c>
 800999c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800999e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80099a0:	2e00      	cmp	r6, #0
 80099a2:	bfab      	itete	ge
 80099a4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80099a6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80099a8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80099aa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80099ac:	bfac      	ite	ge
 80099ae:	18f7      	addge	r7, r6, r3
 80099b0:	1b9d      	sublt	r5, r3, r6
 80099b2:	9b04      	ldr	r3, [sp, #16]
 80099b4:	1af6      	subs	r6, r6, r3
 80099b6:	4416      	add	r6, r2
 80099b8:	4b63      	ldr	r3, [pc, #396]	; (8009b48 <_strtod_l+0x838>)
 80099ba:	3e01      	subs	r6, #1
 80099bc:	429e      	cmp	r6, r3
 80099be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80099c2:	f280 80af 	bge.w	8009b24 <_strtod_l+0x814>
 80099c6:	1b9b      	subs	r3, r3, r6
 80099c8:	2b1f      	cmp	r3, #31
 80099ca:	eba2 0203 	sub.w	r2, r2, r3
 80099ce:	f04f 0101 	mov.w	r1, #1
 80099d2:	f300 809b 	bgt.w	8009b0c <_strtod_l+0x7fc>
 80099d6:	fa01 f303 	lsl.w	r3, r1, r3
 80099da:	930f      	str	r3, [sp, #60]	; 0x3c
 80099dc:	2300      	movs	r3, #0
 80099de:	930a      	str	r3, [sp, #40]	; 0x28
 80099e0:	18be      	adds	r6, r7, r2
 80099e2:	9b04      	ldr	r3, [sp, #16]
 80099e4:	42b7      	cmp	r7, r6
 80099e6:	4415      	add	r5, r2
 80099e8:	441d      	add	r5, r3
 80099ea:	463b      	mov	r3, r7
 80099ec:	bfa8      	it	ge
 80099ee:	4633      	movge	r3, r6
 80099f0:	42ab      	cmp	r3, r5
 80099f2:	bfa8      	it	ge
 80099f4:	462b      	movge	r3, r5
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	bfc2      	ittt	gt
 80099fa:	1af6      	subgt	r6, r6, r3
 80099fc:	1aed      	subgt	r5, r5, r3
 80099fe:	1aff      	subgt	r7, r7, r3
 8009a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a02:	b1bb      	cbz	r3, 8009a34 <_strtod_l+0x724>
 8009a04:	4641      	mov	r1, r8
 8009a06:	461a      	mov	r2, r3
 8009a08:	4648      	mov	r0, r9
 8009a0a:	f001 ff01 	bl	800b810 <__pow5mult>
 8009a0e:	4680      	mov	r8, r0
 8009a10:	2800      	cmp	r0, #0
 8009a12:	f43f ae9b 	beq.w	800974c <_strtod_l+0x43c>
 8009a16:	4601      	mov	r1, r0
 8009a18:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009a1a:	4648      	mov	r0, r9
 8009a1c:	f001 fe62 	bl	800b6e4 <__multiply>
 8009a20:	900c      	str	r0, [sp, #48]	; 0x30
 8009a22:	2800      	cmp	r0, #0
 8009a24:	f43f ae92 	beq.w	800974c <_strtod_l+0x43c>
 8009a28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009a2a:	4648      	mov	r0, r9
 8009a2c:	f001 fd73 	bl	800b516 <_Bfree>
 8009a30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a32:	931c      	str	r3, [sp, #112]	; 0x70
 8009a34:	2e00      	cmp	r6, #0
 8009a36:	dc7a      	bgt.n	8009b2e <_strtod_l+0x81e>
 8009a38:	9b06      	ldr	r3, [sp, #24]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	dd08      	ble.n	8009a50 <_strtod_l+0x740>
 8009a3e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009a40:	9905      	ldr	r1, [sp, #20]
 8009a42:	4648      	mov	r0, r9
 8009a44:	f001 fee4 	bl	800b810 <__pow5mult>
 8009a48:	9005      	str	r0, [sp, #20]
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	f43f ae7e 	beq.w	800974c <_strtod_l+0x43c>
 8009a50:	2d00      	cmp	r5, #0
 8009a52:	dd08      	ble.n	8009a66 <_strtod_l+0x756>
 8009a54:	462a      	mov	r2, r5
 8009a56:	9905      	ldr	r1, [sp, #20]
 8009a58:	4648      	mov	r0, r9
 8009a5a:	f001 ff27 	bl	800b8ac <__lshift>
 8009a5e:	9005      	str	r0, [sp, #20]
 8009a60:	2800      	cmp	r0, #0
 8009a62:	f43f ae73 	beq.w	800974c <_strtod_l+0x43c>
 8009a66:	2f00      	cmp	r7, #0
 8009a68:	dd08      	ble.n	8009a7c <_strtod_l+0x76c>
 8009a6a:	4641      	mov	r1, r8
 8009a6c:	463a      	mov	r2, r7
 8009a6e:	4648      	mov	r0, r9
 8009a70:	f001 ff1c 	bl	800b8ac <__lshift>
 8009a74:	4680      	mov	r8, r0
 8009a76:	2800      	cmp	r0, #0
 8009a78:	f43f ae68 	beq.w	800974c <_strtod_l+0x43c>
 8009a7c:	9a05      	ldr	r2, [sp, #20]
 8009a7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009a80:	4648      	mov	r0, r9
 8009a82:	f001 ff81 	bl	800b988 <__mdiff>
 8009a86:	4604      	mov	r4, r0
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	f43f ae5f 	beq.w	800974c <_strtod_l+0x43c>
 8009a8e:	68c3      	ldr	r3, [r0, #12]
 8009a90:	930c      	str	r3, [sp, #48]	; 0x30
 8009a92:	2300      	movs	r3, #0
 8009a94:	60c3      	str	r3, [r0, #12]
 8009a96:	4641      	mov	r1, r8
 8009a98:	f001 ff5c 	bl	800b954 <__mcmp>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	da55      	bge.n	8009b4c <_strtod_l+0x83c>
 8009aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009aa2:	b9e3      	cbnz	r3, 8009ade <_strtod_l+0x7ce>
 8009aa4:	f1ba 0f00 	cmp.w	sl, #0
 8009aa8:	d119      	bne.n	8009ade <_strtod_l+0x7ce>
 8009aaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009aae:	b9b3      	cbnz	r3, 8009ade <_strtod_l+0x7ce>
 8009ab0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ab4:	0d1b      	lsrs	r3, r3, #20
 8009ab6:	051b      	lsls	r3, r3, #20
 8009ab8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009abc:	d90f      	bls.n	8009ade <_strtod_l+0x7ce>
 8009abe:	6963      	ldr	r3, [r4, #20]
 8009ac0:	b913      	cbnz	r3, 8009ac8 <_strtod_l+0x7b8>
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	dd0a      	ble.n	8009ade <_strtod_l+0x7ce>
 8009ac8:	4621      	mov	r1, r4
 8009aca:	2201      	movs	r2, #1
 8009acc:	4648      	mov	r0, r9
 8009ace:	f001 feed 	bl	800b8ac <__lshift>
 8009ad2:	4641      	mov	r1, r8
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	f001 ff3d 	bl	800b954 <__mcmp>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	dc67      	bgt.n	8009bae <_strtod_l+0x89e>
 8009ade:	9b04      	ldr	r3, [sp, #16]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d171      	bne.n	8009bc8 <_strtod_l+0x8b8>
 8009ae4:	e63d      	b.n	8009762 <_strtod_l+0x452>
 8009ae6:	f018 0f01 	tst.w	r8, #1
 8009aea:	d004      	beq.n	8009af6 <_strtod_l+0x7e6>
 8009aec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009af0:	f7f6 fdaa 	bl	8000648 <__aeabi_dmul>
 8009af4:	2301      	movs	r3, #1
 8009af6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009afa:	3508      	adds	r5, #8
 8009afc:	e6e5      	b.n	80098ca <_strtod_l+0x5ba>
 8009afe:	f04f 32ff 	mov.w	r2, #4294967295
 8009b02:	fa02 f303 	lsl.w	r3, r2, r3
 8009b06:	ea03 0a0a 	and.w	sl, r3, sl
 8009b0a:	e6ff      	b.n	800990c <_strtod_l+0x5fc>
 8009b0c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009b10:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009b14:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009b18:	36e2      	adds	r6, #226	; 0xe2
 8009b1a:	fa01 f306 	lsl.w	r3, r1, r6
 8009b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b20:	910f      	str	r1, [sp, #60]	; 0x3c
 8009b22:	e75d      	b.n	80099e0 <_strtod_l+0x6d0>
 8009b24:	2300      	movs	r3, #0
 8009b26:	930a      	str	r3, [sp, #40]	; 0x28
 8009b28:	2301      	movs	r3, #1
 8009b2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b2c:	e758      	b.n	80099e0 <_strtod_l+0x6d0>
 8009b2e:	4632      	mov	r2, r6
 8009b30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b32:	4648      	mov	r0, r9
 8009b34:	f001 feba 	bl	800b8ac <__lshift>
 8009b38:	901c      	str	r0, [sp, #112]	; 0x70
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	f47f af7c 	bne.w	8009a38 <_strtod_l+0x728>
 8009b40:	e604      	b.n	800974c <_strtod_l+0x43c>
 8009b42:	bf00      	nop
 8009b44:	0800c6d0 	.word	0x0800c6d0
 8009b48:	fffffc02 	.word	0xfffffc02
 8009b4c:	465d      	mov	r5, fp
 8009b4e:	f040 8086 	bne.w	8009c5e <_strtod_l+0x94e>
 8009b52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b58:	b32a      	cbz	r2, 8009ba6 <_strtod_l+0x896>
 8009b5a:	4aaf      	ldr	r2, [pc, #700]	; (8009e18 <_strtod_l+0xb08>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d153      	bne.n	8009c08 <_strtod_l+0x8f8>
 8009b60:	9b04      	ldr	r3, [sp, #16]
 8009b62:	4650      	mov	r0, sl
 8009b64:	b1d3      	cbz	r3, 8009b9c <_strtod_l+0x88c>
 8009b66:	4aad      	ldr	r2, [pc, #692]	; (8009e1c <_strtod_l+0xb0c>)
 8009b68:	402a      	ands	r2, r5
 8009b6a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009b6e:	f04f 31ff 	mov.w	r1, #4294967295
 8009b72:	d816      	bhi.n	8009ba2 <_strtod_l+0x892>
 8009b74:	0d12      	lsrs	r2, r2, #20
 8009b76:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b7e:	4298      	cmp	r0, r3
 8009b80:	d142      	bne.n	8009c08 <_strtod_l+0x8f8>
 8009b82:	4ba7      	ldr	r3, [pc, #668]	; (8009e20 <_strtod_l+0xb10>)
 8009b84:	429d      	cmp	r5, r3
 8009b86:	d102      	bne.n	8009b8e <_strtod_l+0x87e>
 8009b88:	3001      	adds	r0, #1
 8009b8a:	f43f addf 	beq.w	800974c <_strtod_l+0x43c>
 8009b8e:	4ba3      	ldr	r3, [pc, #652]	; (8009e1c <_strtod_l+0xb0c>)
 8009b90:	402b      	ands	r3, r5
 8009b92:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009b96:	f04f 0a00 	mov.w	sl, #0
 8009b9a:	e7a0      	b.n	8009ade <_strtod_l+0x7ce>
 8009b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba0:	e7ed      	b.n	8009b7e <_strtod_l+0x86e>
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	e7eb      	b.n	8009b7e <_strtod_l+0x86e>
 8009ba6:	bb7b      	cbnz	r3, 8009c08 <_strtod_l+0x8f8>
 8009ba8:	f1ba 0f00 	cmp.w	sl, #0
 8009bac:	d12c      	bne.n	8009c08 <_strtod_l+0x8f8>
 8009bae:	9904      	ldr	r1, [sp, #16]
 8009bb0:	4a9a      	ldr	r2, [pc, #616]	; (8009e1c <_strtod_l+0xb0c>)
 8009bb2:	465b      	mov	r3, fp
 8009bb4:	b1f1      	cbz	r1, 8009bf4 <_strtod_l+0x8e4>
 8009bb6:	ea02 010b 	and.w	r1, r2, fp
 8009bba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009bbe:	dc19      	bgt.n	8009bf4 <_strtod_l+0x8e4>
 8009bc0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009bc4:	f77f ae5b 	ble.w	800987e <_strtod_l+0x56e>
 8009bc8:	4a96      	ldr	r2, [pc, #600]	; (8009e24 <_strtod_l+0xb14>)
 8009bca:	2300      	movs	r3, #0
 8009bcc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009bd0:	4650      	mov	r0, sl
 8009bd2:	4659      	mov	r1, fp
 8009bd4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009bd8:	f7f6 fd36 	bl	8000648 <__aeabi_dmul>
 8009bdc:	4682      	mov	sl, r0
 8009bde:	468b      	mov	fp, r1
 8009be0:	2900      	cmp	r1, #0
 8009be2:	f47f adbe 	bne.w	8009762 <_strtod_l+0x452>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	f47f adbb 	bne.w	8009762 <_strtod_l+0x452>
 8009bec:	2322      	movs	r3, #34	; 0x22
 8009bee:	f8c9 3000 	str.w	r3, [r9]
 8009bf2:	e5b6      	b.n	8009762 <_strtod_l+0x452>
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009bfa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009bfe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009c02:	f04f 3aff 	mov.w	sl, #4294967295
 8009c06:	e76a      	b.n	8009ade <_strtod_l+0x7ce>
 8009c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c0a:	b193      	cbz	r3, 8009c32 <_strtod_l+0x922>
 8009c0c:	422b      	tst	r3, r5
 8009c0e:	f43f af66 	beq.w	8009ade <_strtod_l+0x7ce>
 8009c12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c14:	9a04      	ldr	r2, [sp, #16]
 8009c16:	4650      	mov	r0, sl
 8009c18:	4659      	mov	r1, fp
 8009c1a:	b173      	cbz	r3, 8009c3a <_strtod_l+0x92a>
 8009c1c:	f7ff fb59 	bl	80092d2 <sulp>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c28:	f7f6 fb58 	bl	80002dc <__adddf3>
 8009c2c:	4682      	mov	sl, r0
 8009c2e:	468b      	mov	fp, r1
 8009c30:	e755      	b.n	8009ade <_strtod_l+0x7ce>
 8009c32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c34:	ea13 0f0a 	tst.w	r3, sl
 8009c38:	e7e9      	b.n	8009c0e <_strtod_l+0x8fe>
 8009c3a:	f7ff fb4a 	bl	80092d2 <sulp>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c46:	f7f6 fb47 	bl	80002d8 <__aeabi_dsub>
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4682      	mov	sl, r0
 8009c50:	468b      	mov	fp, r1
 8009c52:	f7f6 ff61 	bl	8000b18 <__aeabi_dcmpeq>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	f47f ae11 	bne.w	800987e <_strtod_l+0x56e>
 8009c5c:	e73f      	b.n	8009ade <_strtod_l+0x7ce>
 8009c5e:	4641      	mov	r1, r8
 8009c60:	4620      	mov	r0, r4
 8009c62:	f001 ffb4 	bl	800bbce <__ratio>
 8009c66:	ec57 6b10 	vmov	r6, r7, d0
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c70:	ee10 0a10 	vmov	r0, s0
 8009c74:	4639      	mov	r1, r7
 8009c76:	f7f6 ff63 	bl	8000b40 <__aeabi_dcmple>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	d077      	beq.n	8009d6e <_strtod_l+0xa5e>
 8009c7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d04a      	beq.n	8009d1a <_strtod_l+0xa0a>
 8009c84:	4b68      	ldr	r3, [pc, #416]	; (8009e28 <_strtod_l+0xb18>)
 8009c86:	2200      	movs	r2, #0
 8009c88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009c8c:	4f66      	ldr	r7, [pc, #408]	; (8009e28 <_strtod_l+0xb18>)
 8009c8e:	2600      	movs	r6, #0
 8009c90:	4b62      	ldr	r3, [pc, #392]	; (8009e1c <_strtod_l+0xb0c>)
 8009c92:	402b      	ands	r3, r5
 8009c94:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c98:	4b64      	ldr	r3, [pc, #400]	; (8009e2c <_strtod_l+0xb1c>)
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	f040 80ce 	bne.w	8009e3c <_strtod_l+0xb2c>
 8009ca0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ca4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ca8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009cac:	ec4b ab10 	vmov	d0, sl, fp
 8009cb0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009cb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009cb8:	f001 fec4 	bl	800ba44 <__ulp>
 8009cbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009cc0:	ec53 2b10 	vmov	r2, r3, d0
 8009cc4:	f7f6 fcc0 	bl	8000648 <__aeabi_dmul>
 8009cc8:	4652      	mov	r2, sl
 8009cca:	465b      	mov	r3, fp
 8009ccc:	f7f6 fb06 	bl	80002dc <__adddf3>
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	4952      	ldr	r1, [pc, #328]	; (8009e1c <_strtod_l+0xb0c>)
 8009cd4:	4a56      	ldr	r2, [pc, #344]	; (8009e30 <_strtod_l+0xb20>)
 8009cd6:	4019      	ands	r1, r3
 8009cd8:	4291      	cmp	r1, r2
 8009cda:	4682      	mov	sl, r0
 8009cdc:	d95b      	bls.n	8009d96 <_strtod_l+0xa86>
 8009cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d103      	bne.n	8009cf0 <_strtod_l+0x9e0>
 8009ce8:	9b08      	ldr	r3, [sp, #32]
 8009cea:	3301      	adds	r3, #1
 8009cec:	f43f ad2e 	beq.w	800974c <_strtod_l+0x43c>
 8009cf0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009e20 <_strtod_l+0xb10>
 8009cf4:	f04f 3aff 	mov.w	sl, #4294967295
 8009cf8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009cfa:	4648      	mov	r0, r9
 8009cfc:	f001 fc0b 	bl	800b516 <_Bfree>
 8009d00:	9905      	ldr	r1, [sp, #20]
 8009d02:	4648      	mov	r0, r9
 8009d04:	f001 fc07 	bl	800b516 <_Bfree>
 8009d08:	4641      	mov	r1, r8
 8009d0a:	4648      	mov	r0, r9
 8009d0c:	f001 fc03 	bl	800b516 <_Bfree>
 8009d10:	4621      	mov	r1, r4
 8009d12:	4648      	mov	r0, r9
 8009d14:	f001 fbff 	bl	800b516 <_Bfree>
 8009d18:	e619      	b.n	800994e <_strtod_l+0x63e>
 8009d1a:	f1ba 0f00 	cmp.w	sl, #0
 8009d1e:	d11a      	bne.n	8009d56 <_strtod_l+0xa46>
 8009d20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d24:	b9eb      	cbnz	r3, 8009d62 <_strtod_l+0xa52>
 8009d26:	2200      	movs	r2, #0
 8009d28:	4b3f      	ldr	r3, [pc, #252]	; (8009e28 <_strtod_l+0xb18>)
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	4639      	mov	r1, r7
 8009d2e:	f7f6 fefd 	bl	8000b2c <__aeabi_dcmplt>
 8009d32:	b9c8      	cbnz	r0, 8009d68 <_strtod_l+0xa58>
 8009d34:	4630      	mov	r0, r6
 8009d36:	4639      	mov	r1, r7
 8009d38:	2200      	movs	r2, #0
 8009d3a:	4b3e      	ldr	r3, [pc, #248]	; (8009e34 <_strtod_l+0xb24>)
 8009d3c:	f7f6 fc84 	bl	8000648 <__aeabi_dmul>
 8009d40:	4606      	mov	r6, r0
 8009d42:	460f      	mov	r7, r1
 8009d44:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009d48:	9618      	str	r6, [sp, #96]	; 0x60
 8009d4a:	9319      	str	r3, [sp, #100]	; 0x64
 8009d4c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009d50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009d54:	e79c      	b.n	8009c90 <_strtod_l+0x980>
 8009d56:	f1ba 0f01 	cmp.w	sl, #1
 8009d5a:	d102      	bne.n	8009d62 <_strtod_l+0xa52>
 8009d5c:	2d00      	cmp	r5, #0
 8009d5e:	f43f ad8e 	beq.w	800987e <_strtod_l+0x56e>
 8009d62:	2200      	movs	r2, #0
 8009d64:	4b34      	ldr	r3, [pc, #208]	; (8009e38 <_strtod_l+0xb28>)
 8009d66:	e78f      	b.n	8009c88 <_strtod_l+0x978>
 8009d68:	2600      	movs	r6, #0
 8009d6a:	4f32      	ldr	r7, [pc, #200]	; (8009e34 <_strtod_l+0xb24>)
 8009d6c:	e7ea      	b.n	8009d44 <_strtod_l+0xa34>
 8009d6e:	4b31      	ldr	r3, [pc, #196]	; (8009e34 <_strtod_l+0xb24>)
 8009d70:	4630      	mov	r0, r6
 8009d72:	4639      	mov	r1, r7
 8009d74:	2200      	movs	r2, #0
 8009d76:	f7f6 fc67 	bl	8000648 <__aeabi_dmul>
 8009d7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d7c:	4606      	mov	r6, r0
 8009d7e:	460f      	mov	r7, r1
 8009d80:	b933      	cbnz	r3, 8009d90 <_strtod_l+0xa80>
 8009d82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d86:	9010      	str	r0, [sp, #64]	; 0x40
 8009d88:	9311      	str	r3, [sp, #68]	; 0x44
 8009d8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d8e:	e7df      	b.n	8009d50 <_strtod_l+0xa40>
 8009d90:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009d94:	e7f9      	b.n	8009d8a <_strtod_l+0xa7a>
 8009d96:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009d9a:	9b04      	ldr	r3, [sp, #16]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1ab      	bne.n	8009cf8 <_strtod_l+0x9e8>
 8009da0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009da4:	0d1b      	lsrs	r3, r3, #20
 8009da6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009da8:	051b      	lsls	r3, r3, #20
 8009daa:	429a      	cmp	r2, r3
 8009dac:	465d      	mov	r5, fp
 8009dae:	d1a3      	bne.n	8009cf8 <_strtod_l+0x9e8>
 8009db0:	4639      	mov	r1, r7
 8009db2:	4630      	mov	r0, r6
 8009db4:	f7f6 fef8 	bl	8000ba8 <__aeabi_d2iz>
 8009db8:	f7f6 fbdc 	bl	8000574 <__aeabi_i2d>
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	4639      	mov	r1, r7
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f7f6 fa88 	bl	80002d8 <__aeabi_dsub>
 8009dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dca:	4606      	mov	r6, r0
 8009dcc:	460f      	mov	r7, r1
 8009dce:	b933      	cbnz	r3, 8009dde <_strtod_l+0xace>
 8009dd0:	f1ba 0f00 	cmp.w	sl, #0
 8009dd4:	d103      	bne.n	8009dde <_strtod_l+0xace>
 8009dd6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009dda:	2d00      	cmp	r5, #0
 8009ddc:	d06d      	beq.n	8009eba <_strtod_l+0xbaa>
 8009dde:	a30a      	add	r3, pc, #40	; (adr r3, 8009e08 <_strtod_l+0xaf8>)
 8009de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de4:	4630      	mov	r0, r6
 8009de6:	4639      	mov	r1, r7
 8009de8:	f7f6 fea0 	bl	8000b2c <__aeabi_dcmplt>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	f47f acb8 	bne.w	8009762 <_strtod_l+0x452>
 8009df2:	a307      	add	r3, pc, #28	; (adr r3, 8009e10 <_strtod_l+0xb00>)
 8009df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df8:	4630      	mov	r0, r6
 8009dfa:	4639      	mov	r1, r7
 8009dfc:	f7f6 feb4 	bl	8000b68 <__aeabi_dcmpgt>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	f43f af79 	beq.w	8009cf8 <_strtod_l+0x9e8>
 8009e06:	e4ac      	b.n	8009762 <_strtod_l+0x452>
 8009e08:	94a03595 	.word	0x94a03595
 8009e0c:	3fdfffff 	.word	0x3fdfffff
 8009e10:	35afe535 	.word	0x35afe535
 8009e14:	3fe00000 	.word	0x3fe00000
 8009e18:	000fffff 	.word	0x000fffff
 8009e1c:	7ff00000 	.word	0x7ff00000
 8009e20:	7fefffff 	.word	0x7fefffff
 8009e24:	39500000 	.word	0x39500000
 8009e28:	3ff00000 	.word	0x3ff00000
 8009e2c:	7fe00000 	.word	0x7fe00000
 8009e30:	7c9fffff 	.word	0x7c9fffff
 8009e34:	3fe00000 	.word	0x3fe00000
 8009e38:	bff00000 	.word	0xbff00000
 8009e3c:	9b04      	ldr	r3, [sp, #16]
 8009e3e:	b333      	cbz	r3, 8009e8e <_strtod_l+0xb7e>
 8009e40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e42:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e46:	d822      	bhi.n	8009e8e <_strtod_l+0xb7e>
 8009e48:	a327      	add	r3, pc, #156	; (adr r3, 8009ee8 <_strtod_l+0xbd8>)
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	4630      	mov	r0, r6
 8009e50:	4639      	mov	r1, r7
 8009e52:	f7f6 fe75 	bl	8000b40 <__aeabi_dcmple>
 8009e56:	b1a0      	cbz	r0, 8009e82 <_strtod_l+0xb72>
 8009e58:	4639      	mov	r1, r7
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	f7f6 fecc 	bl	8000bf8 <__aeabi_d2uiz>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	bf08      	it	eq
 8009e64:	2001      	moveq	r0, #1
 8009e66:	f7f6 fb75 	bl	8000554 <__aeabi_ui2d>
 8009e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e6c:	4606      	mov	r6, r0
 8009e6e:	460f      	mov	r7, r1
 8009e70:	bb03      	cbnz	r3, 8009eb4 <_strtod_l+0xba4>
 8009e72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e76:	9012      	str	r0, [sp, #72]	; 0x48
 8009e78:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e7a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009e7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e86:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009e8a:	1a9b      	subs	r3, r3, r2
 8009e8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e8e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009e92:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009e96:	f001 fdd5 	bl	800ba44 <__ulp>
 8009e9a:	4650      	mov	r0, sl
 8009e9c:	ec53 2b10 	vmov	r2, r3, d0
 8009ea0:	4659      	mov	r1, fp
 8009ea2:	f7f6 fbd1 	bl	8000648 <__aeabi_dmul>
 8009ea6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009eaa:	f7f6 fa17 	bl	80002dc <__adddf3>
 8009eae:	4682      	mov	sl, r0
 8009eb0:	468b      	mov	fp, r1
 8009eb2:	e772      	b.n	8009d9a <_strtod_l+0xa8a>
 8009eb4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009eb8:	e7df      	b.n	8009e7a <_strtod_l+0xb6a>
 8009eba:	a30d      	add	r3, pc, #52	; (adr r3, 8009ef0 <_strtod_l+0xbe0>)
 8009ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec0:	f7f6 fe34 	bl	8000b2c <__aeabi_dcmplt>
 8009ec4:	e79c      	b.n	8009e00 <_strtod_l+0xaf0>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	930d      	str	r3, [sp, #52]	; 0x34
 8009eca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ecc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ece:	6013      	str	r3, [r2, #0]
 8009ed0:	f7ff ba61 	b.w	8009396 <_strtod_l+0x86>
 8009ed4:	2b65      	cmp	r3, #101	; 0x65
 8009ed6:	f04f 0200 	mov.w	r2, #0
 8009eda:	f43f ab4e 	beq.w	800957a <_strtod_l+0x26a>
 8009ede:	2101      	movs	r1, #1
 8009ee0:	4614      	mov	r4, r2
 8009ee2:	9104      	str	r1, [sp, #16]
 8009ee4:	f7ff bacb 	b.w	800947e <_strtod_l+0x16e>
 8009ee8:	ffc00000 	.word	0xffc00000
 8009eec:	41dfffff 	.word	0x41dfffff
 8009ef0:	94a03595 	.word	0x94a03595
 8009ef4:	3fcfffff 	.word	0x3fcfffff

08009ef8 <_strtod_r>:
 8009ef8:	4b05      	ldr	r3, [pc, #20]	; (8009f10 <_strtod_r+0x18>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	b410      	push	{r4}
 8009efe:	6a1b      	ldr	r3, [r3, #32]
 8009f00:	4c04      	ldr	r4, [pc, #16]	; (8009f14 <_strtod_r+0x1c>)
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	bf08      	it	eq
 8009f06:	4623      	moveq	r3, r4
 8009f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f0c:	f7ff ba00 	b.w	8009310 <_strtod_l>
 8009f10:	20000040 	.word	0x20000040
 8009f14:	200000a4 	.word	0x200000a4

08009f18 <_strtol_l.isra.0>:
 8009f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f1c:	4680      	mov	r8, r0
 8009f1e:	4689      	mov	r9, r1
 8009f20:	4692      	mov	sl, r2
 8009f22:	461e      	mov	r6, r3
 8009f24:	460f      	mov	r7, r1
 8009f26:	463d      	mov	r5, r7
 8009f28:	9808      	ldr	r0, [sp, #32]
 8009f2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f2e:	f001 fa0d 	bl	800b34c <__locale_ctype_ptr_l>
 8009f32:	4420      	add	r0, r4
 8009f34:	7843      	ldrb	r3, [r0, #1]
 8009f36:	f013 0308 	ands.w	r3, r3, #8
 8009f3a:	d132      	bne.n	8009fa2 <_strtol_l.isra.0+0x8a>
 8009f3c:	2c2d      	cmp	r4, #45	; 0x2d
 8009f3e:	d132      	bne.n	8009fa6 <_strtol_l.isra.0+0x8e>
 8009f40:	787c      	ldrb	r4, [r7, #1]
 8009f42:	1cbd      	adds	r5, r7, #2
 8009f44:	2201      	movs	r2, #1
 8009f46:	2e00      	cmp	r6, #0
 8009f48:	d05d      	beq.n	800a006 <_strtol_l.isra.0+0xee>
 8009f4a:	2e10      	cmp	r6, #16
 8009f4c:	d109      	bne.n	8009f62 <_strtol_l.isra.0+0x4a>
 8009f4e:	2c30      	cmp	r4, #48	; 0x30
 8009f50:	d107      	bne.n	8009f62 <_strtol_l.isra.0+0x4a>
 8009f52:	782b      	ldrb	r3, [r5, #0]
 8009f54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f58:	2b58      	cmp	r3, #88	; 0x58
 8009f5a:	d14f      	bne.n	8009ffc <_strtol_l.isra.0+0xe4>
 8009f5c:	786c      	ldrb	r4, [r5, #1]
 8009f5e:	2610      	movs	r6, #16
 8009f60:	3502      	adds	r5, #2
 8009f62:	2a00      	cmp	r2, #0
 8009f64:	bf14      	ite	ne
 8009f66:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009f6a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009f6e:	2700      	movs	r7, #0
 8009f70:	fbb1 fcf6 	udiv	ip, r1, r6
 8009f74:	4638      	mov	r0, r7
 8009f76:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009f7a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009f7e:	2b09      	cmp	r3, #9
 8009f80:	d817      	bhi.n	8009fb2 <_strtol_l.isra.0+0x9a>
 8009f82:	461c      	mov	r4, r3
 8009f84:	42a6      	cmp	r6, r4
 8009f86:	dd23      	ble.n	8009fd0 <_strtol_l.isra.0+0xb8>
 8009f88:	1c7b      	adds	r3, r7, #1
 8009f8a:	d007      	beq.n	8009f9c <_strtol_l.isra.0+0x84>
 8009f8c:	4584      	cmp	ip, r0
 8009f8e:	d31c      	bcc.n	8009fca <_strtol_l.isra.0+0xb2>
 8009f90:	d101      	bne.n	8009f96 <_strtol_l.isra.0+0x7e>
 8009f92:	45a6      	cmp	lr, r4
 8009f94:	db19      	blt.n	8009fca <_strtol_l.isra.0+0xb2>
 8009f96:	fb00 4006 	mla	r0, r0, r6, r4
 8009f9a:	2701      	movs	r7, #1
 8009f9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fa0:	e7eb      	b.n	8009f7a <_strtol_l.isra.0+0x62>
 8009fa2:	462f      	mov	r7, r5
 8009fa4:	e7bf      	b.n	8009f26 <_strtol_l.isra.0+0xe>
 8009fa6:	2c2b      	cmp	r4, #43	; 0x2b
 8009fa8:	bf04      	itt	eq
 8009faa:	1cbd      	addeq	r5, r7, #2
 8009fac:	787c      	ldrbeq	r4, [r7, #1]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	e7c9      	b.n	8009f46 <_strtol_l.isra.0+0x2e>
 8009fb2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009fb6:	2b19      	cmp	r3, #25
 8009fb8:	d801      	bhi.n	8009fbe <_strtol_l.isra.0+0xa6>
 8009fba:	3c37      	subs	r4, #55	; 0x37
 8009fbc:	e7e2      	b.n	8009f84 <_strtol_l.isra.0+0x6c>
 8009fbe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009fc2:	2b19      	cmp	r3, #25
 8009fc4:	d804      	bhi.n	8009fd0 <_strtol_l.isra.0+0xb8>
 8009fc6:	3c57      	subs	r4, #87	; 0x57
 8009fc8:	e7dc      	b.n	8009f84 <_strtol_l.isra.0+0x6c>
 8009fca:	f04f 37ff 	mov.w	r7, #4294967295
 8009fce:	e7e5      	b.n	8009f9c <_strtol_l.isra.0+0x84>
 8009fd0:	1c7b      	adds	r3, r7, #1
 8009fd2:	d108      	bne.n	8009fe6 <_strtol_l.isra.0+0xce>
 8009fd4:	2322      	movs	r3, #34	; 0x22
 8009fd6:	f8c8 3000 	str.w	r3, [r8]
 8009fda:	4608      	mov	r0, r1
 8009fdc:	f1ba 0f00 	cmp.w	sl, #0
 8009fe0:	d107      	bne.n	8009ff2 <_strtol_l.isra.0+0xda>
 8009fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe6:	b102      	cbz	r2, 8009fea <_strtol_l.isra.0+0xd2>
 8009fe8:	4240      	negs	r0, r0
 8009fea:	f1ba 0f00 	cmp.w	sl, #0
 8009fee:	d0f8      	beq.n	8009fe2 <_strtol_l.isra.0+0xca>
 8009ff0:	b10f      	cbz	r7, 8009ff6 <_strtol_l.isra.0+0xde>
 8009ff2:	f105 39ff 	add.w	r9, r5, #4294967295
 8009ff6:	f8ca 9000 	str.w	r9, [sl]
 8009ffa:	e7f2      	b.n	8009fe2 <_strtol_l.isra.0+0xca>
 8009ffc:	2430      	movs	r4, #48	; 0x30
 8009ffe:	2e00      	cmp	r6, #0
 800a000:	d1af      	bne.n	8009f62 <_strtol_l.isra.0+0x4a>
 800a002:	2608      	movs	r6, #8
 800a004:	e7ad      	b.n	8009f62 <_strtol_l.isra.0+0x4a>
 800a006:	2c30      	cmp	r4, #48	; 0x30
 800a008:	d0a3      	beq.n	8009f52 <_strtol_l.isra.0+0x3a>
 800a00a:	260a      	movs	r6, #10
 800a00c:	e7a9      	b.n	8009f62 <_strtol_l.isra.0+0x4a>
	...

0800a010 <_strtol_r>:
 800a010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a012:	4c06      	ldr	r4, [pc, #24]	; (800a02c <_strtol_r+0x1c>)
 800a014:	4d06      	ldr	r5, [pc, #24]	; (800a030 <_strtol_r+0x20>)
 800a016:	6824      	ldr	r4, [r4, #0]
 800a018:	6a24      	ldr	r4, [r4, #32]
 800a01a:	2c00      	cmp	r4, #0
 800a01c:	bf08      	it	eq
 800a01e:	462c      	moveq	r4, r5
 800a020:	9400      	str	r4, [sp, #0]
 800a022:	f7ff ff79 	bl	8009f18 <_strtol_l.isra.0>
 800a026:	b003      	add	sp, #12
 800a028:	bd30      	pop	{r4, r5, pc}
 800a02a:	bf00      	nop
 800a02c:	20000040 	.word	0x20000040
 800a030:	200000a4 	.word	0x200000a4

0800a034 <_write_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4c07      	ldr	r4, [pc, #28]	; (800a054 <_write_r+0x20>)
 800a038:	4605      	mov	r5, r0
 800a03a:	4608      	mov	r0, r1
 800a03c:	4611      	mov	r1, r2
 800a03e:	2200      	movs	r2, #0
 800a040:	6022      	str	r2, [r4, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	f7f8 fdb8 	bl	8002bb8 <_write>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d102      	bne.n	800a052 <_write_r+0x1e>
 800a04c:	6823      	ldr	r3, [r4, #0]
 800a04e:	b103      	cbz	r3, 800a052 <_write_r+0x1e>
 800a050:	602b      	str	r3, [r5, #0]
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	20000888 	.word	0x20000888

0800a058 <_close_r>:
 800a058:	b538      	push	{r3, r4, r5, lr}
 800a05a:	4c06      	ldr	r4, [pc, #24]	; (800a074 <_close_r+0x1c>)
 800a05c:	2300      	movs	r3, #0
 800a05e:	4605      	mov	r5, r0
 800a060:	4608      	mov	r0, r1
 800a062:	6023      	str	r3, [r4, #0]
 800a064:	f7f8 fdc4 	bl	8002bf0 <_close>
 800a068:	1c43      	adds	r3, r0, #1
 800a06a:	d102      	bne.n	800a072 <_close_r+0x1a>
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	b103      	cbz	r3, 800a072 <_close_r+0x1a>
 800a070:	602b      	str	r3, [r5, #0]
 800a072:	bd38      	pop	{r3, r4, r5, pc}
 800a074:	20000888 	.word	0x20000888

0800a078 <quorem>:
 800a078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07c:	6903      	ldr	r3, [r0, #16]
 800a07e:	690c      	ldr	r4, [r1, #16]
 800a080:	42a3      	cmp	r3, r4
 800a082:	4680      	mov	r8, r0
 800a084:	f2c0 8082 	blt.w	800a18c <quorem+0x114>
 800a088:	3c01      	subs	r4, #1
 800a08a:	f101 0714 	add.w	r7, r1, #20
 800a08e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a092:	f100 0614 	add.w	r6, r0, #20
 800a096:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a09a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a09e:	eb06 030c 	add.w	r3, r6, ip
 800a0a2:	3501      	adds	r5, #1
 800a0a4:	eb07 090c 	add.w	r9, r7, ip
 800a0a8:	9301      	str	r3, [sp, #4]
 800a0aa:	fbb0 f5f5 	udiv	r5, r0, r5
 800a0ae:	b395      	cbz	r5, 800a116 <quorem+0x9e>
 800a0b0:	f04f 0a00 	mov.w	sl, #0
 800a0b4:	4638      	mov	r0, r7
 800a0b6:	46b6      	mov	lr, r6
 800a0b8:	46d3      	mov	fp, sl
 800a0ba:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0be:	b293      	uxth	r3, r2
 800a0c0:	fb05 a303 	mla	r3, r5, r3, sl
 800a0c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	ebab 0303 	sub.w	r3, fp, r3
 800a0ce:	0c12      	lsrs	r2, r2, #16
 800a0d0:	f8de b000 	ldr.w	fp, [lr]
 800a0d4:	fb05 a202 	mla	r2, r5, r2, sl
 800a0d8:	fa13 f38b 	uxtah	r3, r3, fp
 800a0dc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a0e0:	fa1f fb82 	uxth.w	fp, r2
 800a0e4:	f8de 2000 	ldr.w	r2, [lr]
 800a0e8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a0ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0f6:	4581      	cmp	r9, r0
 800a0f8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a0fc:	f84e 3b04 	str.w	r3, [lr], #4
 800a100:	d2db      	bcs.n	800a0ba <quorem+0x42>
 800a102:	f856 300c 	ldr.w	r3, [r6, ip]
 800a106:	b933      	cbnz	r3, 800a116 <quorem+0x9e>
 800a108:	9b01      	ldr	r3, [sp, #4]
 800a10a:	3b04      	subs	r3, #4
 800a10c:	429e      	cmp	r6, r3
 800a10e:	461a      	mov	r2, r3
 800a110:	d330      	bcc.n	800a174 <quorem+0xfc>
 800a112:	f8c8 4010 	str.w	r4, [r8, #16]
 800a116:	4640      	mov	r0, r8
 800a118:	f001 fc1c 	bl	800b954 <__mcmp>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	db25      	blt.n	800a16c <quorem+0xf4>
 800a120:	3501      	adds	r5, #1
 800a122:	4630      	mov	r0, r6
 800a124:	f04f 0c00 	mov.w	ip, #0
 800a128:	f857 2b04 	ldr.w	r2, [r7], #4
 800a12c:	f8d0 e000 	ldr.w	lr, [r0]
 800a130:	b293      	uxth	r3, r2
 800a132:	ebac 0303 	sub.w	r3, ip, r3
 800a136:	0c12      	lsrs	r2, r2, #16
 800a138:	fa13 f38e 	uxtah	r3, r3, lr
 800a13c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a140:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a144:	b29b      	uxth	r3, r3
 800a146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a14a:	45b9      	cmp	r9, r7
 800a14c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a150:	f840 3b04 	str.w	r3, [r0], #4
 800a154:	d2e8      	bcs.n	800a128 <quorem+0xb0>
 800a156:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a15a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a15e:	b92a      	cbnz	r2, 800a16c <quorem+0xf4>
 800a160:	3b04      	subs	r3, #4
 800a162:	429e      	cmp	r6, r3
 800a164:	461a      	mov	r2, r3
 800a166:	d30b      	bcc.n	800a180 <quorem+0x108>
 800a168:	f8c8 4010 	str.w	r4, [r8, #16]
 800a16c:	4628      	mov	r0, r5
 800a16e:	b003      	add	sp, #12
 800a170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a174:	6812      	ldr	r2, [r2, #0]
 800a176:	3b04      	subs	r3, #4
 800a178:	2a00      	cmp	r2, #0
 800a17a:	d1ca      	bne.n	800a112 <quorem+0x9a>
 800a17c:	3c01      	subs	r4, #1
 800a17e:	e7c5      	b.n	800a10c <quorem+0x94>
 800a180:	6812      	ldr	r2, [r2, #0]
 800a182:	3b04      	subs	r3, #4
 800a184:	2a00      	cmp	r2, #0
 800a186:	d1ef      	bne.n	800a168 <quorem+0xf0>
 800a188:	3c01      	subs	r4, #1
 800a18a:	e7ea      	b.n	800a162 <quorem+0xea>
 800a18c:	2000      	movs	r0, #0
 800a18e:	e7ee      	b.n	800a16e <quorem+0xf6>

0800a190 <_dtoa_r>:
 800a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a194:	ec57 6b10 	vmov	r6, r7, d0
 800a198:	b097      	sub	sp, #92	; 0x5c
 800a19a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a19c:	9106      	str	r1, [sp, #24]
 800a19e:	4604      	mov	r4, r0
 800a1a0:	920b      	str	r2, [sp, #44]	; 0x2c
 800a1a2:	9312      	str	r3, [sp, #72]	; 0x48
 800a1a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a1a8:	e9cd 6700 	strd	r6, r7, [sp]
 800a1ac:	b93d      	cbnz	r5, 800a1be <_dtoa_r+0x2e>
 800a1ae:	2010      	movs	r0, #16
 800a1b0:	f001 f956 	bl	800b460 <malloc>
 800a1b4:	6260      	str	r0, [r4, #36]	; 0x24
 800a1b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1ba:	6005      	str	r5, [r0, #0]
 800a1bc:	60c5      	str	r5, [r0, #12]
 800a1be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1c0:	6819      	ldr	r1, [r3, #0]
 800a1c2:	b151      	cbz	r1, 800a1da <_dtoa_r+0x4a>
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	604a      	str	r2, [r1, #4]
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	4093      	lsls	r3, r2
 800a1cc:	608b      	str	r3, [r1, #8]
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f001 f9a1 	bl	800b516 <_Bfree>
 800a1d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	1e3b      	subs	r3, r7, #0
 800a1dc:	bfbb      	ittet	lt
 800a1de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a1e2:	9301      	strlt	r3, [sp, #4]
 800a1e4:	2300      	movge	r3, #0
 800a1e6:	2201      	movlt	r2, #1
 800a1e8:	bfac      	ite	ge
 800a1ea:	f8c8 3000 	strge.w	r3, [r8]
 800a1ee:	f8c8 2000 	strlt.w	r2, [r8]
 800a1f2:	4baf      	ldr	r3, [pc, #700]	; (800a4b0 <_dtoa_r+0x320>)
 800a1f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a1f8:	ea33 0308 	bics.w	r3, r3, r8
 800a1fc:	d114      	bne.n	800a228 <_dtoa_r+0x98>
 800a1fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a200:	f242 730f 	movw	r3, #9999	; 0x270f
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	9b00      	ldr	r3, [sp, #0]
 800a208:	b923      	cbnz	r3, 800a214 <_dtoa_r+0x84>
 800a20a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a20e:	2800      	cmp	r0, #0
 800a210:	f000 8542 	beq.w	800ac98 <_dtoa_r+0xb08>
 800a214:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a216:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a4c4 <_dtoa_r+0x334>
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 8544 	beq.w	800aca8 <_dtoa_r+0xb18>
 800a220:	f10b 0303 	add.w	r3, fp, #3
 800a224:	f000 bd3e 	b.w	800aca4 <_dtoa_r+0xb14>
 800a228:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a22c:	2200      	movs	r2, #0
 800a22e:	2300      	movs	r3, #0
 800a230:	4630      	mov	r0, r6
 800a232:	4639      	mov	r1, r7
 800a234:	f7f6 fc70 	bl	8000b18 <__aeabi_dcmpeq>
 800a238:	4681      	mov	r9, r0
 800a23a:	b168      	cbz	r0, 800a258 <_dtoa_r+0xc8>
 800a23c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a23e:	2301      	movs	r3, #1
 800a240:	6013      	str	r3, [r2, #0]
 800a242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a244:	2b00      	cmp	r3, #0
 800a246:	f000 8524 	beq.w	800ac92 <_dtoa_r+0xb02>
 800a24a:	4b9a      	ldr	r3, [pc, #616]	; (800a4b4 <_dtoa_r+0x324>)
 800a24c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a24e:	f103 3bff 	add.w	fp, r3, #4294967295
 800a252:	6013      	str	r3, [r2, #0]
 800a254:	f000 bd28 	b.w	800aca8 <_dtoa_r+0xb18>
 800a258:	aa14      	add	r2, sp, #80	; 0x50
 800a25a:	a915      	add	r1, sp, #84	; 0x54
 800a25c:	ec47 6b10 	vmov	d0, r6, r7
 800a260:	4620      	mov	r0, r4
 800a262:	f001 fc65 	bl	800bb30 <__d2b>
 800a266:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a26a:	9004      	str	r0, [sp, #16]
 800a26c:	2d00      	cmp	r5, #0
 800a26e:	d07c      	beq.n	800a36a <_dtoa_r+0x1da>
 800a270:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a274:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a278:	46b2      	mov	sl, r6
 800a27a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a27e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a282:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a286:	2200      	movs	r2, #0
 800a288:	4b8b      	ldr	r3, [pc, #556]	; (800a4b8 <_dtoa_r+0x328>)
 800a28a:	4650      	mov	r0, sl
 800a28c:	4659      	mov	r1, fp
 800a28e:	f7f6 f823 	bl	80002d8 <__aeabi_dsub>
 800a292:	a381      	add	r3, pc, #516	; (adr r3, 800a498 <_dtoa_r+0x308>)
 800a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a298:	f7f6 f9d6 	bl	8000648 <__aeabi_dmul>
 800a29c:	a380      	add	r3, pc, #512	; (adr r3, 800a4a0 <_dtoa_r+0x310>)
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	f7f6 f81b 	bl	80002dc <__adddf3>
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	460f      	mov	r7, r1
 800a2ac:	f7f6 f962 	bl	8000574 <__aeabi_i2d>
 800a2b0:	a37d      	add	r3, pc, #500	; (adr r3, 800a4a8 <_dtoa_r+0x318>)
 800a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b6:	f7f6 f9c7 	bl	8000648 <__aeabi_dmul>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	460b      	mov	r3, r1
 800a2be:	4630      	mov	r0, r6
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	f7f6 f80b 	bl	80002dc <__adddf3>
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	460f      	mov	r7, r1
 800a2ca:	f7f6 fc6d 	bl	8000ba8 <__aeabi_d2iz>
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	4682      	mov	sl, r0
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	4639      	mov	r1, r7
 800a2d8:	f7f6 fc28 	bl	8000b2c <__aeabi_dcmplt>
 800a2dc:	b148      	cbz	r0, 800a2f2 <_dtoa_r+0x162>
 800a2de:	4650      	mov	r0, sl
 800a2e0:	f7f6 f948 	bl	8000574 <__aeabi_i2d>
 800a2e4:	4632      	mov	r2, r6
 800a2e6:	463b      	mov	r3, r7
 800a2e8:	f7f6 fc16 	bl	8000b18 <__aeabi_dcmpeq>
 800a2ec:	b908      	cbnz	r0, 800a2f2 <_dtoa_r+0x162>
 800a2ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2f2:	f1ba 0f16 	cmp.w	sl, #22
 800a2f6:	d859      	bhi.n	800a3ac <_dtoa_r+0x21c>
 800a2f8:	4970      	ldr	r1, [pc, #448]	; (800a4bc <_dtoa_r+0x32c>)
 800a2fa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a2fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a302:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a306:	f7f6 fc2f 	bl	8000b68 <__aeabi_dcmpgt>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d050      	beq.n	800a3b0 <_dtoa_r+0x220>
 800a30e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a312:	2300      	movs	r3, #0
 800a314:	930f      	str	r3, [sp, #60]	; 0x3c
 800a316:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a318:	1b5d      	subs	r5, r3, r5
 800a31a:	f1b5 0801 	subs.w	r8, r5, #1
 800a31e:	bf49      	itett	mi
 800a320:	f1c5 0301 	rsbmi	r3, r5, #1
 800a324:	2300      	movpl	r3, #0
 800a326:	9305      	strmi	r3, [sp, #20]
 800a328:	f04f 0800 	movmi.w	r8, #0
 800a32c:	bf58      	it	pl
 800a32e:	9305      	strpl	r3, [sp, #20]
 800a330:	f1ba 0f00 	cmp.w	sl, #0
 800a334:	db3e      	blt.n	800a3b4 <_dtoa_r+0x224>
 800a336:	2300      	movs	r3, #0
 800a338:	44d0      	add	r8, sl
 800a33a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a33e:	9307      	str	r3, [sp, #28]
 800a340:	9b06      	ldr	r3, [sp, #24]
 800a342:	2b09      	cmp	r3, #9
 800a344:	f200 8090 	bhi.w	800a468 <_dtoa_r+0x2d8>
 800a348:	2b05      	cmp	r3, #5
 800a34a:	bfc4      	itt	gt
 800a34c:	3b04      	subgt	r3, #4
 800a34e:	9306      	strgt	r3, [sp, #24]
 800a350:	9b06      	ldr	r3, [sp, #24]
 800a352:	f1a3 0302 	sub.w	r3, r3, #2
 800a356:	bfcc      	ite	gt
 800a358:	2500      	movgt	r5, #0
 800a35a:	2501      	movle	r5, #1
 800a35c:	2b03      	cmp	r3, #3
 800a35e:	f200 808f 	bhi.w	800a480 <_dtoa_r+0x2f0>
 800a362:	e8df f003 	tbb	[pc, r3]
 800a366:	7f7d      	.short	0x7f7d
 800a368:	7131      	.short	0x7131
 800a36a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a36e:	441d      	add	r5, r3
 800a370:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a374:	2820      	cmp	r0, #32
 800a376:	dd13      	ble.n	800a3a0 <_dtoa_r+0x210>
 800a378:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a37c:	9b00      	ldr	r3, [sp, #0]
 800a37e:	fa08 f800 	lsl.w	r8, r8, r0
 800a382:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a386:	fa23 f000 	lsr.w	r0, r3, r0
 800a38a:	ea48 0000 	orr.w	r0, r8, r0
 800a38e:	f7f6 f8e1 	bl	8000554 <__aeabi_ui2d>
 800a392:	2301      	movs	r3, #1
 800a394:	4682      	mov	sl, r0
 800a396:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a39a:	3d01      	subs	r5, #1
 800a39c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a39e:	e772      	b.n	800a286 <_dtoa_r+0xf6>
 800a3a0:	9b00      	ldr	r3, [sp, #0]
 800a3a2:	f1c0 0020 	rsb	r0, r0, #32
 800a3a6:	fa03 f000 	lsl.w	r0, r3, r0
 800a3aa:	e7f0      	b.n	800a38e <_dtoa_r+0x1fe>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e7b1      	b.n	800a314 <_dtoa_r+0x184>
 800a3b0:	900f      	str	r0, [sp, #60]	; 0x3c
 800a3b2:	e7b0      	b.n	800a316 <_dtoa_r+0x186>
 800a3b4:	9b05      	ldr	r3, [sp, #20]
 800a3b6:	eba3 030a 	sub.w	r3, r3, sl
 800a3ba:	9305      	str	r3, [sp, #20]
 800a3bc:	f1ca 0300 	rsb	r3, sl, #0
 800a3c0:	9307      	str	r3, [sp, #28]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	930e      	str	r3, [sp, #56]	; 0x38
 800a3c6:	e7bb      	b.n	800a340 <_dtoa_r+0x1b0>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a3cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	dd59      	ble.n	800a486 <_dtoa_r+0x2f6>
 800a3d2:	9302      	str	r3, [sp, #8]
 800a3d4:	4699      	mov	r9, r3
 800a3d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a3d8:	2200      	movs	r2, #0
 800a3da:	6072      	str	r2, [r6, #4]
 800a3dc:	2204      	movs	r2, #4
 800a3de:	f102 0014 	add.w	r0, r2, #20
 800a3e2:	4298      	cmp	r0, r3
 800a3e4:	6871      	ldr	r1, [r6, #4]
 800a3e6:	d953      	bls.n	800a490 <_dtoa_r+0x300>
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f001 f860 	bl	800b4ae <_Balloc>
 800a3ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3f0:	6030      	str	r0, [r6, #0]
 800a3f2:	f1b9 0f0e 	cmp.w	r9, #14
 800a3f6:	f8d3 b000 	ldr.w	fp, [r3]
 800a3fa:	f200 80e6 	bhi.w	800a5ca <_dtoa_r+0x43a>
 800a3fe:	2d00      	cmp	r5, #0
 800a400:	f000 80e3 	beq.w	800a5ca <_dtoa_r+0x43a>
 800a404:	ed9d 7b00 	vldr	d7, [sp]
 800a408:	f1ba 0f00 	cmp.w	sl, #0
 800a40c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a410:	dd74      	ble.n	800a4fc <_dtoa_r+0x36c>
 800a412:	4a2a      	ldr	r2, [pc, #168]	; (800a4bc <_dtoa_r+0x32c>)
 800a414:	f00a 030f 	and.w	r3, sl, #15
 800a418:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a41c:	ed93 7b00 	vldr	d7, [r3]
 800a420:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a424:	06f0      	lsls	r0, r6, #27
 800a426:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a42a:	d565      	bpl.n	800a4f8 <_dtoa_r+0x368>
 800a42c:	4b24      	ldr	r3, [pc, #144]	; (800a4c0 <_dtoa_r+0x330>)
 800a42e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a432:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a436:	f7f6 fa31 	bl	800089c <__aeabi_ddiv>
 800a43a:	e9cd 0100 	strd	r0, r1, [sp]
 800a43e:	f006 060f 	and.w	r6, r6, #15
 800a442:	2503      	movs	r5, #3
 800a444:	4f1e      	ldr	r7, [pc, #120]	; (800a4c0 <_dtoa_r+0x330>)
 800a446:	e04c      	b.n	800a4e2 <_dtoa_r+0x352>
 800a448:	2301      	movs	r3, #1
 800a44a:	930a      	str	r3, [sp, #40]	; 0x28
 800a44c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a44e:	4453      	add	r3, sl
 800a450:	f103 0901 	add.w	r9, r3, #1
 800a454:	9302      	str	r3, [sp, #8]
 800a456:	464b      	mov	r3, r9
 800a458:	2b01      	cmp	r3, #1
 800a45a:	bfb8      	it	lt
 800a45c:	2301      	movlt	r3, #1
 800a45e:	e7ba      	b.n	800a3d6 <_dtoa_r+0x246>
 800a460:	2300      	movs	r3, #0
 800a462:	e7b2      	b.n	800a3ca <_dtoa_r+0x23a>
 800a464:	2300      	movs	r3, #0
 800a466:	e7f0      	b.n	800a44a <_dtoa_r+0x2ba>
 800a468:	2501      	movs	r5, #1
 800a46a:	2300      	movs	r3, #0
 800a46c:	9306      	str	r3, [sp, #24]
 800a46e:	950a      	str	r5, [sp, #40]	; 0x28
 800a470:	f04f 33ff 	mov.w	r3, #4294967295
 800a474:	9302      	str	r3, [sp, #8]
 800a476:	4699      	mov	r9, r3
 800a478:	2200      	movs	r2, #0
 800a47a:	2312      	movs	r3, #18
 800a47c:	920b      	str	r2, [sp, #44]	; 0x2c
 800a47e:	e7aa      	b.n	800a3d6 <_dtoa_r+0x246>
 800a480:	2301      	movs	r3, #1
 800a482:	930a      	str	r3, [sp, #40]	; 0x28
 800a484:	e7f4      	b.n	800a470 <_dtoa_r+0x2e0>
 800a486:	2301      	movs	r3, #1
 800a488:	9302      	str	r3, [sp, #8]
 800a48a:	4699      	mov	r9, r3
 800a48c:	461a      	mov	r2, r3
 800a48e:	e7f5      	b.n	800a47c <_dtoa_r+0x2ec>
 800a490:	3101      	adds	r1, #1
 800a492:	6071      	str	r1, [r6, #4]
 800a494:	0052      	lsls	r2, r2, #1
 800a496:	e7a2      	b.n	800a3de <_dtoa_r+0x24e>
 800a498:	636f4361 	.word	0x636f4361
 800a49c:	3fd287a7 	.word	0x3fd287a7
 800a4a0:	8b60c8b3 	.word	0x8b60c8b3
 800a4a4:	3fc68a28 	.word	0x3fc68a28
 800a4a8:	509f79fb 	.word	0x509f79fb
 800a4ac:	3fd34413 	.word	0x3fd34413
 800a4b0:	7ff00000 	.word	0x7ff00000
 800a4b4:	0800c67d 	.word	0x0800c67d
 800a4b8:	3ff80000 	.word	0x3ff80000
 800a4bc:	0800c738 	.word	0x0800c738
 800a4c0:	0800c710 	.word	0x0800c710
 800a4c4:	0800c701 	.word	0x0800c701
 800a4c8:	07f1      	lsls	r1, r6, #31
 800a4ca:	d508      	bpl.n	800a4de <_dtoa_r+0x34e>
 800a4cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4d4:	f7f6 f8b8 	bl	8000648 <__aeabi_dmul>
 800a4d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a4dc:	3501      	adds	r5, #1
 800a4de:	1076      	asrs	r6, r6, #1
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	2e00      	cmp	r6, #0
 800a4e4:	d1f0      	bne.n	800a4c8 <_dtoa_r+0x338>
 800a4e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a4ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4ee:	f7f6 f9d5 	bl	800089c <__aeabi_ddiv>
 800a4f2:	e9cd 0100 	strd	r0, r1, [sp]
 800a4f6:	e01a      	b.n	800a52e <_dtoa_r+0x39e>
 800a4f8:	2502      	movs	r5, #2
 800a4fa:	e7a3      	b.n	800a444 <_dtoa_r+0x2b4>
 800a4fc:	f000 80a0 	beq.w	800a640 <_dtoa_r+0x4b0>
 800a500:	f1ca 0600 	rsb	r6, sl, #0
 800a504:	4b9f      	ldr	r3, [pc, #636]	; (800a784 <_dtoa_r+0x5f4>)
 800a506:	4fa0      	ldr	r7, [pc, #640]	; (800a788 <_dtoa_r+0x5f8>)
 800a508:	f006 020f 	and.w	r2, r6, #15
 800a50c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a518:	f7f6 f896 	bl	8000648 <__aeabi_dmul>
 800a51c:	e9cd 0100 	strd	r0, r1, [sp]
 800a520:	1136      	asrs	r6, r6, #4
 800a522:	2300      	movs	r3, #0
 800a524:	2502      	movs	r5, #2
 800a526:	2e00      	cmp	r6, #0
 800a528:	d17f      	bne.n	800a62a <_dtoa_r+0x49a>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1e1      	bne.n	800a4f2 <_dtoa_r+0x362>
 800a52e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a530:	2b00      	cmp	r3, #0
 800a532:	f000 8087 	beq.w	800a644 <_dtoa_r+0x4b4>
 800a536:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a53a:	2200      	movs	r2, #0
 800a53c:	4b93      	ldr	r3, [pc, #588]	; (800a78c <_dtoa_r+0x5fc>)
 800a53e:	4630      	mov	r0, r6
 800a540:	4639      	mov	r1, r7
 800a542:	f7f6 faf3 	bl	8000b2c <__aeabi_dcmplt>
 800a546:	2800      	cmp	r0, #0
 800a548:	d07c      	beq.n	800a644 <_dtoa_r+0x4b4>
 800a54a:	f1b9 0f00 	cmp.w	r9, #0
 800a54e:	d079      	beq.n	800a644 <_dtoa_r+0x4b4>
 800a550:	9b02      	ldr	r3, [sp, #8]
 800a552:	2b00      	cmp	r3, #0
 800a554:	dd35      	ble.n	800a5c2 <_dtoa_r+0x432>
 800a556:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a55a:	9308      	str	r3, [sp, #32]
 800a55c:	4639      	mov	r1, r7
 800a55e:	2200      	movs	r2, #0
 800a560:	4b8b      	ldr	r3, [pc, #556]	; (800a790 <_dtoa_r+0x600>)
 800a562:	4630      	mov	r0, r6
 800a564:	f7f6 f870 	bl	8000648 <__aeabi_dmul>
 800a568:	e9cd 0100 	strd	r0, r1, [sp]
 800a56c:	9f02      	ldr	r7, [sp, #8]
 800a56e:	3501      	adds	r5, #1
 800a570:	4628      	mov	r0, r5
 800a572:	f7f5 ffff 	bl	8000574 <__aeabi_i2d>
 800a576:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a57a:	f7f6 f865 	bl	8000648 <__aeabi_dmul>
 800a57e:	2200      	movs	r2, #0
 800a580:	4b84      	ldr	r3, [pc, #528]	; (800a794 <_dtoa_r+0x604>)
 800a582:	f7f5 feab 	bl	80002dc <__adddf3>
 800a586:	4605      	mov	r5, r0
 800a588:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a58c:	2f00      	cmp	r7, #0
 800a58e:	d15d      	bne.n	800a64c <_dtoa_r+0x4bc>
 800a590:	2200      	movs	r2, #0
 800a592:	4b81      	ldr	r3, [pc, #516]	; (800a798 <_dtoa_r+0x608>)
 800a594:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a598:	f7f5 fe9e 	bl	80002d8 <__aeabi_dsub>
 800a59c:	462a      	mov	r2, r5
 800a59e:	4633      	mov	r3, r6
 800a5a0:	e9cd 0100 	strd	r0, r1, [sp]
 800a5a4:	f7f6 fae0 	bl	8000b68 <__aeabi_dcmpgt>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	f040 8288 	bne.w	800aabe <_dtoa_r+0x92e>
 800a5ae:	462a      	mov	r2, r5
 800a5b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a5b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5b8:	f7f6 fab8 	bl	8000b2c <__aeabi_dcmplt>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	f040 827c 	bne.w	800aaba <_dtoa_r+0x92a>
 800a5c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5c6:	e9cd 2300 	strd	r2, r3, [sp]
 800a5ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f2c0 8150 	blt.w	800a872 <_dtoa_r+0x6e2>
 800a5d2:	f1ba 0f0e 	cmp.w	sl, #14
 800a5d6:	f300 814c 	bgt.w	800a872 <_dtoa_r+0x6e2>
 800a5da:	4b6a      	ldr	r3, [pc, #424]	; (800a784 <_dtoa_r+0x5f4>)
 800a5dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a5e0:	ed93 7b00 	vldr	d7, [r3]
 800a5e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a5ec:	f280 80d8 	bge.w	800a7a0 <_dtoa_r+0x610>
 800a5f0:	f1b9 0f00 	cmp.w	r9, #0
 800a5f4:	f300 80d4 	bgt.w	800a7a0 <_dtoa_r+0x610>
 800a5f8:	f040 825e 	bne.w	800aab8 <_dtoa_r+0x928>
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	4b66      	ldr	r3, [pc, #408]	; (800a798 <_dtoa_r+0x608>)
 800a600:	ec51 0b17 	vmov	r0, r1, d7
 800a604:	f7f6 f820 	bl	8000648 <__aeabi_dmul>
 800a608:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a60c:	f7f6 faa2 	bl	8000b54 <__aeabi_dcmpge>
 800a610:	464f      	mov	r7, r9
 800a612:	464e      	mov	r6, r9
 800a614:	2800      	cmp	r0, #0
 800a616:	f040 8234 	bne.w	800aa82 <_dtoa_r+0x8f2>
 800a61a:	2331      	movs	r3, #49	; 0x31
 800a61c:	f10b 0501 	add.w	r5, fp, #1
 800a620:	f88b 3000 	strb.w	r3, [fp]
 800a624:	f10a 0a01 	add.w	sl, sl, #1
 800a628:	e22f      	b.n	800aa8a <_dtoa_r+0x8fa>
 800a62a:	07f2      	lsls	r2, r6, #31
 800a62c:	d505      	bpl.n	800a63a <_dtoa_r+0x4aa>
 800a62e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a632:	f7f6 f809 	bl	8000648 <__aeabi_dmul>
 800a636:	3501      	adds	r5, #1
 800a638:	2301      	movs	r3, #1
 800a63a:	1076      	asrs	r6, r6, #1
 800a63c:	3708      	adds	r7, #8
 800a63e:	e772      	b.n	800a526 <_dtoa_r+0x396>
 800a640:	2502      	movs	r5, #2
 800a642:	e774      	b.n	800a52e <_dtoa_r+0x39e>
 800a644:	f8cd a020 	str.w	sl, [sp, #32]
 800a648:	464f      	mov	r7, r9
 800a64a:	e791      	b.n	800a570 <_dtoa_r+0x3e0>
 800a64c:	4b4d      	ldr	r3, [pc, #308]	; (800a784 <_dtoa_r+0x5f4>)
 800a64e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a652:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d047      	beq.n	800a6ec <_dtoa_r+0x55c>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	2000      	movs	r0, #0
 800a662:	494e      	ldr	r1, [pc, #312]	; (800a79c <_dtoa_r+0x60c>)
 800a664:	f7f6 f91a 	bl	800089c <__aeabi_ddiv>
 800a668:	462a      	mov	r2, r5
 800a66a:	4633      	mov	r3, r6
 800a66c:	f7f5 fe34 	bl	80002d8 <__aeabi_dsub>
 800a670:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a674:	465d      	mov	r5, fp
 800a676:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a67a:	f7f6 fa95 	bl	8000ba8 <__aeabi_d2iz>
 800a67e:	4606      	mov	r6, r0
 800a680:	f7f5 ff78 	bl	8000574 <__aeabi_i2d>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a68c:	f7f5 fe24 	bl	80002d8 <__aeabi_dsub>
 800a690:	3630      	adds	r6, #48	; 0x30
 800a692:	f805 6b01 	strb.w	r6, [r5], #1
 800a696:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a69a:	e9cd 0100 	strd	r0, r1, [sp]
 800a69e:	f7f6 fa45 	bl	8000b2c <__aeabi_dcmplt>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d163      	bne.n	800a76e <_dtoa_r+0x5de>
 800a6a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	4937      	ldr	r1, [pc, #220]	; (800a78c <_dtoa_r+0x5fc>)
 800a6ae:	f7f5 fe13 	bl	80002d8 <__aeabi_dsub>
 800a6b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a6b6:	f7f6 fa39 	bl	8000b2c <__aeabi_dcmplt>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	f040 80b7 	bne.w	800a82e <_dtoa_r+0x69e>
 800a6c0:	eba5 030b 	sub.w	r3, r5, fp
 800a6c4:	429f      	cmp	r7, r3
 800a6c6:	f77f af7c 	ble.w	800a5c2 <_dtoa_r+0x432>
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	4b30      	ldr	r3, [pc, #192]	; (800a790 <_dtoa_r+0x600>)
 800a6ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6d2:	f7f5 ffb9 	bl	8000648 <__aeabi_dmul>
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a6dc:	4b2c      	ldr	r3, [pc, #176]	; (800a790 <_dtoa_r+0x600>)
 800a6de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6e2:	f7f5 ffb1 	bl	8000648 <__aeabi_dmul>
 800a6e6:	e9cd 0100 	strd	r0, r1, [sp]
 800a6ea:	e7c4      	b.n	800a676 <_dtoa_r+0x4e6>
 800a6ec:	462a      	mov	r2, r5
 800a6ee:	4633      	mov	r3, r6
 800a6f0:	f7f5 ffaa 	bl	8000648 <__aeabi_dmul>
 800a6f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a6f8:	eb0b 0507 	add.w	r5, fp, r7
 800a6fc:	465e      	mov	r6, fp
 800a6fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a702:	f7f6 fa51 	bl	8000ba8 <__aeabi_d2iz>
 800a706:	4607      	mov	r7, r0
 800a708:	f7f5 ff34 	bl	8000574 <__aeabi_i2d>
 800a70c:	3730      	adds	r7, #48	; 0x30
 800a70e:	4602      	mov	r2, r0
 800a710:	460b      	mov	r3, r1
 800a712:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a716:	f7f5 fddf 	bl	80002d8 <__aeabi_dsub>
 800a71a:	f806 7b01 	strb.w	r7, [r6], #1
 800a71e:	42ae      	cmp	r6, r5
 800a720:	e9cd 0100 	strd	r0, r1, [sp]
 800a724:	f04f 0200 	mov.w	r2, #0
 800a728:	d126      	bne.n	800a778 <_dtoa_r+0x5e8>
 800a72a:	4b1c      	ldr	r3, [pc, #112]	; (800a79c <_dtoa_r+0x60c>)
 800a72c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a730:	f7f5 fdd4 	bl	80002dc <__adddf3>
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a73c:	f7f6 fa14 	bl	8000b68 <__aeabi_dcmpgt>
 800a740:	2800      	cmp	r0, #0
 800a742:	d174      	bne.n	800a82e <_dtoa_r+0x69e>
 800a744:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a748:	2000      	movs	r0, #0
 800a74a:	4914      	ldr	r1, [pc, #80]	; (800a79c <_dtoa_r+0x60c>)
 800a74c:	f7f5 fdc4 	bl	80002d8 <__aeabi_dsub>
 800a750:	4602      	mov	r2, r0
 800a752:	460b      	mov	r3, r1
 800a754:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a758:	f7f6 f9e8 	bl	8000b2c <__aeabi_dcmplt>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	f43f af30 	beq.w	800a5c2 <_dtoa_r+0x432>
 800a762:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a766:	2b30      	cmp	r3, #48	; 0x30
 800a768:	f105 32ff 	add.w	r2, r5, #4294967295
 800a76c:	d002      	beq.n	800a774 <_dtoa_r+0x5e4>
 800a76e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a772:	e04a      	b.n	800a80a <_dtoa_r+0x67a>
 800a774:	4615      	mov	r5, r2
 800a776:	e7f4      	b.n	800a762 <_dtoa_r+0x5d2>
 800a778:	4b05      	ldr	r3, [pc, #20]	; (800a790 <_dtoa_r+0x600>)
 800a77a:	f7f5 ff65 	bl	8000648 <__aeabi_dmul>
 800a77e:	e9cd 0100 	strd	r0, r1, [sp]
 800a782:	e7bc      	b.n	800a6fe <_dtoa_r+0x56e>
 800a784:	0800c738 	.word	0x0800c738
 800a788:	0800c710 	.word	0x0800c710
 800a78c:	3ff00000 	.word	0x3ff00000
 800a790:	40240000 	.word	0x40240000
 800a794:	401c0000 	.word	0x401c0000
 800a798:	40140000 	.word	0x40140000
 800a79c:	3fe00000 	.word	0x3fe00000
 800a7a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a7a4:	465d      	mov	r5, fp
 800a7a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	4639      	mov	r1, r7
 800a7ae:	f7f6 f875 	bl	800089c <__aeabi_ddiv>
 800a7b2:	f7f6 f9f9 	bl	8000ba8 <__aeabi_d2iz>
 800a7b6:	4680      	mov	r8, r0
 800a7b8:	f7f5 fedc 	bl	8000574 <__aeabi_i2d>
 800a7bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7c0:	f7f5 ff42 	bl	8000648 <__aeabi_dmul>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	4639      	mov	r1, r7
 800a7cc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a7d0:	f7f5 fd82 	bl	80002d8 <__aeabi_dsub>
 800a7d4:	f805 6b01 	strb.w	r6, [r5], #1
 800a7d8:	eba5 060b 	sub.w	r6, r5, fp
 800a7dc:	45b1      	cmp	r9, r6
 800a7de:	4602      	mov	r2, r0
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	d139      	bne.n	800a858 <_dtoa_r+0x6c8>
 800a7e4:	f7f5 fd7a 	bl	80002dc <__adddf3>
 800a7e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7ec:	4606      	mov	r6, r0
 800a7ee:	460f      	mov	r7, r1
 800a7f0:	f7f6 f9ba 	bl	8000b68 <__aeabi_dcmpgt>
 800a7f4:	b9c8      	cbnz	r0, 800a82a <_dtoa_r+0x69a>
 800a7f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	f7f6 f98b 	bl	8000b18 <__aeabi_dcmpeq>
 800a802:	b110      	cbz	r0, 800a80a <_dtoa_r+0x67a>
 800a804:	f018 0f01 	tst.w	r8, #1
 800a808:	d10f      	bne.n	800a82a <_dtoa_r+0x69a>
 800a80a:	9904      	ldr	r1, [sp, #16]
 800a80c:	4620      	mov	r0, r4
 800a80e:	f000 fe82 	bl	800b516 <_Bfree>
 800a812:	2300      	movs	r3, #0
 800a814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a816:	702b      	strb	r3, [r5, #0]
 800a818:	f10a 0301 	add.w	r3, sl, #1
 800a81c:	6013      	str	r3, [r2, #0]
 800a81e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a820:	2b00      	cmp	r3, #0
 800a822:	f000 8241 	beq.w	800aca8 <_dtoa_r+0xb18>
 800a826:	601d      	str	r5, [r3, #0]
 800a828:	e23e      	b.n	800aca8 <_dtoa_r+0xb18>
 800a82a:	f8cd a020 	str.w	sl, [sp, #32]
 800a82e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a832:	2a39      	cmp	r2, #57	; 0x39
 800a834:	f105 33ff 	add.w	r3, r5, #4294967295
 800a838:	d108      	bne.n	800a84c <_dtoa_r+0x6bc>
 800a83a:	459b      	cmp	fp, r3
 800a83c:	d10a      	bne.n	800a854 <_dtoa_r+0x6c4>
 800a83e:	9b08      	ldr	r3, [sp, #32]
 800a840:	3301      	adds	r3, #1
 800a842:	9308      	str	r3, [sp, #32]
 800a844:	2330      	movs	r3, #48	; 0x30
 800a846:	f88b 3000 	strb.w	r3, [fp]
 800a84a:	465b      	mov	r3, fp
 800a84c:	781a      	ldrb	r2, [r3, #0]
 800a84e:	3201      	adds	r2, #1
 800a850:	701a      	strb	r2, [r3, #0]
 800a852:	e78c      	b.n	800a76e <_dtoa_r+0x5de>
 800a854:	461d      	mov	r5, r3
 800a856:	e7ea      	b.n	800a82e <_dtoa_r+0x69e>
 800a858:	2200      	movs	r2, #0
 800a85a:	4b9b      	ldr	r3, [pc, #620]	; (800aac8 <_dtoa_r+0x938>)
 800a85c:	f7f5 fef4 	bl	8000648 <__aeabi_dmul>
 800a860:	2200      	movs	r2, #0
 800a862:	2300      	movs	r3, #0
 800a864:	4606      	mov	r6, r0
 800a866:	460f      	mov	r7, r1
 800a868:	f7f6 f956 	bl	8000b18 <__aeabi_dcmpeq>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	d09a      	beq.n	800a7a6 <_dtoa_r+0x616>
 800a870:	e7cb      	b.n	800a80a <_dtoa_r+0x67a>
 800a872:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a874:	2a00      	cmp	r2, #0
 800a876:	f000 808b 	beq.w	800a990 <_dtoa_r+0x800>
 800a87a:	9a06      	ldr	r2, [sp, #24]
 800a87c:	2a01      	cmp	r2, #1
 800a87e:	dc6e      	bgt.n	800a95e <_dtoa_r+0x7ce>
 800a880:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a882:	2a00      	cmp	r2, #0
 800a884:	d067      	beq.n	800a956 <_dtoa_r+0x7c6>
 800a886:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a88a:	9f07      	ldr	r7, [sp, #28]
 800a88c:	9d05      	ldr	r5, [sp, #20]
 800a88e:	9a05      	ldr	r2, [sp, #20]
 800a890:	2101      	movs	r1, #1
 800a892:	441a      	add	r2, r3
 800a894:	4620      	mov	r0, r4
 800a896:	9205      	str	r2, [sp, #20]
 800a898:	4498      	add	r8, r3
 800a89a:	f000 ff1a 	bl	800b6d2 <__i2b>
 800a89e:	4606      	mov	r6, r0
 800a8a0:	2d00      	cmp	r5, #0
 800a8a2:	dd0c      	ble.n	800a8be <_dtoa_r+0x72e>
 800a8a4:	f1b8 0f00 	cmp.w	r8, #0
 800a8a8:	dd09      	ble.n	800a8be <_dtoa_r+0x72e>
 800a8aa:	4545      	cmp	r5, r8
 800a8ac:	9a05      	ldr	r2, [sp, #20]
 800a8ae:	462b      	mov	r3, r5
 800a8b0:	bfa8      	it	ge
 800a8b2:	4643      	movge	r3, r8
 800a8b4:	1ad2      	subs	r2, r2, r3
 800a8b6:	9205      	str	r2, [sp, #20]
 800a8b8:	1aed      	subs	r5, r5, r3
 800a8ba:	eba8 0803 	sub.w	r8, r8, r3
 800a8be:	9b07      	ldr	r3, [sp, #28]
 800a8c0:	b1eb      	cbz	r3, 800a8fe <_dtoa_r+0x76e>
 800a8c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d067      	beq.n	800a998 <_dtoa_r+0x808>
 800a8c8:	b18f      	cbz	r7, 800a8ee <_dtoa_r+0x75e>
 800a8ca:	4631      	mov	r1, r6
 800a8cc:	463a      	mov	r2, r7
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f000 ff9e 	bl	800b810 <__pow5mult>
 800a8d4:	9a04      	ldr	r2, [sp, #16]
 800a8d6:	4601      	mov	r1, r0
 800a8d8:	4606      	mov	r6, r0
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f000 ff02 	bl	800b6e4 <__multiply>
 800a8e0:	9904      	ldr	r1, [sp, #16]
 800a8e2:	9008      	str	r0, [sp, #32]
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f000 fe16 	bl	800b516 <_Bfree>
 800a8ea:	9b08      	ldr	r3, [sp, #32]
 800a8ec:	9304      	str	r3, [sp, #16]
 800a8ee:	9b07      	ldr	r3, [sp, #28]
 800a8f0:	1bda      	subs	r2, r3, r7
 800a8f2:	d004      	beq.n	800a8fe <_dtoa_r+0x76e>
 800a8f4:	9904      	ldr	r1, [sp, #16]
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 ff8a 	bl	800b810 <__pow5mult>
 800a8fc:	9004      	str	r0, [sp, #16]
 800a8fe:	2101      	movs	r1, #1
 800a900:	4620      	mov	r0, r4
 800a902:	f000 fee6 	bl	800b6d2 <__i2b>
 800a906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a908:	4607      	mov	r7, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f000 81d0 	beq.w	800acb0 <_dtoa_r+0xb20>
 800a910:	461a      	mov	r2, r3
 800a912:	4601      	mov	r1, r0
 800a914:	4620      	mov	r0, r4
 800a916:	f000 ff7b 	bl	800b810 <__pow5mult>
 800a91a:	9b06      	ldr	r3, [sp, #24]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	4607      	mov	r7, r0
 800a920:	dc40      	bgt.n	800a9a4 <_dtoa_r+0x814>
 800a922:	9b00      	ldr	r3, [sp, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d139      	bne.n	800a99c <_dtoa_r+0x80c>
 800a928:	9b01      	ldr	r3, [sp, #4]
 800a92a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d136      	bne.n	800a9a0 <_dtoa_r+0x810>
 800a932:	9b01      	ldr	r3, [sp, #4]
 800a934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a938:	0d1b      	lsrs	r3, r3, #20
 800a93a:	051b      	lsls	r3, r3, #20
 800a93c:	b12b      	cbz	r3, 800a94a <_dtoa_r+0x7ba>
 800a93e:	9b05      	ldr	r3, [sp, #20]
 800a940:	3301      	adds	r3, #1
 800a942:	9305      	str	r3, [sp, #20]
 800a944:	f108 0801 	add.w	r8, r8, #1
 800a948:	2301      	movs	r3, #1
 800a94a:	9307      	str	r3, [sp, #28]
 800a94c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d12a      	bne.n	800a9a8 <_dtoa_r+0x818>
 800a952:	2001      	movs	r0, #1
 800a954:	e030      	b.n	800a9b8 <_dtoa_r+0x828>
 800a956:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a958:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a95c:	e795      	b.n	800a88a <_dtoa_r+0x6fa>
 800a95e:	9b07      	ldr	r3, [sp, #28]
 800a960:	f109 37ff 	add.w	r7, r9, #4294967295
 800a964:	42bb      	cmp	r3, r7
 800a966:	bfbf      	itttt	lt
 800a968:	9b07      	ldrlt	r3, [sp, #28]
 800a96a:	9707      	strlt	r7, [sp, #28]
 800a96c:	1afa      	sublt	r2, r7, r3
 800a96e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a970:	bfbb      	ittet	lt
 800a972:	189b      	addlt	r3, r3, r2
 800a974:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a976:	1bdf      	subge	r7, r3, r7
 800a978:	2700      	movlt	r7, #0
 800a97a:	f1b9 0f00 	cmp.w	r9, #0
 800a97e:	bfb5      	itete	lt
 800a980:	9b05      	ldrlt	r3, [sp, #20]
 800a982:	9d05      	ldrge	r5, [sp, #20]
 800a984:	eba3 0509 	sublt.w	r5, r3, r9
 800a988:	464b      	movge	r3, r9
 800a98a:	bfb8      	it	lt
 800a98c:	2300      	movlt	r3, #0
 800a98e:	e77e      	b.n	800a88e <_dtoa_r+0x6fe>
 800a990:	9f07      	ldr	r7, [sp, #28]
 800a992:	9d05      	ldr	r5, [sp, #20]
 800a994:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a996:	e783      	b.n	800a8a0 <_dtoa_r+0x710>
 800a998:	9a07      	ldr	r2, [sp, #28]
 800a99a:	e7ab      	b.n	800a8f4 <_dtoa_r+0x764>
 800a99c:	2300      	movs	r3, #0
 800a99e:	e7d4      	b.n	800a94a <_dtoa_r+0x7ba>
 800a9a0:	9b00      	ldr	r3, [sp, #0]
 800a9a2:	e7d2      	b.n	800a94a <_dtoa_r+0x7ba>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	9307      	str	r3, [sp, #28]
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a9ae:	6918      	ldr	r0, [r3, #16]
 800a9b0:	f000 fe41 	bl	800b636 <__hi0bits>
 800a9b4:	f1c0 0020 	rsb	r0, r0, #32
 800a9b8:	4440      	add	r0, r8
 800a9ba:	f010 001f 	ands.w	r0, r0, #31
 800a9be:	d047      	beq.n	800aa50 <_dtoa_r+0x8c0>
 800a9c0:	f1c0 0320 	rsb	r3, r0, #32
 800a9c4:	2b04      	cmp	r3, #4
 800a9c6:	dd3b      	ble.n	800aa40 <_dtoa_r+0x8b0>
 800a9c8:	9b05      	ldr	r3, [sp, #20]
 800a9ca:	f1c0 001c 	rsb	r0, r0, #28
 800a9ce:	4403      	add	r3, r0
 800a9d0:	9305      	str	r3, [sp, #20]
 800a9d2:	4405      	add	r5, r0
 800a9d4:	4480      	add	r8, r0
 800a9d6:	9b05      	ldr	r3, [sp, #20]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	dd05      	ble.n	800a9e8 <_dtoa_r+0x858>
 800a9dc:	461a      	mov	r2, r3
 800a9de:	9904      	ldr	r1, [sp, #16]
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f000 ff63 	bl	800b8ac <__lshift>
 800a9e6:	9004      	str	r0, [sp, #16]
 800a9e8:	f1b8 0f00 	cmp.w	r8, #0
 800a9ec:	dd05      	ble.n	800a9fa <_dtoa_r+0x86a>
 800a9ee:	4639      	mov	r1, r7
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f000 ff5a 	bl	800b8ac <__lshift>
 800a9f8:	4607      	mov	r7, r0
 800a9fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9fc:	b353      	cbz	r3, 800aa54 <_dtoa_r+0x8c4>
 800a9fe:	4639      	mov	r1, r7
 800aa00:	9804      	ldr	r0, [sp, #16]
 800aa02:	f000 ffa7 	bl	800b954 <__mcmp>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	da24      	bge.n	800aa54 <_dtoa_r+0x8c4>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	220a      	movs	r2, #10
 800aa0e:	9904      	ldr	r1, [sp, #16]
 800aa10:	4620      	mov	r0, r4
 800aa12:	f000 fd97 	bl	800b544 <__multadd>
 800aa16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa18:	9004      	str	r0, [sp, #16]
 800aa1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f000 814d 	beq.w	800acbe <_dtoa_r+0xb2e>
 800aa24:	2300      	movs	r3, #0
 800aa26:	4631      	mov	r1, r6
 800aa28:	220a      	movs	r2, #10
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f000 fd8a 	bl	800b544 <__multadd>
 800aa30:	9b02      	ldr	r3, [sp, #8]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	4606      	mov	r6, r0
 800aa36:	dc4f      	bgt.n	800aad8 <_dtoa_r+0x948>
 800aa38:	9b06      	ldr	r3, [sp, #24]
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	dd4c      	ble.n	800aad8 <_dtoa_r+0x948>
 800aa3e:	e011      	b.n	800aa64 <_dtoa_r+0x8d4>
 800aa40:	d0c9      	beq.n	800a9d6 <_dtoa_r+0x846>
 800aa42:	9a05      	ldr	r2, [sp, #20]
 800aa44:	331c      	adds	r3, #28
 800aa46:	441a      	add	r2, r3
 800aa48:	9205      	str	r2, [sp, #20]
 800aa4a:	441d      	add	r5, r3
 800aa4c:	4498      	add	r8, r3
 800aa4e:	e7c2      	b.n	800a9d6 <_dtoa_r+0x846>
 800aa50:	4603      	mov	r3, r0
 800aa52:	e7f6      	b.n	800aa42 <_dtoa_r+0x8b2>
 800aa54:	f1b9 0f00 	cmp.w	r9, #0
 800aa58:	dc38      	bgt.n	800aacc <_dtoa_r+0x93c>
 800aa5a:	9b06      	ldr	r3, [sp, #24]
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	dd35      	ble.n	800aacc <_dtoa_r+0x93c>
 800aa60:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa64:	9b02      	ldr	r3, [sp, #8]
 800aa66:	b963      	cbnz	r3, 800aa82 <_dtoa_r+0x8f2>
 800aa68:	4639      	mov	r1, r7
 800aa6a:	2205      	movs	r2, #5
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f000 fd69 	bl	800b544 <__multadd>
 800aa72:	4601      	mov	r1, r0
 800aa74:	4607      	mov	r7, r0
 800aa76:	9804      	ldr	r0, [sp, #16]
 800aa78:	f000 ff6c 	bl	800b954 <__mcmp>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	f73f adcc 	bgt.w	800a61a <_dtoa_r+0x48a>
 800aa82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa84:	465d      	mov	r5, fp
 800aa86:	ea6f 0a03 	mvn.w	sl, r3
 800aa8a:	f04f 0900 	mov.w	r9, #0
 800aa8e:	4639      	mov	r1, r7
 800aa90:	4620      	mov	r0, r4
 800aa92:	f000 fd40 	bl	800b516 <_Bfree>
 800aa96:	2e00      	cmp	r6, #0
 800aa98:	f43f aeb7 	beq.w	800a80a <_dtoa_r+0x67a>
 800aa9c:	f1b9 0f00 	cmp.w	r9, #0
 800aaa0:	d005      	beq.n	800aaae <_dtoa_r+0x91e>
 800aaa2:	45b1      	cmp	r9, r6
 800aaa4:	d003      	beq.n	800aaae <_dtoa_r+0x91e>
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 fd34 	bl	800b516 <_Bfree>
 800aaae:	4631      	mov	r1, r6
 800aab0:	4620      	mov	r0, r4
 800aab2:	f000 fd30 	bl	800b516 <_Bfree>
 800aab6:	e6a8      	b.n	800a80a <_dtoa_r+0x67a>
 800aab8:	2700      	movs	r7, #0
 800aaba:	463e      	mov	r6, r7
 800aabc:	e7e1      	b.n	800aa82 <_dtoa_r+0x8f2>
 800aabe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aac2:	463e      	mov	r6, r7
 800aac4:	e5a9      	b.n	800a61a <_dtoa_r+0x48a>
 800aac6:	bf00      	nop
 800aac8:	40240000 	.word	0x40240000
 800aacc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aace:	f8cd 9008 	str.w	r9, [sp, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	f000 80fa 	beq.w	800accc <_dtoa_r+0xb3c>
 800aad8:	2d00      	cmp	r5, #0
 800aada:	dd05      	ble.n	800aae8 <_dtoa_r+0x958>
 800aadc:	4631      	mov	r1, r6
 800aade:	462a      	mov	r2, r5
 800aae0:	4620      	mov	r0, r4
 800aae2:	f000 fee3 	bl	800b8ac <__lshift>
 800aae6:	4606      	mov	r6, r0
 800aae8:	9b07      	ldr	r3, [sp, #28]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d04c      	beq.n	800ab88 <_dtoa_r+0x9f8>
 800aaee:	6871      	ldr	r1, [r6, #4]
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f000 fcdc 	bl	800b4ae <_Balloc>
 800aaf6:	6932      	ldr	r2, [r6, #16]
 800aaf8:	3202      	adds	r2, #2
 800aafa:	4605      	mov	r5, r0
 800aafc:	0092      	lsls	r2, r2, #2
 800aafe:	f106 010c 	add.w	r1, r6, #12
 800ab02:	300c      	adds	r0, #12
 800ab04:	f000 fcc6 	bl	800b494 <memcpy>
 800ab08:	2201      	movs	r2, #1
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f000 fecd 	bl	800b8ac <__lshift>
 800ab12:	9b00      	ldr	r3, [sp, #0]
 800ab14:	f8cd b014 	str.w	fp, [sp, #20]
 800ab18:	f003 0301 	and.w	r3, r3, #1
 800ab1c:	46b1      	mov	r9, r6
 800ab1e:	9307      	str	r3, [sp, #28]
 800ab20:	4606      	mov	r6, r0
 800ab22:	4639      	mov	r1, r7
 800ab24:	9804      	ldr	r0, [sp, #16]
 800ab26:	f7ff faa7 	bl	800a078 <quorem>
 800ab2a:	4649      	mov	r1, r9
 800ab2c:	4605      	mov	r5, r0
 800ab2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ab32:	9804      	ldr	r0, [sp, #16]
 800ab34:	f000 ff0e 	bl	800b954 <__mcmp>
 800ab38:	4632      	mov	r2, r6
 800ab3a:	9000      	str	r0, [sp, #0]
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f000 ff22 	bl	800b988 <__mdiff>
 800ab44:	68c3      	ldr	r3, [r0, #12]
 800ab46:	4602      	mov	r2, r0
 800ab48:	bb03      	cbnz	r3, 800ab8c <_dtoa_r+0x9fc>
 800ab4a:	4601      	mov	r1, r0
 800ab4c:	9008      	str	r0, [sp, #32]
 800ab4e:	9804      	ldr	r0, [sp, #16]
 800ab50:	f000 ff00 	bl	800b954 <__mcmp>
 800ab54:	9a08      	ldr	r2, [sp, #32]
 800ab56:	4603      	mov	r3, r0
 800ab58:	4611      	mov	r1, r2
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	9308      	str	r3, [sp, #32]
 800ab5e:	f000 fcda 	bl	800b516 <_Bfree>
 800ab62:	9b08      	ldr	r3, [sp, #32]
 800ab64:	b9a3      	cbnz	r3, 800ab90 <_dtoa_r+0xa00>
 800ab66:	9a06      	ldr	r2, [sp, #24]
 800ab68:	b992      	cbnz	r2, 800ab90 <_dtoa_r+0xa00>
 800ab6a:	9a07      	ldr	r2, [sp, #28]
 800ab6c:	b982      	cbnz	r2, 800ab90 <_dtoa_r+0xa00>
 800ab6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ab72:	d029      	beq.n	800abc8 <_dtoa_r+0xa38>
 800ab74:	9b00      	ldr	r3, [sp, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	dd01      	ble.n	800ab7e <_dtoa_r+0x9ee>
 800ab7a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ab7e:	9b05      	ldr	r3, [sp, #20]
 800ab80:	1c5d      	adds	r5, r3, #1
 800ab82:	f883 8000 	strb.w	r8, [r3]
 800ab86:	e782      	b.n	800aa8e <_dtoa_r+0x8fe>
 800ab88:	4630      	mov	r0, r6
 800ab8a:	e7c2      	b.n	800ab12 <_dtoa_r+0x982>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e7e3      	b.n	800ab58 <_dtoa_r+0x9c8>
 800ab90:	9a00      	ldr	r2, [sp, #0]
 800ab92:	2a00      	cmp	r2, #0
 800ab94:	db04      	blt.n	800aba0 <_dtoa_r+0xa10>
 800ab96:	d125      	bne.n	800abe4 <_dtoa_r+0xa54>
 800ab98:	9a06      	ldr	r2, [sp, #24]
 800ab9a:	bb1a      	cbnz	r2, 800abe4 <_dtoa_r+0xa54>
 800ab9c:	9a07      	ldr	r2, [sp, #28]
 800ab9e:	bb0a      	cbnz	r2, 800abe4 <_dtoa_r+0xa54>
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	ddec      	ble.n	800ab7e <_dtoa_r+0x9ee>
 800aba4:	2201      	movs	r2, #1
 800aba6:	9904      	ldr	r1, [sp, #16]
 800aba8:	4620      	mov	r0, r4
 800abaa:	f000 fe7f 	bl	800b8ac <__lshift>
 800abae:	4639      	mov	r1, r7
 800abb0:	9004      	str	r0, [sp, #16]
 800abb2:	f000 fecf 	bl	800b954 <__mcmp>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	dc03      	bgt.n	800abc2 <_dtoa_r+0xa32>
 800abba:	d1e0      	bne.n	800ab7e <_dtoa_r+0x9ee>
 800abbc:	f018 0f01 	tst.w	r8, #1
 800abc0:	d0dd      	beq.n	800ab7e <_dtoa_r+0x9ee>
 800abc2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800abc6:	d1d8      	bne.n	800ab7a <_dtoa_r+0x9ea>
 800abc8:	9b05      	ldr	r3, [sp, #20]
 800abca:	9a05      	ldr	r2, [sp, #20]
 800abcc:	1c5d      	adds	r5, r3, #1
 800abce:	2339      	movs	r3, #57	; 0x39
 800abd0:	7013      	strb	r3, [r2, #0]
 800abd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abd6:	2b39      	cmp	r3, #57	; 0x39
 800abd8:	f105 32ff 	add.w	r2, r5, #4294967295
 800abdc:	d04f      	beq.n	800ac7e <_dtoa_r+0xaee>
 800abde:	3301      	adds	r3, #1
 800abe0:	7013      	strb	r3, [r2, #0]
 800abe2:	e754      	b.n	800aa8e <_dtoa_r+0x8fe>
 800abe4:	9a05      	ldr	r2, [sp, #20]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f102 0501 	add.w	r5, r2, #1
 800abec:	dd06      	ble.n	800abfc <_dtoa_r+0xa6c>
 800abee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800abf2:	d0e9      	beq.n	800abc8 <_dtoa_r+0xa38>
 800abf4:	f108 0801 	add.w	r8, r8, #1
 800abf8:	9b05      	ldr	r3, [sp, #20]
 800abfa:	e7c2      	b.n	800ab82 <_dtoa_r+0x9f2>
 800abfc:	9a02      	ldr	r2, [sp, #8]
 800abfe:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ac02:	eba5 030b 	sub.w	r3, r5, fp
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d021      	beq.n	800ac4e <_dtoa_r+0xabe>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	220a      	movs	r2, #10
 800ac0e:	9904      	ldr	r1, [sp, #16]
 800ac10:	4620      	mov	r0, r4
 800ac12:	f000 fc97 	bl	800b544 <__multadd>
 800ac16:	45b1      	cmp	r9, r6
 800ac18:	9004      	str	r0, [sp, #16]
 800ac1a:	f04f 0300 	mov.w	r3, #0
 800ac1e:	f04f 020a 	mov.w	r2, #10
 800ac22:	4649      	mov	r1, r9
 800ac24:	4620      	mov	r0, r4
 800ac26:	d105      	bne.n	800ac34 <_dtoa_r+0xaa4>
 800ac28:	f000 fc8c 	bl	800b544 <__multadd>
 800ac2c:	4681      	mov	r9, r0
 800ac2e:	4606      	mov	r6, r0
 800ac30:	9505      	str	r5, [sp, #20]
 800ac32:	e776      	b.n	800ab22 <_dtoa_r+0x992>
 800ac34:	f000 fc86 	bl	800b544 <__multadd>
 800ac38:	4631      	mov	r1, r6
 800ac3a:	4681      	mov	r9, r0
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	220a      	movs	r2, #10
 800ac40:	4620      	mov	r0, r4
 800ac42:	f000 fc7f 	bl	800b544 <__multadd>
 800ac46:	4606      	mov	r6, r0
 800ac48:	e7f2      	b.n	800ac30 <_dtoa_r+0xaa0>
 800ac4a:	f04f 0900 	mov.w	r9, #0
 800ac4e:	2201      	movs	r2, #1
 800ac50:	9904      	ldr	r1, [sp, #16]
 800ac52:	4620      	mov	r0, r4
 800ac54:	f000 fe2a 	bl	800b8ac <__lshift>
 800ac58:	4639      	mov	r1, r7
 800ac5a:	9004      	str	r0, [sp, #16]
 800ac5c:	f000 fe7a 	bl	800b954 <__mcmp>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	dcb6      	bgt.n	800abd2 <_dtoa_r+0xa42>
 800ac64:	d102      	bne.n	800ac6c <_dtoa_r+0xadc>
 800ac66:	f018 0f01 	tst.w	r8, #1
 800ac6a:	d1b2      	bne.n	800abd2 <_dtoa_r+0xa42>
 800ac6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac70:	2b30      	cmp	r3, #48	; 0x30
 800ac72:	f105 32ff 	add.w	r2, r5, #4294967295
 800ac76:	f47f af0a 	bne.w	800aa8e <_dtoa_r+0x8fe>
 800ac7a:	4615      	mov	r5, r2
 800ac7c:	e7f6      	b.n	800ac6c <_dtoa_r+0xadc>
 800ac7e:	4593      	cmp	fp, r2
 800ac80:	d105      	bne.n	800ac8e <_dtoa_r+0xafe>
 800ac82:	2331      	movs	r3, #49	; 0x31
 800ac84:	f10a 0a01 	add.w	sl, sl, #1
 800ac88:	f88b 3000 	strb.w	r3, [fp]
 800ac8c:	e6ff      	b.n	800aa8e <_dtoa_r+0x8fe>
 800ac8e:	4615      	mov	r5, r2
 800ac90:	e79f      	b.n	800abd2 <_dtoa_r+0xa42>
 800ac92:	f8df b064 	ldr.w	fp, [pc, #100]	; 800acf8 <_dtoa_r+0xb68>
 800ac96:	e007      	b.n	800aca8 <_dtoa_r+0xb18>
 800ac98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac9a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800acfc <_dtoa_r+0xb6c>
 800ac9e:	b11b      	cbz	r3, 800aca8 <_dtoa_r+0xb18>
 800aca0:	f10b 0308 	add.w	r3, fp, #8
 800aca4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aca6:	6013      	str	r3, [r2, #0]
 800aca8:	4658      	mov	r0, fp
 800acaa:	b017      	add	sp, #92	; 0x5c
 800acac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb0:	9b06      	ldr	r3, [sp, #24]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	f77f ae35 	ble.w	800a922 <_dtoa_r+0x792>
 800acb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acba:	9307      	str	r3, [sp, #28]
 800acbc:	e649      	b.n	800a952 <_dtoa_r+0x7c2>
 800acbe:	9b02      	ldr	r3, [sp, #8]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	dc03      	bgt.n	800accc <_dtoa_r+0xb3c>
 800acc4:	9b06      	ldr	r3, [sp, #24]
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	f73f aecc 	bgt.w	800aa64 <_dtoa_r+0x8d4>
 800accc:	465d      	mov	r5, fp
 800acce:	4639      	mov	r1, r7
 800acd0:	9804      	ldr	r0, [sp, #16]
 800acd2:	f7ff f9d1 	bl	800a078 <quorem>
 800acd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800acda:	f805 8b01 	strb.w	r8, [r5], #1
 800acde:	9a02      	ldr	r2, [sp, #8]
 800ace0:	eba5 030b 	sub.w	r3, r5, fp
 800ace4:	429a      	cmp	r2, r3
 800ace6:	ddb0      	ble.n	800ac4a <_dtoa_r+0xaba>
 800ace8:	2300      	movs	r3, #0
 800acea:	220a      	movs	r2, #10
 800acec:	9904      	ldr	r1, [sp, #16]
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 fc28 	bl	800b544 <__multadd>
 800acf4:	9004      	str	r0, [sp, #16]
 800acf6:	e7ea      	b.n	800acce <_dtoa_r+0xb3e>
 800acf8:	0800c67c 	.word	0x0800c67c
 800acfc:	0800c6f8 	.word	0x0800c6f8

0800ad00 <rshift>:
 800ad00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad02:	6906      	ldr	r6, [r0, #16]
 800ad04:	114b      	asrs	r3, r1, #5
 800ad06:	429e      	cmp	r6, r3
 800ad08:	f100 0414 	add.w	r4, r0, #20
 800ad0c:	dd30      	ble.n	800ad70 <rshift+0x70>
 800ad0e:	f011 011f 	ands.w	r1, r1, #31
 800ad12:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ad16:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ad1a:	d108      	bne.n	800ad2e <rshift+0x2e>
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	42b2      	cmp	r2, r6
 800ad20:	460b      	mov	r3, r1
 800ad22:	d211      	bcs.n	800ad48 <rshift+0x48>
 800ad24:	f852 3b04 	ldr.w	r3, [r2], #4
 800ad28:	f841 3b04 	str.w	r3, [r1], #4
 800ad2c:	e7f7      	b.n	800ad1e <rshift+0x1e>
 800ad2e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ad32:	f1c1 0c20 	rsb	ip, r1, #32
 800ad36:	40cd      	lsrs	r5, r1
 800ad38:	3204      	adds	r2, #4
 800ad3a:	4623      	mov	r3, r4
 800ad3c:	42b2      	cmp	r2, r6
 800ad3e:	4617      	mov	r7, r2
 800ad40:	d30c      	bcc.n	800ad5c <rshift+0x5c>
 800ad42:	601d      	str	r5, [r3, #0]
 800ad44:	b105      	cbz	r5, 800ad48 <rshift+0x48>
 800ad46:	3304      	adds	r3, #4
 800ad48:	1b1a      	subs	r2, r3, r4
 800ad4a:	42a3      	cmp	r3, r4
 800ad4c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ad50:	bf08      	it	eq
 800ad52:	2300      	moveq	r3, #0
 800ad54:	6102      	str	r2, [r0, #16]
 800ad56:	bf08      	it	eq
 800ad58:	6143      	streq	r3, [r0, #20]
 800ad5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad5c:	683f      	ldr	r7, [r7, #0]
 800ad5e:	fa07 f70c 	lsl.w	r7, r7, ip
 800ad62:	433d      	orrs	r5, r7
 800ad64:	f843 5b04 	str.w	r5, [r3], #4
 800ad68:	f852 5b04 	ldr.w	r5, [r2], #4
 800ad6c:	40cd      	lsrs	r5, r1
 800ad6e:	e7e5      	b.n	800ad3c <rshift+0x3c>
 800ad70:	4623      	mov	r3, r4
 800ad72:	e7e9      	b.n	800ad48 <rshift+0x48>

0800ad74 <__hexdig_fun>:
 800ad74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ad78:	2b09      	cmp	r3, #9
 800ad7a:	d802      	bhi.n	800ad82 <__hexdig_fun+0xe>
 800ad7c:	3820      	subs	r0, #32
 800ad7e:	b2c0      	uxtb	r0, r0
 800ad80:	4770      	bx	lr
 800ad82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ad86:	2b05      	cmp	r3, #5
 800ad88:	d801      	bhi.n	800ad8e <__hexdig_fun+0x1a>
 800ad8a:	3847      	subs	r0, #71	; 0x47
 800ad8c:	e7f7      	b.n	800ad7e <__hexdig_fun+0xa>
 800ad8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ad92:	2b05      	cmp	r3, #5
 800ad94:	d801      	bhi.n	800ad9a <__hexdig_fun+0x26>
 800ad96:	3827      	subs	r0, #39	; 0x27
 800ad98:	e7f1      	b.n	800ad7e <__hexdig_fun+0xa>
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	4770      	bx	lr

0800ad9e <__gethex>:
 800ad9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada2:	b08b      	sub	sp, #44	; 0x2c
 800ada4:	468a      	mov	sl, r1
 800ada6:	9002      	str	r0, [sp, #8]
 800ada8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800adaa:	9306      	str	r3, [sp, #24]
 800adac:	4690      	mov	r8, r2
 800adae:	f000 fad0 	bl	800b352 <__localeconv_l>
 800adb2:	6803      	ldr	r3, [r0, #0]
 800adb4:	9303      	str	r3, [sp, #12]
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7f5 fa32 	bl	8000220 <strlen>
 800adbc:	9b03      	ldr	r3, [sp, #12]
 800adbe:	9001      	str	r0, [sp, #4]
 800adc0:	4403      	add	r3, r0
 800adc2:	f04f 0b00 	mov.w	fp, #0
 800adc6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800adca:	9307      	str	r3, [sp, #28]
 800adcc:	f8da 3000 	ldr.w	r3, [sl]
 800add0:	3302      	adds	r3, #2
 800add2:	461f      	mov	r7, r3
 800add4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800add8:	2830      	cmp	r0, #48	; 0x30
 800adda:	d06c      	beq.n	800aeb6 <__gethex+0x118>
 800addc:	f7ff ffca 	bl	800ad74 <__hexdig_fun>
 800ade0:	4604      	mov	r4, r0
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d16a      	bne.n	800aebc <__gethex+0x11e>
 800ade6:	9a01      	ldr	r2, [sp, #4]
 800ade8:	9903      	ldr	r1, [sp, #12]
 800adea:	4638      	mov	r0, r7
 800adec:	f001 fa10 	bl	800c210 <strncmp>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	d166      	bne.n	800aec2 <__gethex+0x124>
 800adf4:	9b01      	ldr	r3, [sp, #4]
 800adf6:	5cf8      	ldrb	r0, [r7, r3]
 800adf8:	18fe      	adds	r6, r7, r3
 800adfa:	f7ff ffbb 	bl	800ad74 <__hexdig_fun>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d062      	beq.n	800aec8 <__gethex+0x12a>
 800ae02:	4633      	mov	r3, r6
 800ae04:	7818      	ldrb	r0, [r3, #0]
 800ae06:	2830      	cmp	r0, #48	; 0x30
 800ae08:	461f      	mov	r7, r3
 800ae0a:	f103 0301 	add.w	r3, r3, #1
 800ae0e:	d0f9      	beq.n	800ae04 <__gethex+0x66>
 800ae10:	f7ff ffb0 	bl	800ad74 <__hexdig_fun>
 800ae14:	fab0 f580 	clz	r5, r0
 800ae18:	096d      	lsrs	r5, r5, #5
 800ae1a:	4634      	mov	r4, r6
 800ae1c:	f04f 0b01 	mov.w	fp, #1
 800ae20:	463a      	mov	r2, r7
 800ae22:	4616      	mov	r6, r2
 800ae24:	3201      	adds	r2, #1
 800ae26:	7830      	ldrb	r0, [r6, #0]
 800ae28:	f7ff ffa4 	bl	800ad74 <__hexdig_fun>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d1f8      	bne.n	800ae22 <__gethex+0x84>
 800ae30:	9a01      	ldr	r2, [sp, #4]
 800ae32:	9903      	ldr	r1, [sp, #12]
 800ae34:	4630      	mov	r0, r6
 800ae36:	f001 f9eb 	bl	800c210 <strncmp>
 800ae3a:	b950      	cbnz	r0, 800ae52 <__gethex+0xb4>
 800ae3c:	b954      	cbnz	r4, 800ae54 <__gethex+0xb6>
 800ae3e:	9b01      	ldr	r3, [sp, #4]
 800ae40:	18f4      	adds	r4, r6, r3
 800ae42:	4622      	mov	r2, r4
 800ae44:	4616      	mov	r6, r2
 800ae46:	3201      	adds	r2, #1
 800ae48:	7830      	ldrb	r0, [r6, #0]
 800ae4a:	f7ff ff93 	bl	800ad74 <__hexdig_fun>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	d1f8      	bne.n	800ae44 <__gethex+0xa6>
 800ae52:	b10c      	cbz	r4, 800ae58 <__gethex+0xba>
 800ae54:	1ba4      	subs	r4, r4, r6
 800ae56:	00a4      	lsls	r4, r4, #2
 800ae58:	7833      	ldrb	r3, [r6, #0]
 800ae5a:	2b50      	cmp	r3, #80	; 0x50
 800ae5c:	d001      	beq.n	800ae62 <__gethex+0xc4>
 800ae5e:	2b70      	cmp	r3, #112	; 0x70
 800ae60:	d140      	bne.n	800aee4 <__gethex+0x146>
 800ae62:	7873      	ldrb	r3, [r6, #1]
 800ae64:	2b2b      	cmp	r3, #43	; 0x2b
 800ae66:	d031      	beq.n	800aecc <__gethex+0x12e>
 800ae68:	2b2d      	cmp	r3, #45	; 0x2d
 800ae6a:	d033      	beq.n	800aed4 <__gethex+0x136>
 800ae6c:	1c71      	adds	r1, r6, #1
 800ae6e:	f04f 0900 	mov.w	r9, #0
 800ae72:	7808      	ldrb	r0, [r1, #0]
 800ae74:	f7ff ff7e 	bl	800ad74 <__hexdig_fun>
 800ae78:	1e43      	subs	r3, r0, #1
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	2b18      	cmp	r3, #24
 800ae7e:	d831      	bhi.n	800aee4 <__gethex+0x146>
 800ae80:	f1a0 0210 	sub.w	r2, r0, #16
 800ae84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ae88:	f7ff ff74 	bl	800ad74 <__hexdig_fun>
 800ae8c:	1e43      	subs	r3, r0, #1
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	2b18      	cmp	r3, #24
 800ae92:	d922      	bls.n	800aeda <__gethex+0x13c>
 800ae94:	f1b9 0f00 	cmp.w	r9, #0
 800ae98:	d000      	beq.n	800ae9c <__gethex+0xfe>
 800ae9a:	4252      	negs	r2, r2
 800ae9c:	4414      	add	r4, r2
 800ae9e:	f8ca 1000 	str.w	r1, [sl]
 800aea2:	b30d      	cbz	r5, 800aee8 <__gethex+0x14a>
 800aea4:	f1bb 0f00 	cmp.w	fp, #0
 800aea8:	bf0c      	ite	eq
 800aeaa:	2706      	moveq	r7, #6
 800aeac:	2700      	movne	r7, #0
 800aeae:	4638      	mov	r0, r7
 800aeb0:	b00b      	add	sp, #44	; 0x2c
 800aeb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb6:	f10b 0b01 	add.w	fp, fp, #1
 800aeba:	e78a      	b.n	800add2 <__gethex+0x34>
 800aebc:	2500      	movs	r5, #0
 800aebe:	462c      	mov	r4, r5
 800aec0:	e7ae      	b.n	800ae20 <__gethex+0x82>
 800aec2:	463e      	mov	r6, r7
 800aec4:	2501      	movs	r5, #1
 800aec6:	e7c7      	b.n	800ae58 <__gethex+0xba>
 800aec8:	4604      	mov	r4, r0
 800aeca:	e7fb      	b.n	800aec4 <__gethex+0x126>
 800aecc:	f04f 0900 	mov.w	r9, #0
 800aed0:	1cb1      	adds	r1, r6, #2
 800aed2:	e7ce      	b.n	800ae72 <__gethex+0xd4>
 800aed4:	f04f 0901 	mov.w	r9, #1
 800aed8:	e7fa      	b.n	800aed0 <__gethex+0x132>
 800aeda:	230a      	movs	r3, #10
 800aedc:	fb03 0202 	mla	r2, r3, r2, r0
 800aee0:	3a10      	subs	r2, #16
 800aee2:	e7cf      	b.n	800ae84 <__gethex+0xe6>
 800aee4:	4631      	mov	r1, r6
 800aee6:	e7da      	b.n	800ae9e <__gethex+0x100>
 800aee8:	1bf3      	subs	r3, r6, r7
 800aeea:	3b01      	subs	r3, #1
 800aeec:	4629      	mov	r1, r5
 800aeee:	2b07      	cmp	r3, #7
 800aef0:	dc49      	bgt.n	800af86 <__gethex+0x1e8>
 800aef2:	9802      	ldr	r0, [sp, #8]
 800aef4:	f000 fadb 	bl	800b4ae <_Balloc>
 800aef8:	9b01      	ldr	r3, [sp, #4]
 800aefa:	f100 0914 	add.w	r9, r0, #20
 800aefe:	f04f 0b00 	mov.w	fp, #0
 800af02:	f1c3 0301 	rsb	r3, r3, #1
 800af06:	4605      	mov	r5, r0
 800af08:	f8cd 9010 	str.w	r9, [sp, #16]
 800af0c:	46da      	mov	sl, fp
 800af0e:	9308      	str	r3, [sp, #32]
 800af10:	42b7      	cmp	r7, r6
 800af12:	d33b      	bcc.n	800af8c <__gethex+0x1ee>
 800af14:	9804      	ldr	r0, [sp, #16]
 800af16:	f840 ab04 	str.w	sl, [r0], #4
 800af1a:	eba0 0009 	sub.w	r0, r0, r9
 800af1e:	1080      	asrs	r0, r0, #2
 800af20:	6128      	str	r0, [r5, #16]
 800af22:	0147      	lsls	r7, r0, #5
 800af24:	4650      	mov	r0, sl
 800af26:	f000 fb86 	bl	800b636 <__hi0bits>
 800af2a:	f8d8 6000 	ldr.w	r6, [r8]
 800af2e:	1a3f      	subs	r7, r7, r0
 800af30:	42b7      	cmp	r7, r6
 800af32:	dd64      	ble.n	800affe <__gethex+0x260>
 800af34:	1bbf      	subs	r7, r7, r6
 800af36:	4639      	mov	r1, r7
 800af38:	4628      	mov	r0, r5
 800af3a:	f000 fe95 	bl	800bc68 <__any_on>
 800af3e:	4682      	mov	sl, r0
 800af40:	b178      	cbz	r0, 800af62 <__gethex+0x1c4>
 800af42:	1e7b      	subs	r3, r7, #1
 800af44:	1159      	asrs	r1, r3, #5
 800af46:	f003 021f 	and.w	r2, r3, #31
 800af4a:	f04f 0a01 	mov.w	sl, #1
 800af4e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800af52:	fa0a f202 	lsl.w	r2, sl, r2
 800af56:	420a      	tst	r2, r1
 800af58:	d003      	beq.n	800af62 <__gethex+0x1c4>
 800af5a:	4553      	cmp	r3, sl
 800af5c:	dc46      	bgt.n	800afec <__gethex+0x24e>
 800af5e:	f04f 0a02 	mov.w	sl, #2
 800af62:	4639      	mov	r1, r7
 800af64:	4628      	mov	r0, r5
 800af66:	f7ff fecb 	bl	800ad00 <rshift>
 800af6a:	443c      	add	r4, r7
 800af6c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af70:	42a3      	cmp	r3, r4
 800af72:	da52      	bge.n	800b01a <__gethex+0x27c>
 800af74:	4629      	mov	r1, r5
 800af76:	9802      	ldr	r0, [sp, #8]
 800af78:	f000 facd 	bl	800b516 <_Bfree>
 800af7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af7e:	2300      	movs	r3, #0
 800af80:	6013      	str	r3, [r2, #0]
 800af82:	27a3      	movs	r7, #163	; 0xa3
 800af84:	e793      	b.n	800aeae <__gethex+0x110>
 800af86:	3101      	adds	r1, #1
 800af88:	105b      	asrs	r3, r3, #1
 800af8a:	e7b0      	b.n	800aeee <__gethex+0x150>
 800af8c:	1e73      	subs	r3, r6, #1
 800af8e:	9305      	str	r3, [sp, #20]
 800af90:	9a07      	ldr	r2, [sp, #28]
 800af92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af96:	4293      	cmp	r3, r2
 800af98:	d018      	beq.n	800afcc <__gethex+0x22e>
 800af9a:	f1bb 0f20 	cmp.w	fp, #32
 800af9e:	d107      	bne.n	800afb0 <__gethex+0x212>
 800afa0:	9b04      	ldr	r3, [sp, #16]
 800afa2:	f8c3 a000 	str.w	sl, [r3]
 800afa6:	3304      	adds	r3, #4
 800afa8:	f04f 0a00 	mov.w	sl, #0
 800afac:	9304      	str	r3, [sp, #16]
 800afae:	46d3      	mov	fp, sl
 800afb0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800afb4:	f7ff fede 	bl	800ad74 <__hexdig_fun>
 800afb8:	f000 000f 	and.w	r0, r0, #15
 800afbc:	fa00 f00b 	lsl.w	r0, r0, fp
 800afc0:	ea4a 0a00 	orr.w	sl, sl, r0
 800afc4:	f10b 0b04 	add.w	fp, fp, #4
 800afc8:	9b05      	ldr	r3, [sp, #20]
 800afca:	e00d      	b.n	800afe8 <__gethex+0x24a>
 800afcc:	9b05      	ldr	r3, [sp, #20]
 800afce:	9a08      	ldr	r2, [sp, #32]
 800afd0:	4413      	add	r3, r2
 800afd2:	42bb      	cmp	r3, r7
 800afd4:	d3e1      	bcc.n	800af9a <__gethex+0x1fc>
 800afd6:	4618      	mov	r0, r3
 800afd8:	9a01      	ldr	r2, [sp, #4]
 800afda:	9903      	ldr	r1, [sp, #12]
 800afdc:	9309      	str	r3, [sp, #36]	; 0x24
 800afde:	f001 f917 	bl	800c210 <strncmp>
 800afe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d1d8      	bne.n	800af9a <__gethex+0x1fc>
 800afe8:	461e      	mov	r6, r3
 800afea:	e791      	b.n	800af10 <__gethex+0x172>
 800afec:	1eb9      	subs	r1, r7, #2
 800afee:	4628      	mov	r0, r5
 800aff0:	f000 fe3a 	bl	800bc68 <__any_on>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	d0b2      	beq.n	800af5e <__gethex+0x1c0>
 800aff8:	f04f 0a03 	mov.w	sl, #3
 800affc:	e7b1      	b.n	800af62 <__gethex+0x1c4>
 800affe:	da09      	bge.n	800b014 <__gethex+0x276>
 800b000:	1bf7      	subs	r7, r6, r7
 800b002:	4629      	mov	r1, r5
 800b004:	463a      	mov	r2, r7
 800b006:	9802      	ldr	r0, [sp, #8]
 800b008:	f000 fc50 	bl	800b8ac <__lshift>
 800b00c:	1be4      	subs	r4, r4, r7
 800b00e:	4605      	mov	r5, r0
 800b010:	f100 0914 	add.w	r9, r0, #20
 800b014:	f04f 0a00 	mov.w	sl, #0
 800b018:	e7a8      	b.n	800af6c <__gethex+0x1ce>
 800b01a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b01e:	42a0      	cmp	r0, r4
 800b020:	dd6a      	ble.n	800b0f8 <__gethex+0x35a>
 800b022:	1b04      	subs	r4, r0, r4
 800b024:	42a6      	cmp	r6, r4
 800b026:	dc2e      	bgt.n	800b086 <__gethex+0x2e8>
 800b028:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d022      	beq.n	800b076 <__gethex+0x2d8>
 800b030:	2b03      	cmp	r3, #3
 800b032:	d024      	beq.n	800b07e <__gethex+0x2e0>
 800b034:	2b01      	cmp	r3, #1
 800b036:	d115      	bne.n	800b064 <__gethex+0x2c6>
 800b038:	42a6      	cmp	r6, r4
 800b03a:	d113      	bne.n	800b064 <__gethex+0x2c6>
 800b03c:	2e01      	cmp	r6, #1
 800b03e:	dc0b      	bgt.n	800b058 <__gethex+0x2ba>
 800b040:	9a06      	ldr	r2, [sp, #24]
 800b042:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b046:	6013      	str	r3, [r2, #0]
 800b048:	2301      	movs	r3, #1
 800b04a:	612b      	str	r3, [r5, #16]
 800b04c:	f8c9 3000 	str.w	r3, [r9]
 800b050:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b052:	2762      	movs	r7, #98	; 0x62
 800b054:	601d      	str	r5, [r3, #0]
 800b056:	e72a      	b.n	800aeae <__gethex+0x110>
 800b058:	1e71      	subs	r1, r6, #1
 800b05a:	4628      	mov	r0, r5
 800b05c:	f000 fe04 	bl	800bc68 <__any_on>
 800b060:	2800      	cmp	r0, #0
 800b062:	d1ed      	bne.n	800b040 <__gethex+0x2a2>
 800b064:	4629      	mov	r1, r5
 800b066:	9802      	ldr	r0, [sp, #8]
 800b068:	f000 fa55 	bl	800b516 <_Bfree>
 800b06c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b06e:	2300      	movs	r3, #0
 800b070:	6013      	str	r3, [r2, #0]
 800b072:	2750      	movs	r7, #80	; 0x50
 800b074:	e71b      	b.n	800aeae <__gethex+0x110>
 800b076:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d0e1      	beq.n	800b040 <__gethex+0x2a2>
 800b07c:	e7f2      	b.n	800b064 <__gethex+0x2c6>
 800b07e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1dd      	bne.n	800b040 <__gethex+0x2a2>
 800b084:	e7ee      	b.n	800b064 <__gethex+0x2c6>
 800b086:	1e67      	subs	r7, r4, #1
 800b088:	f1ba 0f00 	cmp.w	sl, #0
 800b08c:	d131      	bne.n	800b0f2 <__gethex+0x354>
 800b08e:	b127      	cbz	r7, 800b09a <__gethex+0x2fc>
 800b090:	4639      	mov	r1, r7
 800b092:	4628      	mov	r0, r5
 800b094:	f000 fde8 	bl	800bc68 <__any_on>
 800b098:	4682      	mov	sl, r0
 800b09a:	117a      	asrs	r2, r7, #5
 800b09c:	2301      	movs	r3, #1
 800b09e:	f007 071f 	and.w	r7, r7, #31
 800b0a2:	fa03 f707 	lsl.w	r7, r3, r7
 800b0a6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	421f      	tst	r7, r3
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	bf18      	it	ne
 800b0b2:	f04a 0a02 	orrne.w	sl, sl, #2
 800b0b6:	1b36      	subs	r6, r6, r4
 800b0b8:	f7ff fe22 	bl	800ad00 <rshift>
 800b0bc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b0c0:	2702      	movs	r7, #2
 800b0c2:	f1ba 0f00 	cmp.w	sl, #0
 800b0c6:	d048      	beq.n	800b15a <__gethex+0x3bc>
 800b0c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d015      	beq.n	800b0fc <__gethex+0x35e>
 800b0d0:	2b03      	cmp	r3, #3
 800b0d2:	d017      	beq.n	800b104 <__gethex+0x366>
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d109      	bne.n	800b0ec <__gethex+0x34e>
 800b0d8:	f01a 0f02 	tst.w	sl, #2
 800b0dc:	d006      	beq.n	800b0ec <__gethex+0x34e>
 800b0de:	f8d9 3000 	ldr.w	r3, [r9]
 800b0e2:	ea4a 0a03 	orr.w	sl, sl, r3
 800b0e6:	f01a 0f01 	tst.w	sl, #1
 800b0ea:	d10e      	bne.n	800b10a <__gethex+0x36c>
 800b0ec:	f047 0710 	orr.w	r7, r7, #16
 800b0f0:	e033      	b.n	800b15a <__gethex+0x3bc>
 800b0f2:	f04f 0a01 	mov.w	sl, #1
 800b0f6:	e7d0      	b.n	800b09a <__gethex+0x2fc>
 800b0f8:	2701      	movs	r7, #1
 800b0fa:	e7e2      	b.n	800b0c2 <__gethex+0x324>
 800b0fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0fe:	f1c3 0301 	rsb	r3, r3, #1
 800b102:	9315      	str	r3, [sp, #84]	; 0x54
 800b104:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b106:	2b00      	cmp	r3, #0
 800b108:	d0f0      	beq.n	800b0ec <__gethex+0x34e>
 800b10a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b10e:	f105 0314 	add.w	r3, r5, #20
 800b112:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b116:	eb03 010a 	add.w	r1, r3, sl
 800b11a:	f04f 0c00 	mov.w	ip, #0
 800b11e:	4618      	mov	r0, r3
 800b120:	f853 2b04 	ldr.w	r2, [r3], #4
 800b124:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b128:	d01c      	beq.n	800b164 <__gethex+0x3c6>
 800b12a:	3201      	adds	r2, #1
 800b12c:	6002      	str	r2, [r0, #0]
 800b12e:	2f02      	cmp	r7, #2
 800b130:	f105 0314 	add.w	r3, r5, #20
 800b134:	d138      	bne.n	800b1a8 <__gethex+0x40a>
 800b136:	f8d8 2000 	ldr.w	r2, [r8]
 800b13a:	3a01      	subs	r2, #1
 800b13c:	42b2      	cmp	r2, r6
 800b13e:	d10a      	bne.n	800b156 <__gethex+0x3b8>
 800b140:	1171      	asrs	r1, r6, #5
 800b142:	2201      	movs	r2, #1
 800b144:	f006 061f 	and.w	r6, r6, #31
 800b148:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b14c:	fa02 f606 	lsl.w	r6, r2, r6
 800b150:	421e      	tst	r6, r3
 800b152:	bf18      	it	ne
 800b154:	4617      	movne	r7, r2
 800b156:	f047 0720 	orr.w	r7, r7, #32
 800b15a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b15c:	601d      	str	r5, [r3, #0]
 800b15e:	9b06      	ldr	r3, [sp, #24]
 800b160:	601c      	str	r4, [r3, #0]
 800b162:	e6a4      	b.n	800aeae <__gethex+0x110>
 800b164:	4299      	cmp	r1, r3
 800b166:	f843 cc04 	str.w	ip, [r3, #-4]
 800b16a:	d8d8      	bhi.n	800b11e <__gethex+0x380>
 800b16c:	68ab      	ldr	r3, [r5, #8]
 800b16e:	4599      	cmp	r9, r3
 800b170:	db12      	blt.n	800b198 <__gethex+0x3fa>
 800b172:	6869      	ldr	r1, [r5, #4]
 800b174:	9802      	ldr	r0, [sp, #8]
 800b176:	3101      	adds	r1, #1
 800b178:	f000 f999 	bl	800b4ae <_Balloc>
 800b17c:	692a      	ldr	r2, [r5, #16]
 800b17e:	3202      	adds	r2, #2
 800b180:	f105 010c 	add.w	r1, r5, #12
 800b184:	4683      	mov	fp, r0
 800b186:	0092      	lsls	r2, r2, #2
 800b188:	300c      	adds	r0, #12
 800b18a:	f000 f983 	bl	800b494 <memcpy>
 800b18e:	4629      	mov	r1, r5
 800b190:	9802      	ldr	r0, [sp, #8]
 800b192:	f000 f9c0 	bl	800b516 <_Bfree>
 800b196:	465d      	mov	r5, fp
 800b198:	692b      	ldr	r3, [r5, #16]
 800b19a:	1c5a      	adds	r2, r3, #1
 800b19c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b1a0:	612a      	str	r2, [r5, #16]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	615a      	str	r2, [r3, #20]
 800b1a6:	e7c2      	b.n	800b12e <__gethex+0x390>
 800b1a8:	692a      	ldr	r2, [r5, #16]
 800b1aa:	454a      	cmp	r2, r9
 800b1ac:	dd0b      	ble.n	800b1c6 <__gethex+0x428>
 800b1ae:	2101      	movs	r1, #1
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	f7ff fda5 	bl	800ad00 <rshift>
 800b1b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1ba:	3401      	adds	r4, #1
 800b1bc:	42a3      	cmp	r3, r4
 800b1be:	f6ff aed9 	blt.w	800af74 <__gethex+0x1d6>
 800b1c2:	2701      	movs	r7, #1
 800b1c4:	e7c7      	b.n	800b156 <__gethex+0x3b8>
 800b1c6:	f016 061f 	ands.w	r6, r6, #31
 800b1ca:	d0fa      	beq.n	800b1c2 <__gethex+0x424>
 800b1cc:	449a      	add	sl, r3
 800b1ce:	f1c6 0620 	rsb	r6, r6, #32
 800b1d2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b1d6:	f000 fa2e 	bl	800b636 <__hi0bits>
 800b1da:	42b0      	cmp	r0, r6
 800b1dc:	dbe7      	blt.n	800b1ae <__gethex+0x410>
 800b1de:	e7f0      	b.n	800b1c2 <__gethex+0x424>

0800b1e0 <L_shift>:
 800b1e0:	f1c2 0208 	rsb	r2, r2, #8
 800b1e4:	0092      	lsls	r2, r2, #2
 800b1e6:	b570      	push	{r4, r5, r6, lr}
 800b1e8:	f1c2 0620 	rsb	r6, r2, #32
 800b1ec:	6843      	ldr	r3, [r0, #4]
 800b1ee:	6804      	ldr	r4, [r0, #0]
 800b1f0:	fa03 f506 	lsl.w	r5, r3, r6
 800b1f4:	432c      	orrs	r4, r5
 800b1f6:	40d3      	lsrs	r3, r2
 800b1f8:	6004      	str	r4, [r0, #0]
 800b1fa:	f840 3f04 	str.w	r3, [r0, #4]!
 800b1fe:	4288      	cmp	r0, r1
 800b200:	d3f4      	bcc.n	800b1ec <L_shift+0xc>
 800b202:	bd70      	pop	{r4, r5, r6, pc}

0800b204 <__match>:
 800b204:	b530      	push	{r4, r5, lr}
 800b206:	6803      	ldr	r3, [r0, #0]
 800b208:	3301      	adds	r3, #1
 800b20a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b20e:	b914      	cbnz	r4, 800b216 <__match+0x12>
 800b210:	6003      	str	r3, [r0, #0]
 800b212:	2001      	movs	r0, #1
 800b214:	bd30      	pop	{r4, r5, pc}
 800b216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b21a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b21e:	2d19      	cmp	r5, #25
 800b220:	bf98      	it	ls
 800b222:	3220      	addls	r2, #32
 800b224:	42a2      	cmp	r2, r4
 800b226:	d0f0      	beq.n	800b20a <__match+0x6>
 800b228:	2000      	movs	r0, #0
 800b22a:	e7f3      	b.n	800b214 <__match+0x10>

0800b22c <__hexnan>:
 800b22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b230:	680b      	ldr	r3, [r1, #0]
 800b232:	6801      	ldr	r1, [r0, #0]
 800b234:	115f      	asrs	r7, r3, #5
 800b236:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b23a:	f013 031f 	ands.w	r3, r3, #31
 800b23e:	b087      	sub	sp, #28
 800b240:	bf18      	it	ne
 800b242:	3704      	addne	r7, #4
 800b244:	2500      	movs	r5, #0
 800b246:	1f3e      	subs	r6, r7, #4
 800b248:	4682      	mov	sl, r0
 800b24a:	4690      	mov	r8, r2
 800b24c:	9301      	str	r3, [sp, #4]
 800b24e:	f847 5c04 	str.w	r5, [r7, #-4]
 800b252:	46b1      	mov	r9, r6
 800b254:	4634      	mov	r4, r6
 800b256:	9502      	str	r5, [sp, #8]
 800b258:	46ab      	mov	fp, r5
 800b25a:	784a      	ldrb	r2, [r1, #1]
 800b25c:	1c4b      	adds	r3, r1, #1
 800b25e:	9303      	str	r3, [sp, #12]
 800b260:	b342      	cbz	r2, 800b2b4 <__hexnan+0x88>
 800b262:	4610      	mov	r0, r2
 800b264:	9105      	str	r1, [sp, #20]
 800b266:	9204      	str	r2, [sp, #16]
 800b268:	f7ff fd84 	bl	800ad74 <__hexdig_fun>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d143      	bne.n	800b2f8 <__hexnan+0xcc>
 800b270:	9a04      	ldr	r2, [sp, #16]
 800b272:	9905      	ldr	r1, [sp, #20]
 800b274:	2a20      	cmp	r2, #32
 800b276:	d818      	bhi.n	800b2aa <__hexnan+0x7e>
 800b278:	9b02      	ldr	r3, [sp, #8]
 800b27a:	459b      	cmp	fp, r3
 800b27c:	dd13      	ble.n	800b2a6 <__hexnan+0x7a>
 800b27e:	454c      	cmp	r4, r9
 800b280:	d206      	bcs.n	800b290 <__hexnan+0x64>
 800b282:	2d07      	cmp	r5, #7
 800b284:	dc04      	bgt.n	800b290 <__hexnan+0x64>
 800b286:	462a      	mov	r2, r5
 800b288:	4649      	mov	r1, r9
 800b28a:	4620      	mov	r0, r4
 800b28c:	f7ff ffa8 	bl	800b1e0 <L_shift>
 800b290:	4544      	cmp	r4, r8
 800b292:	d944      	bls.n	800b31e <__hexnan+0xf2>
 800b294:	2300      	movs	r3, #0
 800b296:	f1a4 0904 	sub.w	r9, r4, #4
 800b29a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b29e:	f8cd b008 	str.w	fp, [sp, #8]
 800b2a2:	464c      	mov	r4, r9
 800b2a4:	461d      	mov	r5, r3
 800b2a6:	9903      	ldr	r1, [sp, #12]
 800b2a8:	e7d7      	b.n	800b25a <__hexnan+0x2e>
 800b2aa:	2a29      	cmp	r2, #41	; 0x29
 800b2ac:	d14a      	bne.n	800b344 <__hexnan+0x118>
 800b2ae:	3102      	adds	r1, #2
 800b2b0:	f8ca 1000 	str.w	r1, [sl]
 800b2b4:	f1bb 0f00 	cmp.w	fp, #0
 800b2b8:	d044      	beq.n	800b344 <__hexnan+0x118>
 800b2ba:	454c      	cmp	r4, r9
 800b2bc:	d206      	bcs.n	800b2cc <__hexnan+0xa0>
 800b2be:	2d07      	cmp	r5, #7
 800b2c0:	dc04      	bgt.n	800b2cc <__hexnan+0xa0>
 800b2c2:	462a      	mov	r2, r5
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f7ff ff8a 	bl	800b1e0 <L_shift>
 800b2cc:	4544      	cmp	r4, r8
 800b2ce:	d928      	bls.n	800b322 <__hexnan+0xf6>
 800b2d0:	4643      	mov	r3, r8
 800b2d2:	f854 2b04 	ldr.w	r2, [r4], #4
 800b2d6:	f843 2b04 	str.w	r2, [r3], #4
 800b2da:	42a6      	cmp	r6, r4
 800b2dc:	d2f9      	bcs.n	800b2d2 <__hexnan+0xa6>
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f843 2b04 	str.w	r2, [r3], #4
 800b2e4:	429e      	cmp	r6, r3
 800b2e6:	d2fb      	bcs.n	800b2e0 <__hexnan+0xb4>
 800b2e8:	6833      	ldr	r3, [r6, #0]
 800b2ea:	b91b      	cbnz	r3, 800b2f4 <__hexnan+0xc8>
 800b2ec:	4546      	cmp	r6, r8
 800b2ee:	d127      	bne.n	800b340 <__hexnan+0x114>
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	6033      	str	r3, [r6, #0]
 800b2f4:	2005      	movs	r0, #5
 800b2f6:	e026      	b.n	800b346 <__hexnan+0x11a>
 800b2f8:	3501      	adds	r5, #1
 800b2fa:	2d08      	cmp	r5, #8
 800b2fc:	f10b 0b01 	add.w	fp, fp, #1
 800b300:	dd06      	ble.n	800b310 <__hexnan+0xe4>
 800b302:	4544      	cmp	r4, r8
 800b304:	d9cf      	bls.n	800b2a6 <__hexnan+0x7a>
 800b306:	2300      	movs	r3, #0
 800b308:	f844 3c04 	str.w	r3, [r4, #-4]
 800b30c:	2501      	movs	r5, #1
 800b30e:	3c04      	subs	r4, #4
 800b310:	6822      	ldr	r2, [r4, #0]
 800b312:	f000 000f 	and.w	r0, r0, #15
 800b316:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b31a:	6020      	str	r0, [r4, #0]
 800b31c:	e7c3      	b.n	800b2a6 <__hexnan+0x7a>
 800b31e:	2508      	movs	r5, #8
 800b320:	e7c1      	b.n	800b2a6 <__hexnan+0x7a>
 800b322:	9b01      	ldr	r3, [sp, #4]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d0df      	beq.n	800b2e8 <__hexnan+0xbc>
 800b328:	f04f 32ff 	mov.w	r2, #4294967295
 800b32c:	f1c3 0320 	rsb	r3, r3, #32
 800b330:	fa22 f303 	lsr.w	r3, r2, r3
 800b334:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b338:	401a      	ands	r2, r3
 800b33a:	f847 2c04 	str.w	r2, [r7, #-4]
 800b33e:	e7d3      	b.n	800b2e8 <__hexnan+0xbc>
 800b340:	3e04      	subs	r6, #4
 800b342:	e7d1      	b.n	800b2e8 <__hexnan+0xbc>
 800b344:	2004      	movs	r0, #4
 800b346:	b007      	add	sp, #28
 800b348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b34c <__locale_ctype_ptr_l>:
 800b34c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b350:	4770      	bx	lr

0800b352 <__localeconv_l>:
 800b352:	30f0      	adds	r0, #240	; 0xf0
 800b354:	4770      	bx	lr
	...

0800b358 <_localeconv_r>:
 800b358:	4b04      	ldr	r3, [pc, #16]	; (800b36c <_localeconv_r+0x14>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6a18      	ldr	r0, [r3, #32]
 800b35e:	4b04      	ldr	r3, [pc, #16]	; (800b370 <_localeconv_r+0x18>)
 800b360:	2800      	cmp	r0, #0
 800b362:	bf08      	it	eq
 800b364:	4618      	moveq	r0, r3
 800b366:	30f0      	adds	r0, #240	; 0xf0
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	20000040 	.word	0x20000040
 800b370:	200000a4 	.word	0x200000a4

0800b374 <_lseek_r>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	4c07      	ldr	r4, [pc, #28]	; (800b394 <_lseek_r+0x20>)
 800b378:	4605      	mov	r5, r0
 800b37a:	4608      	mov	r0, r1
 800b37c:	4611      	mov	r1, r2
 800b37e:	2200      	movs	r2, #0
 800b380:	6022      	str	r2, [r4, #0]
 800b382:	461a      	mov	r2, r3
 800b384:	f7f7 fc5b 	bl	8002c3e <_lseek>
 800b388:	1c43      	adds	r3, r0, #1
 800b38a:	d102      	bne.n	800b392 <_lseek_r+0x1e>
 800b38c:	6823      	ldr	r3, [r4, #0]
 800b38e:	b103      	cbz	r3, 800b392 <_lseek_r+0x1e>
 800b390:	602b      	str	r3, [r5, #0]
 800b392:	bd38      	pop	{r3, r4, r5, pc}
 800b394:	20000888 	.word	0x20000888

0800b398 <__swhatbuf_r>:
 800b398:	b570      	push	{r4, r5, r6, lr}
 800b39a:	460e      	mov	r6, r1
 800b39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a0:	2900      	cmp	r1, #0
 800b3a2:	b096      	sub	sp, #88	; 0x58
 800b3a4:	4614      	mov	r4, r2
 800b3a6:	461d      	mov	r5, r3
 800b3a8:	da07      	bge.n	800b3ba <__swhatbuf_r+0x22>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	602b      	str	r3, [r5, #0]
 800b3ae:	89b3      	ldrh	r3, [r6, #12]
 800b3b0:	061a      	lsls	r2, r3, #24
 800b3b2:	d410      	bmi.n	800b3d6 <__swhatbuf_r+0x3e>
 800b3b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3b8:	e00e      	b.n	800b3d8 <__swhatbuf_r+0x40>
 800b3ba:	466a      	mov	r2, sp
 800b3bc:	f001 f808 	bl	800c3d0 <_fstat_r>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	dbf2      	blt.n	800b3aa <__swhatbuf_r+0x12>
 800b3c4:	9a01      	ldr	r2, [sp, #4]
 800b3c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3ce:	425a      	negs	r2, r3
 800b3d0:	415a      	adcs	r2, r3
 800b3d2:	602a      	str	r2, [r5, #0]
 800b3d4:	e7ee      	b.n	800b3b4 <__swhatbuf_r+0x1c>
 800b3d6:	2340      	movs	r3, #64	; 0x40
 800b3d8:	2000      	movs	r0, #0
 800b3da:	6023      	str	r3, [r4, #0]
 800b3dc:	b016      	add	sp, #88	; 0x58
 800b3de:	bd70      	pop	{r4, r5, r6, pc}

0800b3e0 <__smakebuf_r>:
 800b3e0:	898b      	ldrh	r3, [r1, #12]
 800b3e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3e4:	079d      	lsls	r5, r3, #30
 800b3e6:	4606      	mov	r6, r0
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	d507      	bpl.n	800b3fc <__smakebuf_r+0x1c>
 800b3ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3f0:	6023      	str	r3, [r4, #0]
 800b3f2:	6123      	str	r3, [r4, #16]
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	6163      	str	r3, [r4, #20]
 800b3f8:	b002      	add	sp, #8
 800b3fa:	bd70      	pop	{r4, r5, r6, pc}
 800b3fc:	ab01      	add	r3, sp, #4
 800b3fe:	466a      	mov	r2, sp
 800b400:	f7ff ffca 	bl	800b398 <__swhatbuf_r>
 800b404:	9900      	ldr	r1, [sp, #0]
 800b406:	4605      	mov	r5, r0
 800b408:	4630      	mov	r0, r6
 800b40a:	f7fc ff83 	bl	8008314 <_malloc_r>
 800b40e:	b948      	cbnz	r0, 800b424 <__smakebuf_r+0x44>
 800b410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b414:	059a      	lsls	r2, r3, #22
 800b416:	d4ef      	bmi.n	800b3f8 <__smakebuf_r+0x18>
 800b418:	f023 0303 	bic.w	r3, r3, #3
 800b41c:	f043 0302 	orr.w	r3, r3, #2
 800b420:	81a3      	strh	r3, [r4, #12]
 800b422:	e7e3      	b.n	800b3ec <__smakebuf_r+0xc>
 800b424:	4b0d      	ldr	r3, [pc, #52]	; (800b45c <__smakebuf_r+0x7c>)
 800b426:	62b3      	str	r3, [r6, #40]	; 0x28
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	6020      	str	r0, [r4, #0]
 800b42c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b430:	81a3      	strh	r3, [r4, #12]
 800b432:	9b00      	ldr	r3, [sp, #0]
 800b434:	6163      	str	r3, [r4, #20]
 800b436:	9b01      	ldr	r3, [sp, #4]
 800b438:	6120      	str	r0, [r4, #16]
 800b43a:	b15b      	cbz	r3, 800b454 <__smakebuf_r+0x74>
 800b43c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b440:	4630      	mov	r0, r6
 800b442:	f000 ffd7 	bl	800c3f4 <_isatty_r>
 800b446:	b128      	cbz	r0, 800b454 <__smakebuf_r+0x74>
 800b448:	89a3      	ldrh	r3, [r4, #12]
 800b44a:	f023 0303 	bic.w	r3, r3, #3
 800b44e:	f043 0301 	orr.w	r3, r3, #1
 800b452:	81a3      	strh	r3, [r4, #12]
 800b454:	89a3      	ldrh	r3, [r4, #12]
 800b456:	431d      	orrs	r5, r3
 800b458:	81a5      	strh	r5, [r4, #12]
 800b45a:	e7cd      	b.n	800b3f8 <__smakebuf_r+0x18>
 800b45c:	080080d5 	.word	0x080080d5

0800b460 <malloc>:
 800b460:	4b02      	ldr	r3, [pc, #8]	; (800b46c <malloc+0xc>)
 800b462:	4601      	mov	r1, r0
 800b464:	6818      	ldr	r0, [r3, #0]
 800b466:	f7fc bf55 	b.w	8008314 <_malloc_r>
 800b46a:	bf00      	nop
 800b46c:	20000040 	.word	0x20000040

0800b470 <__ascii_mbtowc>:
 800b470:	b082      	sub	sp, #8
 800b472:	b901      	cbnz	r1, 800b476 <__ascii_mbtowc+0x6>
 800b474:	a901      	add	r1, sp, #4
 800b476:	b142      	cbz	r2, 800b48a <__ascii_mbtowc+0x1a>
 800b478:	b14b      	cbz	r3, 800b48e <__ascii_mbtowc+0x1e>
 800b47a:	7813      	ldrb	r3, [r2, #0]
 800b47c:	600b      	str	r3, [r1, #0]
 800b47e:	7812      	ldrb	r2, [r2, #0]
 800b480:	1c10      	adds	r0, r2, #0
 800b482:	bf18      	it	ne
 800b484:	2001      	movne	r0, #1
 800b486:	b002      	add	sp, #8
 800b488:	4770      	bx	lr
 800b48a:	4610      	mov	r0, r2
 800b48c:	e7fb      	b.n	800b486 <__ascii_mbtowc+0x16>
 800b48e:	f06f 0001 	mvn.w	r0, #1
 800b492:	e7f8      	b.n	800b486 <__ascii_mbtowc+0x16>

0800b494 <memcpy>:
 800b494:	b510      	push	{r4, lr}
 800b496:	1e43      	subs	r3, r0, #1
 800b498:	440a      	add	r2, r1
 800b49a:	4291      	cmp	r1, r2
 800b49c:	d100      	bne.n	800b4a0 <memcpy+0xc>
 800b49e:	bd10      	pop	{r4, pc}
 800b4a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4a8:	e7f7      	b.n	800b49a <memcpy+0x6>

0800b4aa <__malloc_lock>:
 800b4aa:	4770      	bx	lr

0800b4ac <__malloc_unlock>:
 800b4ac:	4770      	bx	lr

0800b4ae <_Balloc>:
 800b4ae:	b570      	push	{r4, r5, r6, lr}
 800b4b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	460e      	mov	r6, r1
 800b4b6:	b93d      	cbnz	r5, 800b4c8 <_Balloc+0x1a>
 800b4b8:	2010      	movs	r0, #16
 800b4ba:	f7ff ffd1 	bl	800b460 <malloc>
 800b4be:	6260      	str	r0, [r4, #36]	; 0x24
 800b4c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b4c4:	6005      	str	r5, [r0, #0]
 800b4c6:	60c5      	str	r5, [r0, #12]
 800b4c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b4ca:	68eb      	ldr	r3, [r5, #12]
 800b4cc:	b183      	cbz	r3, 800b4f0 <_Balloc+0x42>
 800b4ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b4d6:	b9b8      	cbnz	r0, 800b508 <_Balloc+0x5a>
 800b4d8:	2101      	movs	r1, #1
 800b4da:	fa01 f506 	lsl.w	r5, r1, r6
 800b4de:	1d6a      	adds	r2, r5, #5
 800b4e0:	0092      	lsls	r2, r2, #2
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 fbe1 	bl	800bcaa <_calloc_r>
 800b4e8:	b160      	cbz	r0, 800b504 <_Balloc+0x56>
 800b4ea:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b4ee:	e00e      	b.n	800b50e <_Balloc+0x60>
 800b4f0:	2221      	movs	r2, #33	; 0x21
 800b4f2:	2104      	movs	r1, #4
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f000 fbd8 	bl	800bcaa <_calloc_r>
 800b4fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4fc:	60e8      	str	r0, [r5, #12]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1e4      	bne.n	800b4ce <_Balloc+0x20>
 800b504:	2000      	movs	r0, #0
 800b506:	bd70      	pop	{r4, r5, r6, pc}
 800b508:	6802      	ldr	r2, [r0, #0]
 800b50a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b50e:	2300      	movs	r3, #0
 800b510:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b514:	e7f7      	b.n	800b506 <_Balloc+0x58>

0800b516 <_Bfree>:
 800b516:	b570      	push	{r4, r5, r6, lr}
 800b518:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b51a:	4606      	mov	r6, r0
 800b51c:	460d      	mov	r5, r1
 800b51e:	b93c      	cbnz	r4, 800b530 <_Bfree+0x1a>
 800b520:	2010      	movs	r0, #16
 800b522:	f7ff ff9d 	bl	800b460 <malloc>
 800b526:	6270      	str	r0, [r6, #36]	; 0x24
 800b528:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b52c:	6004      	str	r4, [r0, #0]
 800b52e:	60c4      	str	r4, [r0, #12]
 800b530:	b13d      	cbz	r5, 800b542 <_Bfree+0x2c>
 800b532:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b534:	686a      	ldr	r2, [r5, #4]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b53c:	6029      	str	r1, [r5, #0]
 800b53e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b542:	bd70      	pop	{r4, r5, r6, pc}

0800b544 <__multadd>:
 800b544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b548:	690d      	ldr	r5, [r1, #16]
 800b54a:	461f      	mov	r7, r3
 800b54c:	4606      	mov	r6, r0
 800b54e:	460c      	mov	r4, r1
 800b550:	f101 0c14 	add.w	ip, r1, #20
 800b554:	2300      	movs	r3, #0
 800b556:	f8dc 0000 	ldr.w	r0, [ip]
 800b55a:	b281      	uxth	r1, r0
 800b55c:	fb02 7101 	mla	r1, r2, r1, r7
 800b560:	0c0f      	lsrs	r7, r1, #16
 800b562:	0c00      	lsrs	r0, r0, #16
 800b564:	fb02 7000 	mla	r0, r2, r0, r7
 800b568:	b289      	uxth	r1, r1
 800b56a:	3301      	adds	r3, #1
 800b56c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b570:	429d      	cmp	r5, r3
 800b572:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b576:	f84c 1b04 	str.w	r1, [ip], #4
 800b57a:	dcec      	bgt.n	800b556 <__multadd+0x12>
 800b57c:	b1d7      	cbz	r7, 800b5b4 <__multadd+0x70>
 800b57e:	68a3      	ldr	r3, [r4, #8]
 800b580:	42ab      	cmp	r3, r5
 800b582:	dc12      	bgt.n	800b5aa <__multadd+0x66>
 800b584:	6861      	ldr	r1, [r4, #4]
 800b586:	4630      	mov	r0, r6
 800b588:	3101      	adds	r1, #1
 800b58a:	f7ff ff90 	bl	800b4ae <_Balloc>
 800b58e:	6922      	ldr	r2, [r4, #16]
 800b590:	3202      	adds	r2, #2
 800b592:	f104 010c 	add.w	r1, r4, #12
 800b596:	4680      	mov	r8, r0
 800b598:	0092      	lsls	r2, r2, #2
 800b59a:	300c      	adds	r0, #12
 800b59c:	f7ff ff7a 	bl	800b494 <memcpy>
 800b5a0:	4621      	mov	r1, r4
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f7ff ffb7 	bl	800b516 <_Bfree>
 800b5a8:	4644      	mov	r4, r8
 800b5aa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5ae:	3501      	adds	r5, #1
 800b5b0:	615f      	str	r7, [r3, #20]
 800b5b2:	6125      	str	r5, [r4, #16]
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b5ba <__s2b>:
 800b5ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5be:	460c      	mov	r4, r1
 800b5c0:	4615      	mov	r5, r2
 800b5c2:	461f      	mov	r7, r3
 800b5c4:	2209      	movs	r2, #9
 800b5c6:	3308      	adds	r3, #8
 800b5c8:	4606      	mov	r6, r0
 800b5ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	db20      	blt.n	800b618 <__s2b+0x5e>
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	f7ff ff69 	bl	800b4ae <_Balloc>
 800b5dc:	9b08      	ldr	r3, [sp, #32]
 800b5de:	6143      	str	r3, [r0, #20]
 800b5e0:	2d09      	cmp	r5, #9
 800b5e2:	f04f 0301 	mov.w	r3, #1
 800b5e6:	6103      	str	r3, [r0, #16]
 800b5e8:	dd19      	ble.n	800b61e <__s2b+0x64>
 800b5ea:	f104 0809 	add.w	r8, r4, #9
 800b5ee:	46c1      	mov	r9, r8
 800b5f0:	442c      	add	r4, r5
 800b5f2:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b5f6:	4601      	mov	r1, r0
 800b5f8:	3b30      	subs	r3, #48	; 0x30
 800b5fa:	220a      	movs	r2, #10
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	f7ff ffa1 	bl	800b544 <__multadd>
 800b602:	45a1      	cmp	r9, r4
 800b604:	d1f5      	bne.n	800b5f2 <__s2b+0x38>
 800b606:	eb08 0405 	add.w	r4, r8, r5
 800b60a:	3c08      	subs	r4, #8
 800b60c:	1b2d      	subs	r5, r5, r4
 800b60e:	1963      	adds	r3, r4, r5
 800b610:	42bb      	cmp	r3, r7
 800b612:	db07      	blt.n	800b624 <__s2b+0x6a>
 800b614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b618:	0052      	lsls	r2, r2, #1
 800b61a:	3101      	adds	r1, #1
 800b61c:	e7d9      	b.n	800b5d2 <__s2b+0x18>
 800b61e:	340a      	adds	r4, #10
 800b620:	2509      	movs	r5, #9
 800b622:	e7f3      	b.n	800b60c <__s2b+0x52>
 800b624:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b628:	4601      	mov	r1, r0
 800b62a:	3b30      	subs	r3, #48	; 0x30
 800b62c:	220a      	movs	r2, #10
 800b62e:	4630      	mov	r0, r6
 800b630:	f7ff ff88 	bl	800b544 <__multadd>
 800b634:	e7eb      	b.n	800b60e <__s2b+0x54>

0800b636 <__hi0bits>:
 800b636:	0c02      	lsrs	r2, r0, #16
 800b638:	0412      	lsls	r2, r2, #16
 800b63a:	4603      	mov	r3, r0
 800b63c:	b9b2      	cbnz	r2, 800b66c <__hi0bits+0x36>
 800b63e:	0403      	lsls	r3, r0, #16
 800b640:	2010      	movs	r0, #16
 800b642:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b646:	bf04      	itt	eq
 800b648:	021b      	lsleq	r3, r3, #8
 800b64a:	3008      	addeq	r0, #8
 800b64c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b650:	bf04      	itt	eq
 800b652:	011b      	lsleq	r3, r3, #4
 800b654:	3004      	addeq	r0, #4
 800b656:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b65a:	bf04      	itt	eq
 800b65c:	009b      	lsleq	r3, r3, #2
 800b65e:	3002      	addeq	r0, #2
 800b660:	2b00      	cmp	r3, #0
 800b662:	db06      	blt.n	800b672 <__hi0bits+0x3c>
 800b664:	005b      	lsls	r3, r3, #1
 800b666:	d503      	bpl.n	800b670 <__hi0bits+0x3a>
 800b668:	3001      	adds	r0, #1
 800b66a:	4770      	bx	lr
 800b66c:	2000      	movs	r0, #0
 800b66e:	e7e8      	b.n	800b642 <__hi0bits+0xc>
 800b670:	2020      	movs	r0, #32
 800b672:	4770      	bx	lr

0800b674 <__lo0bits>:
 800b674:	6803      	ldr	r3, [r0, #0]
 800b676:	f013 0207 	ands.w	r2, r3, #7
 800b67a:	4601      	mov	r1, r0
 800b67c:	d00b      	beq.n	800b696 <__lo0bits+0x22>
 800b67e:	07da      	lsls	r2, r3, #31
 800b680:	d423      	bmi.n	800b6ca <__lo0bits+0x56>
 800b682:	0798      	lsls	r0, r3, #30
 800b684:	bf49      	itett	mi
 800b686:	085b      	lsrmi	r3, r3, #1
 800b688:	089b      	lsrpl	r3, r3, #2
 800b68a:	2001      	movmi	r0, #1
 800b68c:	600b      	strmi	r3, [r1, #0]
 800b68e:	bf5c      	itt	pl
 800b690:	600b      	strpl	r3, [r1, #0]
 800b692:	2002      	movpl	r0, #2
 800b694:	4770      	bx	lr
 800b696:	b298      	uxth	r0, r3
 800b698:	b9a8      	cbnz	r0, 800b6c6 <__lo0bits+0x52>
 800b69a:	0c1b      	lsrs	r3, r3, #16
 800b69c:	2010      	movs	r0, #16
 800b69e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b6a2:	bf04      	itt	eq
 800b6a4:	0a1b      	lsreq	r3, r3, #8
 800b6a6:	3008      	addeq	r0, #8
 800b6a8:	071a      	lsls	r2, r3, #28
 800b6aa:	bf04      	itt	eq
 800b6ac:	091b      	lsreq	r3, r3, #4
 800b6ae:	3004      	addeq	r0, #4
 800b6b0:	079a      	lsls	r2, r3, #30
 800b6b2:	bf04      	itt	eq
 800b6b4:	089b      	lsreq	r3, r3, #2
 800b6b6:	3002      	addeq	r0, #2
 800b6b8:	07da      	lsls	r2, r3, #31
 800b6ba:	d402      	bmi.n	800b6c2 <__lo0bits+0x4e>
 800b6bc:	085b      	lsrs	r3, r3, #1
 800b6be:	d006      	beq.n	800b6ce <__lo0bits+0x5a>
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	600b      	str	r3, [r1, #0]
 800b6c4:	4770      	bx	lr
 800b6c6:	4610      	mov	r0, r2
 800b6c8:	e7e9      	b.n	800b69e <__lo0bits+0x2a>
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	4770      	bx	lr
 800b6ce:	2020      	movs	r0, #32
 800b6d0:	4770      	bx	lr

0800b6d2 <__i2b>:
 800b6d2:	b510      	push	{r4, lr}
 800b6d4:	460c      	mov	r4, r1
 800b6d6:	2101      	movs	r1, #1
 800b6d8:	f7ff fee9 	bl	800b4ae <_Balloc>
 800b6dc:	2201      	movs	r2, #1
 800b6de:	6144      	str	r4, [r0, #20]
 800b6e0:	6102      	str	r2, [r0, #16]
 800b6e2:	bd10      	pop	{r4, pc}

0800b6e4 <__multiply>:
 800b6e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e8:	4614      	mov	r4, r2
 800b6ea:	690a      	ldr	r2, [r1, #16]
 800b6ec:	6923      	ldr	r3, [r4, #16]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	bfb8      	it	lt
 800b6f2:	460b      	movlt	r3, r1
 800b6f4:	4688      	mov	r8, r1
 800b6f6:	bfbc      	itt	lt
 800b6f8:	46a0      	movlt	r8, r4
 800b6fa:	461c      	movlt	r4, r3
 800b6fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b700:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b704:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b708:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b70c:	eb07 0609 	add.w	r6, r7, r9
 800b710:	42b3      	cmp	r3, r6
 800b712:	bfb8      	it	lt
 800b714:	3101      	addlt	r1, #1
 800b716:	f7ff feca 	bl	800b4ae <_Balloc>
 800b71a:	f100 0514 	add.w	r5, r0, #20
 800b71e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b722:	462b      	mov	r3, r5
 800b724:	2200      	movs	r2, #0
 800b726:	4573      	cmp	r3, lr
 800b728:	d316      	bcc.n	800b758 <__multiply+0x74>
 800b72a:	f104 0214 	add.w	r2, r4, #20
 800b72e:	f108 0114 	add.w	r1, r8, #20
 800b732:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b736:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	9b00      	ldr	r3, [sp, #0]
 800b73e:	9201      	str	r2, [sp, #4]
 800b740:	4293      	cmp	r3, r2
 800b742:	d80c      	bhi.n	800b75e <__multiply+0x7a>
 800b744:	2e00      	cmp	r6, #0
 800b746:	dd03      	ble.n	800b750 <__multiply+0x6c>
 800b748:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d05d      	beq.n	800b80c <__multiply+0x128>
 800b750:	6106      	str	r6, [r0, #16]
 800b752:	b003      	add	sp, #12
 800b754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b758:	f843 2b04 	str.w	r2, [r3], #4
 800b75c:	e7e3      	b.n	800b726 <__multiply+0x42>
 800b75e:	f8b2 b000 	ldrh.w	fp, [r2]
 800b762:	f1bb 0f00 	cmp.w	fp, #0
 800b766:	d023      	beq.n	800b7b0 <__multiply+0xcc>
 800b768:	4689      	mov	r9, r1
 800b76a:	46ac      	mov	ip, r5
 800b76c:	f04f 0800 	mov.w	r8, #0
 800b770:	f859 4b04 	ldr.w	r4, [r9], #4
 800b774:	f8dc a000 	ldr.w	sl, [ip]
 800b778:	b2a3      	uxth	r3, r4
 800b77a:	fa1f fa8a 	uxth.w	sl, sl
 800b77e:	fb0b a303 	mla	r3, fp, r3, sl
 800b782:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b786:	f8dc 4000 	ldr.w	r4, [ip]
 800b78a:	4443      	add	r3, r8
 800b78c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b790:	fb0b 840a 	mla	r4, fp, sl, r8
 800b794:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b798:	46e2      	mov	sl, ip
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b7a0:	454f      	cmp	r7, r9
 800b7a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b7a6:	f84a 3b04 	str.w	r3, [sl], #4
 800b7aa:	d82b      	bhi.n	800b804 <__multiply+0x120>
 800b7ac:	f8cc 8004 	str.w	r8, [ip, #4]
 800b7b0:	9b01      	ldr	r3, [sp, #4]
 800b7b2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b7b6:	3204      	adds	r2, #4
 800b7b8:	f1ba 0f00 	cmp.w	sl, #0
 800b7bc:	d020      	beq.n	800b800 <__multiply+0x11c>
 800b7be:	682b      	ldr	r3, [r5, #0]
 800b7c0:	4689      	mov	r9, r1
 800b7c2:	46a8      	mov	r8, r5
 800b7c4:	f04f 0b00 	mov.w	fp, #0
 800b7c8:	f8b9 c000 	ldrh.w	ip, [r9]
 800b7cc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b7d0:	fb0a 440c 	mla	r4, sl, ip, r4
 800b7d4:	445c      	add	r4, fp
 800b7d6:	46c4      	mov	ip, r8
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b7de:	f84c 3b04 	str.w	r3, [ip], #4
 800b7e2:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7e6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b7ea:	0c1b      	lsrs	r3, r3, #16
 800b7ec:	fb0a b303 	mla	r3, sl, r3, fp
 800b7f0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b7f4:	454f      	cmp	r7, r9
 800b7f6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b7fa:	d805      	bhi.n	800b808 <__multiply+0x124>
 800b7fc:	f8c8 3004 	str.w	r3, [r8, #4]
 800b800:	3504      	adds	r5, #4
 800b802:	e79b      	b.n	800b73c <__multiply+0x58>
 800b804:	46d4      	mov	ip, sl
 800b806:	e7b3      	b.n	800b770 <__multiply+0x8c>
 800b808:	46e0      	mov	r8, ip
 800b80a:	e7dd      	b.n	800b7c8 <__multiply+0xe4>
 800b80c:	3e01      	subs	r6, #1
 800b80e:	e799      	b.n	800b744 <__multiply+0x60>

0800b810 <__pow5mult>:
 800b810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b814:	4615      	mov	r5, r2
 800b816:	f012 0203 	ands.w	r2, r2, #3
 800b81a:	4606      	mov	r6, r0
 800b81c:	460f      	mov	r7, r1
 800b81e:	d007      	beq.n	800b830 <__pow5mult+0x20>
 800b820:	3a01      	subs	r2, #1
 800b822:	4c21      	ldr	r4, [pc, #132]	; (800b8a8 <__pow5mult+0x98>)
 800b824:	2300      	movs	r3, #0
 800b826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b82a:	f7ff fe8b 	bl	800b544 <__multadd>
 800b82e:	4607      	mov	r7, r0
 800b830:	10ad      	asrs	r5, r5, #2
 800b832:	d035      	beq.n	800b8a0 <__pow5mult+0x90>
 800b834:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b836:	b93c      	cbnz	r4, 800b848 <__pow5mult+0x38>
 800b838:	2010      	movs	r0, #16
 800b83a:	f7ff fe11 	bl	800b460 <malloc>
 800b83e:	6270      	str	r0, [r6, #36]	; 0x24
 800b840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b844:	6004      	str	r4, [r0, #0]
 800b846:	60c4      	str	r4, [r0, #12]
 800b848:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b84c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b850:	b94c      	cbnz	r4, 800b866 <__pow5mult+0x56>
 800b852:	f240 2171 	movw	r1, #625	; 0x271
 800b856:	4630      	mov	r0, r6
 800b858:	f7ff ff3b 	bl	800b6d2 <__i2b>
 800b85c:	2300      	movs	r3, #0
 800b85e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b862:	4604      	mov	r4, r0
 800b864:	6003      	str	r3, [r0, #0]
 800b866:	f04f 0800 	mov.w	r8, #0
 800b86a:	07eb      	lsls	r3, r5, #31
 800b86c:	d50a      	bpl.n	800b884 <__pow5mult+0x74>
 800b86e:	4639      	mov	r1, r7
 800b870:	4622      	mov	r2, r4
 800b872:	4630      	mov	r0, r6
 800b874:	f7ff ff36 	bl	800b6e4 <__multiply>
 800b878:	4639      	mov	r1, r7
 800b87a:	4681      	mov	r9, r0
 800b87c:	4630      	mov	r0, r6
 800b87e:	f7ff fe4a 	bl	800b516 <_Bfree>
 800b882:	464f      	mov	r7, r9
 800b884:	106d      	asrs	r5, r5, #1
 800b886:	d00b      	beq.n	800b8a0 <__pow5mult+0x90>
 800b888:	6820      	ldr	r0, [r4, #0]
 800b88a:	b938      	cbnz	r0, 800b89c <__pow5mult+0x8c>
 800b88c:	4622      	mov	r2, r4
 800b88e:	4621      	mov	r1, r4
 800b890:	4630      	mov	r0, r6
 800b892:	f7ff ff27 	bl	800b6e4 <__multiply>
 800b896:	6020      	str	r0, [r4, #0]
 800b898:	f8c0 8000 	str.w	r8, [r0]
 800b89c:	4604      	mov	r4, r0
 800b89e:	e7e4      	b.n	800b86a <__pow5mult+0x5a>
 800b8a0:	4638      	mov	r0, r7
 800b8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8a6:	bf00      	nop
 800b8a8:	0800c800 	.word	0x0800c800

0800b8ac <__lshift>:
 800b8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8b6:	6923      	ldr	r3, [r4, #16]
 800b8b8:	6849      	ldr	r1, [r1, #4]
 800b8ba:	eb0a 0903 	add.w	r9, sl, r3
 800b8be:	68a3      	ldr	r3, [r4, #8]
 800b8c0:	4607      	mov	r7, r0
 800b8c2:	4616      	mov	r6, r2
 800b8c4:	f109 0501 	add.w	r5, r9, #1
 800b8c8:	42ab      	cmp	r3, r5
 800b8ca:	db32      	blt.n	800b932 <__lshift+0x86>
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	f7ff fdee 	bl	800b4ae <_Balloc>
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	4680      	mov	r8, r0
 800b8d6:	f100 0114 	add.w	r1, r0, #20
 800b8da:	461a      	mov	r2, r3
 800b8dc:	4553      	cmp	r3, sl
 800b8de:	db2b      	blt.n	800b938 <__lshift+0x8c>
 800b8e0:	6920      	ldr	r0, [r4, #16]
 800b8e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8e6:	f104 0314 	add.w	r3, r4, #20
 800b8ea:	f016 021f 	ands.w	r2, r6, #31
 800b8ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8f6:	d025      	beq.n	800b944 <__lshift+0x98>
 800b8f8:	f1c2 0e20 	rsb	lr, r2, #32
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	681e      	ldr	r6, [r3, #0]
 800b900:	468a      	mov	sl, r1
 800b902:	4096      	lsls	r6, r2
 800b904:	4330      	orrs	r0, r6
 800b906:	f84a 0b04 	str.w	r0, [sl], #4
 800b90a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b90e:	459c      	cmp	ip, r3
 800b910:	fa20 f00e 	lsr.w	r0, r0, lr
 800b914:	d814      	bhi.n	800b940 <__lshift+0x94>
 800b916:	6048      	str	r0, [r1, #4]
 800b918:	b108      	cbz	r0, 800b91e <__lshift+0x72>
 800b91a:	f109 0502 	add.w	r5, r9, #2
 800b91e:	3d01      	subs	r5, #1
 800b920:	4638      	mov	r0, r7
 800b922:	f8c8 5010 	str.w	r5, [r8, #16]
 800b926:	4621      	mov	r1, r4
 800b928:	f7ff fdf5 	bl	800b516 <_Bfree>
 800b92c:	4640      	mov	r0, r8
 800b92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b932:	3101      	adds	r1, #1
 800b934:	005b      	lsls	r3, r3, #1
 800b936:	e7c7      	b.n	800b8c8 <__lshift+0x1c>
 800b938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b93c:	3301      	adds	r3, #1
 800b93e:	e7cd      	b.n	800b8dc <__lshift+0x30>
 800b940:	4651      	mov	r1, sl
 800b942:	e7dc      	b.n	800b8fe <__lshift+0x52>
 800b944:	3904      	subs	r1, #4
 800b946:	f853 2b04 	ldr.w	r2, [r3], #4
 800b94a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b94e:	459c      	cmp	ip, r3
 800b950:	d8f9      	bhi.n	800b946 <__lshift+0x9a>
 800b952:	e7e4      	b.n	800b91e <__lshift+0x72>

0800b954 <__mcmp>:
 800b954:	6903      	ldr	r3, [r0, #16]
 800b956:	690a      	ldr	r2, [r1, #16]
 800b958:	1a9b      	subs	r3, r3, r2
 800b95a:	b530      	push	{r4, r5, lr}
 800b95c:	d10c      	bne.n	800b978 <__mcmp+0x24>
 800b95e:	0092      	lsls	r2, r2, #2
 800b960:	3014      	adds	r0, #20
 800b962:	3114      	adds	r1, #20
 800b964:	1884      	adds	r4, r0, r2
 800b966:	4411      	add	r1, r2
 800b968:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b96c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b970:	4295      	cmp	r5, r2
 800b972:	d003      	beq.n	800b97c <__mcmp+0x28>
 800b974:	d305      	bcc.n	800b982 <__mcmp+0x2e>
 800b976:	2301      	movs	r3, #1
 800b978:	4618      	mov	r0, r3
 800b97a:	bd30      	pop	{r4, r5, pc}
 800b97c:	42a0      	cmp	r0, r4
 800b97e:	d3f3      	bcc.n	800b968 <__mcmp+0x14>
 800b980:	e7fa      	b.n	800b978 <__mcmp+0x24>
 800b982:	f04f 33ff 	mov.w	r3, #4294967295
 800b986:	e7f7      	b.n	800b978 <__mcmp+0x24>

0800b988 <__mdiff>:
 800b988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b98c:	460d      	mov	r5, r1
 800b98e:	4607      	mov	r7, r0
 800b990:	4611      	mov	r1, r2
 800b992:	4628      	mov	r0, r5
 800b994:	4614      	mov	r4, r2
 800b996:	f7ff ffdd 	bl	800b954 <__mcmp>
 800b99a:	1e06      	subs	r6, r0, #0
 800b99c:	d108      	bne.n	800b9b0 <__mdiff+0x28>
 800b99e:	4631      	mov	r1, r6
 800b9a0:	4638      	mov	r0, r7
 800b9a2:	f7ff fd84 	bl	800b4ae <_Balloc>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9b0:	bfa4      	itt	ge
 800b9b2:	4623      	movge	r3, r4
 800b9b4:	462c      	movge	r4, r5
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	6861      	ldr	r1, [r4, #4]
 800b9ba:	bfa6      	itte	ge
 800b9bc:	461d      	movge	r5, r3
 800b9be:	2600      	movge	r6, #0
 800b9c0:	2601      	movlt	r6, #1
 800b9c2:	f7ff fd74 	bl	800b4ae <_Balloc>
 800b9c6:	692b      	ldr	r3, [r5, #16]
 800b9c8:	60c6      	str	r6, [r0, #12]
 800b9ca:	6926      	ldr	r6, [r4, #16]
 800b9cc:	f105 0914 	add.w	r9, r5, #20
 800b9d0:	f104 0214 	add.w	r2, r4, #20
 800b9d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b9d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b9dc:	f100 0514 	add.w	r5, r0, #20
 800b9e0:	f04f 0e00 	mov.w	lr, #0
 800b9e4:	f852 ab04 	ldr.w	sl, [r2], #4
 800b9e8:	f859 4b04 	ldr.w	r4, [r9], #4
 800b9ec:	fa1e f18a 	uxtah	r1, lr, sl
 800b9f0:	b2a3      	uxth	r3, r4
 800b9f2:	1ac9      	subs	r1, r1, r3
 800b9f4:	0c23      	lsrs	r3, r4, #16
 800b9f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b9fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b9fe:	b289      	uxth	r1, r1
 800ba00:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ba04:	45c8      	cmp	r8, r9
 800ba06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ba0a:	4694      	mov	ip, r2
 800ba0c:	f845 3b04 	str.w	r3, [r5], #4
 800ba10:	d8e8      	bhi.n	800b9e4 <__mdiff+0x5c>
 800ba12:	45bc      	cmp	ip, r7
 800ba14:	d304      	bcc.n	800ba20 <__mdiff+0x98>
 800ba16:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ba1a:	b183      	cbz	r3, 800ba3e <__mdiff+0xb6>
 800ba1c:	6106      	str	r6, [r0, #16]
 800ba1e:	e7c5      	b.n	800b9ac <__mdiff+0x24>
 800ba20:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ba24:	fa1e f381 	uxtah	r3, lr, r1
 800ba28:	141a      	asrs	r2, r3, #16
 800ba2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba34:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ba38:	f845 3b04 	str.w	r3, [r5], #4
 800ba3c:	e7e9      	b.n	800ba12 <__mdiff+0x8a>
 800ba3e:	3e01      	subs	r6, #1
 800ba40:	e7e9      	b.n	800ba16 <__mdiff+0x8e>
	...

0800ba44 <__ulp>:
 800ba44:	4b12      	ldr	r3, [pc, #72]	; (800ba90 <__ulp+0x4c>)
 800ba46:	ee10 2a90 	vmov	r2, s1
 800ba4a:	401a      	ands	r2, r3
 800ba4c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	dd04      	ble.n	800ba5e <__ulp+0x1a>
 800ba54:	2000      	movs	r0, #0
 800ba56:	4619      	mov	r1, r3
 800ba58:	ec41 0b10 	vmov	d0, r0, r1
 800ba5c:	4770      	bx	lr
 800ba5e:	425b      	negs	r3, r3
 800ba60:	151b      	asrs	r3, r3, #20
 800ba62:	2b13      	cmp	r3, #19
 800ba64:	f04f 0000 	mov.w	r0, #0
 800ba68:	f04f 0100 	mov.w	r1, #0
 800ba6c:	dc04      	bgt.n	800ba78 <__ulp+0x34>
 800ba6e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ba72:	fa42 f103 	asr.w	r1, r2, r3
 800ba76:	e7ef      	b.n	800ba58 <__ulp+0x14>
 800ba78:	3b14      	subs	r3, #20
 800ba7a:	2b1e      	cmp	r3, #30
 800ba7c:	f04f 0201 	mov.w	r2, #1
 800ba80:	bfda      	itte	le
 800ba82:	f1c3 031f 	rsble	r3, r3, #31
 800ba86:	fa02 f303 	lslle.w	r3, r2, r3
 800ba8a:	4613      	movgt	r3, r2
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	e7e3      	b.n	800ba58 <__ulp+0x14>
 800ba90:	7ff00000 	.word	0x7ff00000

0800ba94 <__b2d>:
 800ba94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba96:	6905      	ldr	r5, [r0, #16]
 800ba98:	f100 0714 	add.w	r7, r0, #20
 800ba9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800baa0:	1f2e      	subs	r6, r5, #4
 800baa2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800baa6:	4620      	mov	r0, r4
 800baa8:	f7ff fdc5 	bl	800b636 <__hi0bits>
 800baac:	f1c0 0320 	rsb	r3, r0, #32
 800bab0:	280a      	cmp	r0, #10
 800bab2:	600b      	str	r3, [r1, #0]
 800bab4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800bb2c <__b2d+0x98>
 800bab8:	dc14      	bgt.n	800bae4 <__b2d+0x50>
 800baba:	f1c0 0e0b 	rsb	lr, r0, #11
 800babe:	fa24 f10e 	lsr.w	r1, r4, lr
 800bac2:	42b7      	cmp	r7, r6
 800bac4:	ea41 030c 	orr.w	r3, r1, ip
 800bac8:	bf34      	ite	cc
 800baca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bace:	2100      	movcs	r1, #0
 800bad0:	3015      	adds	r0, #21
 800bad2:	fa04 f000 	lsl.w	r0, r4, r0
 800bad6:	fa21 f10e 	lsr.w	r1, r1, lr
 800bada:	ea40 0201 	orr.w	r2, r0, r1
 800bade:	ec43 2b10 	vmov	d0, r2, r3
 800bae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bae4:	42b7      	cmp	r7, r6
 800bae6:	bf3a      	itte	cc
 800bae8:	f1a5 0608 	subcc.w	r6, r5, #8
 800baec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800baf0:	2100      	movcs	r1, #0
 800baf2:	380b      	subs	r0, #11
 800baf4:	d015      	beq.n	800bb22 <__b2d+0x8e>
 800baf6:	4084      	lsls	r4, r0
 800baf8:	f1c0 0520 	rsb	r5, r0, #32
 800bafc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800bb00:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800bb04:	42be      	cmp	r6, r7
 800bb06:	fa21 fc05 	lsr.w	ip, r1, r5
 800bb0a:	ea44 030c 	orr.w	r3, r4, ip
 800bb0e:	bf8c      	ite	hi
 800bb10:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bb14:	2400      	movls	r4, #0
 800bb16:	fa01 f000 	lsl.w	r0, r1, r0
 800bb1a:	40ec      	lsrs	r4, r5
 800bb1c:	ea40 0204 	orr.w	r2, r0, r4
 800bb20:	e7dd      	b.n	800bade <__b2d+0x4a>
 800bb22:	ea44 030c 	orr.w	r3, r4, ip
 800bb26:	460a      	mov	r2, r1
 800bb28:	e7d9      	b.n	800bade <__b2d+0x4a>
 800bb2a:	bf00      	nop
 800bb2c:	3ff00000 	.word	0x3ff00000

0800bb30 <__d2b>:
 800bb30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb34:	460e      	mov	r6, r1
 800bb36:	2101      	movs	r1, #1
 800bb38:	ec59 8b10 	vmov	r8, r9, d0
 800bb3c:	4615      	mov	r5, r2
 800bb3e:	f7ff fcb6 	bl	800b4ae <_Balloc>
 800bb42:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bb46:	4607      	mov	r7, r0
 800bb48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb4c:	bb34      	cbnz	r4, 800bb9c <__d2b+0x6c>
 800bb4e:	9301      	str	r3, [sp, #4]
 800bb50:	f1b8 0300 	subs.w	r3, r8, #0
 800bb54:	d027      	beq.n	800bba6 <__d2b+0x76>
 800bb56:	a802      	add	r0, sp, #8
 800bb58:	f840 3d08 	str.w	r3, [r0, #-8]!
 800bb5c:	f7ff fd8a 	bl	800b674 <__lo0bits>
 800bb60:	9900      	ldr	r1, [sp, #0]
 800bb62:	b1f0      	cbz	r0, 800bba2 <__d2b+0x72>
 800bb64:	9a01      	ldr	r2, [sp, #4]
 800bb66:	f1c0 0320 	rsb	r3, r0, #32
 800bb6a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb6e:	430b      	orrs	r3, r1
 800bb70:	40c2      	lsrs	r2, r0
 800bb72:	617b      	str	r3, [r7, #20]
 800bb74:	9201      	str	r2, [sp, #4]
 800bb76:	9b01      	ldr	r3, [sp, #4]
 800bb78:	61bb      	str	r3, [r7, #24]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	bf14      	ite	ne
 800bb7e:	2102      	movne	r1, #2
 800bb80:	2101      	moveq	r1, #1
 800bb82:	6139      	str	r1, [r7, #16]
 800bb84:	b1c4      	cbz	r4, 800bbb8 <__d2b+0x88>
 800bb86:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bb8a:	4404      	add	r4, r0
 800bb8c:	6034      	str	r4, [r6, #0]
 800bb8e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb92:	6028      	str	r0, [r5, #0]
 800bb94:	4638      	mov	r0, r7
 800bb96:	b003      	add	sp, #12
 800bb98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bba0:	e7d5      	b.n	800bb4e <__d2b+0x1e>
 800bba2:	6179      	str	r1, [r7, #20]
 800bba4:	e7e7      	b.n	800bb76 <__d2b+0x46>
 800bba6:	a801      	add	r0, sp, #4
 800bba8:	f7ff fd64 	bl	800b674 <__lo0bits>
 800bbac:	9b01      	ldr	r3, [sp, #4]
 800bbae:	617b      	str	r3, [r7, #20]
 800bbb0:	2101      	movs	r1, #1
 800bbb2:	6139      	str	r1, [r7, #16]
 800bbb4:	3020      	adds	r0, #32
 800bbb6:	e7e5      	b.n	800bb84 <__d2b+0x54>
 800bbb8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bbbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bbc0:	6030      	str	r0, [r6, #0]
 800bbc2:	6918      	ldr	r0, [r3, #16]
 800bbc4:	f7ff fd37 	bl	800b636 <__hi0bits>
 800bbc8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bbcc:	e7e1      	b.n	800bb92 <__d2b+0x62>

0800bbce <__ratio>:
 800bbce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd2:	4688      	mov	r8, r1
 800bbd4:	4669      	mov	r1, sp
 800bbd6:	4681      	mov	r9, r0
 800bbd8:	f7ff ff5c 	bl	800ba94 <__b2d>
 800bbdc:	a901      	add	r1, sp, #4
 800bbde:	4640      	mov	r0, r8
 800bbe0:	ec57 6b10 	vmov	r6, r7, d0
 800bbe4:	f7ff ff56 	bl	800ba94 <__b2d>
 800bbe8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bbf0:	eba3 0c02 	sub.w	ip, r3, r2
 800bbf4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bbf8:	1a9b      	subs	r3, r3, r2
 800bbfa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bbfe:	ec5b ab10 	vmov	sl, fp, d0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	bfce      	itee	gt
 800bc06:	463a      	movgt	r2, r7
 800bc08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc0c:	465a      	movle	r2, fp
 800bc0e:	4659      	mov	r1, fp
 800bc10:	463d      	mov	r5, r7
 800bc12:	bfd4      	ite	le
 800bc14:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800bc18:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	ee10 2a10 	vmov	r2, s0
 800bc22:	460b      	mov	r3, r1
 800bc24:	4629      	mov	r1, r5
 800bc26:	f7f4 fe39 	bl	800089c <__aeabi_ddiv>
 800bc2a:	ec41 0b10 	vmov	d0, r0, r1
 800bc2e:	b003      	add	sp, #12
 800bc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc34 <__copybits>:
 800bc34:	3901      	subs	r1, #1
 800bc36:	b510      	push	{r4, lr}
 800bc38:	1149      	asrs	r1, r1, #5
 800bc3a:	6914      	ldr	r4, [r2, #16]
 800bc3c:	3101      	adds	r1, #1
 800bc3e:	f102 0314 	add.w	r3, r2, #20
 800bc42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc4a:	42a3      	cmp	r3, r4
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	d303      	bcc.n	800bc58 <__copybits+0x24>
 800bc50:	2300      	movs	r3, #0
 800bc52:	428a      	cmp	r2, r1
 800bc54:	d305      	bcc.n	800bc62 <__copybits+0x2e>
 800bc56:	bd10      	pop	{r4, pc}
 800bc58:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc5c:	f840 2b04 	str.w	r2, [r0], #4
 800bc60:	e7f3      	b.n	800bc4a <__copybits+0x16>
 800bc62:	f842 3b04 	str.w	r3, [r2], #4
 800bc66:	e7f4      	b.n	800bc52 <__copybits+0x1e>

0800bc68 <__any_on>:
 800bc68:	f100 0214 	add.w	r2, r0, #20
 800bc6c:	6900      	ldr	r0, [r0, #16]
 800bc6e:	114b      	asrs	r3, r1, #5
 800bc70:	4298      	cmp	r0, r3
 800bc72:	b510      	push	{r4, lr}
 800bc74:	db11      	blt.n	800bc9a <__any_on+0x32>
 800bc76:	dd0a      	ble.n	800bc8e <__any_on+0x26>
 800bc78:	f011 011f 	ands.w	r1, r1, #31
 800bc7c:	d007      	beq.n	800bc8e <__any_on+0x26>
 800bc7e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bc82:	fa24 f001 	lsr.w	r0, r4, r1
 800bc86:	fa00 f101 	lsl.w	r1, r0, r1
 800bc8a:	428c      	cmp	r4, r1
 800bc8c:	d10b      	bne.n	800bca6 <__any_on+0x3e>
 800bc8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d803      	bhi.n	800bc9e <__any_on+0x36>
 800bc96:	2000      	movs	r0, #0
 800bc98:	bd10      	pop	{r4, pc}
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	e7f7      	b.n	800bc8e <__any_on+0x26>
 800bc9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bca2:	2900      	cmp	r1, #0
 800bca4:	d0f5      	beq.n	800bc92 <__any_on+0x2a>
 800bca6:	2001      	movs	r0, #1
 800bca8:	e7f6      	b.n	800bc98 <__any_on+0x30>

0800bcaa <_calloc_r>:
 800bcaa:	b538      	push	{r3, r4, r5, lr}
 800bcac:	fb02 f401 	mul.w	r4, r2, r1
 800bcb0:	4621      	mov	r1, r4
 800bcb2:	f7fc fb2f 	bl	8008314 <_malloc_r>
 800bcb6:	4605      	mov	r5, r0
 800bcb8:	b118      	cbz	r0, 800bcc2 <_calloc_r+0x18>
 800bcba:	4622      	mov	r2, r4
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	f7fc fad3 	bl	8008268 <memset>
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	bd38      	pop	{r3, r4, r5, pc}

0800bcc6 <__ssputs_r>:
 800bcc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcca:	688e      	ldr	r6, [r1, #8]
 800bccc:	429e      	cmp	r6, r3
 800bcce:	4682      	mov	sl, r0
 800bcd0:	460c      	mov	r4, r1
 800bcd2:	4690      	mov	r8, r2
 800bcd4:	4699      	mov	r9, r3
 800bcd6:	d837      	bhi.n	800bd48 <__ssputs_r+0x82>
 800bcd8:	898a      	ldrh	r2, [r1, #12]
 800bcda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bcde:	d031      	beq.n	800bd44 <__ssputs_r+0x7e>
 800bce0:	6825      	ldr	r5, [r4, #0]
 800bce2:	6909      	ldr	r1, [r1, #16]
 800bce4:	1a6f      	subs	r7, r5, r1
 800bce6:	6965      	ldr	r5, [r4, #20]
 800bce8:	2302      	movs	r3, #2
 800bcea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bcee:	fb95 f5f3 	sdiv	r5, r5, r3
 800bcf2:	f109 0301 	add.w	r3, r9, #1
 800bcf6:	443b      	add	r3, r7
 800bcf8:	429d      	cmp	r5, r3
 800bcfa:	bf38      	it	cc
 800bcfc:	461d      	movcc	r5, r3
 800bcfe:	0553      	lsls	r3, r2, #21
 800bd00:	d530      	bpl.n	800bd64 <__ssputs_r+0x9e>
 800bd02:	4629      	mov	r1, r5
 800bd04:	f7fc fb06 	bl	8008314 <_malloc_r>
 800bd08:	4606      	mov	r6, r0
 800bd0a:	b950      	cbnz	r0, 800bd22 <__ssputs_r+0x5c>
 800bd0c:	230c      	movs	r3, #12
 800bd0e:	f8ca 3000 	str.w	r3, [sl]
 800bd12:	89a3      	ldrh	r3, [r4, #12]
 800bd14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd18:	81a3      	strh	r3, [r4, #12]
 800bd1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd22:	463a      	mov	r2, r7
 800bd24:	6921      	ldr	r1, [r4, #16]
 800bd26:	f7ff fbb5 	bl	800b494 <memcpy>
 800bd2a:	89a3      	ldrh	r3, [r4, #12]
 800bd2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd34:	81a3      	strh	r3, [r4, #12]
 800bd36:	6126      	str	r6, [r4, #16]
 800bd38:	6165      	str	r5, [r4, #20]
 800bd3a:	443e      	add	r6, r7
 800bd3c:	1bed      	subs	r5, r5, r7
 800bd3e:	6026      	str	r6, [r4, #0]
 800bd40:	60a5      	str	r5, [r4, #8]
 800bd42:	464e      	mov	r6, r9
 800bd44:	454e      	cmp	r6, r9
 800bd46:	d900      	bls.n	800bd4a <__ssputs_r+0x84>
 800bd48:	464e      	mov	r6, r9
 800bd4a:	4632      	mov	r2, r6
 800bd4c:	4641      	mov	r1, r8
 800bd4e:	6820      	ldr	r0, [r4, #0]
 800bd50:	f000 fb60 	bl	800c414 <memmove>
 800bd54:	68a3      	ldr	r3, [r4, #8]
 800bd56:	1b9b      	subs	r3, r3, r6
 800bd58:	60a3      	str	r3, [r4, #8]
 800bd5a:	6823      	ldr	r3, [r4, #0]
 800bd5c:	441e      	add	r6, r3
 800bd5e:	6026      	str	r6, [r4, #0]
 800bd60:	2000      	movs	r0, #0
 800bd62:	e7dc      	b.n	800bd1e <__ssputs_r+0x58>
 800bd64:	462a      	mov	r2, r5
 800bd66:	f000 fb6e 	bl	800c446 <_realloc_r>
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d1e2      	bne.n	800bd36 <__ssputs_r+0x70>
 800bd70:	6921      	ldr	r1, [r4, #16]
 800bd72:	4650      	mov	r0, sl
 800bd74:	f7fc fa80 	bl	8008278 <_free_r>
 800bd78:	e7c8      	b.n	800bd0c <__ssputs_r+0x46>
	...

0800bd7c <_svfiprintf_r>:
 800bd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd80:	461d      	mov	r5, r3
 800bd82:	898b      	ldrh	r3, [r1, #12]
 800bd84:	061f      	lsls	r7, r3, #24
 800bd86:	b09d      	sub	sp, #116	; 0x74
 800bd88:	4680      	mov	r8, r0
 800bd8a:	460c      	mov	r4, r1
 800bd8c:	4616      	mov	r6, r2
 800bd8e:	d50f      	bpl.n	800bdb0 <_svfiprintf_r+0x34>
 800bd90:	690b      	ldr	r3, [r1, #16]
 800bd92:	b96b      	cbnz	r3, 800bdb0 <_svfiprintf_r+0x34>
 800bd94:	2140      	movs	r1, #64	; 0x40
 800bd96:	f7fc fabd 	bl	8008314 <_malloc_r>
 800bd9a:	6020      	str	r0, [r4, #0]
 800bd9c:	6120      	str	r0, [r4, #16]
 800bd9e:	b928      	cbnz	r0, 800bdac <_svfiprintf_r+0x30>
 800bda0:	230c      	movs	r3, #12
 800bda2:	f8c8 3000 	str.w	r3, [r8]
 800bda6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdaa:	e0c8      	b.n	800bf3e <_svfiprintf_r+0x1c2>
 800bdac:	2340      	movs	r3, #64	; 0x40
 800bdae:	6163      	str	r3, [r4, #20]
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	9309      	str	r3, [sp, #36]	; 0x24
 800bdb4:	2320      	movs	r3, #32
 800bdb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdba:	2330      	movs	r3, #48	; 0x30
 800bdbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdc0:	9503      	str	r5, [sp, #12]
 800bdc2:	f04f 0b01 	mov.w	fp, #1
 800bdc6:	4637      	mov	r7, r6
 800bdc8:	463d      	mov	r5, r7
 800bdca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bdce:	b10b      	cbz	r3, 800bdd4 <_svfiprintf_r+0x58>
 800bdd0:	2b25      	cmp	r3, #37	; 0x25
 800bdd2:	d13e      	bne.n	800be52 <_svfiprintf_r+0xd6>
 800bdd4:	ebb7 0a06 	subs.w	sl, r7, r6
 800bdd8:	d00b      	beq.n	800bdf2 <_svfiprintf_r+0x76>
 800bdda:	4653      	mov	r3, sl
 800bddc:	4632      	mov	r2, r6
 800bdde:	4621      	mov	r1, r4
 800bde0:	4640      	mov	r0, r8
 800bde2:	f7ff ff70 	bl	800bcc6 <__ssputs_r>
 800bde6:	3001      	adds	r0, #1
 800bde8:	f000 80a4 	beq.w	800bf34 <_svfiprintf_r+0x1b8>
 800bdec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdee:	4453      	add	r3, sl
 800bdf0:	9309      	str	r3, [sp, #36]	; 0x24
 800bdf2:	783b      	ldrb	r3, [r7, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f000 809d 	beq.w	800bf34 <_svfiprintf_r+0x1b8>
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	f04f 32ff 	mov.w	r2, #4294967295
 800be00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be04:	9304      	str	r3, [sp, #16]
 800be06:	9307      	str	r3, [sp, #28]
 800be08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be0c:	931a      	str	r3, [sp, #104]	; 0x68
 800be0e:	462f      	mov	r7, r5
 800be10:	2205      	movs	r2, #5
 800be12:	f817 1b01 	ldrb.w	r1, [r7], #1
 800be16:	4850      	ldr	r0, [pc, #320]	; (800bf58 <_svfiprintf_r+0x1dc>)
 800be18:	f7f4 fa0a 	bl	8000230 <memchr>
 800be1c:	9b04      	ldr	r3, [sp, #16]
 800be1e:	b9d0      	cbnz	r0, 800be56 <_svfiprintf_r+0xda>
 800be20:	06d9      	lsls	r1, r3, #27
 800be22:	bf44      	itt	mi
 800be24:	2220      	movmi	r2, #32
 800be26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be2a:	071a      	lsls	r2, r3, #28
 800be2c:	bf44      	itt	mi
 800be2e:	222b      	movmi	r2, #43	; 0x2b
 800be30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be34:	782a      	ldrb	r2, [r5, #0]
 800be36:	2a2a      	cmp	r2, #42	; 0x2a
 800be38:	d015      	beq.n	800be66 <_svfiprintf_r+0xea>
 800be3a:	9a07      	ldr	r2, [sp, #28]
 800be3c:	462f      	mov	r7, r5
 800be3e:	2000      	movs	r0, #0
 800be40:	250a      	movs	r5, #10
 800be42:	4639      	mov	r1, r7
 800be44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be48:	3b30      	subs	r3, #48	; 0x30
 800be4a:	2b09      	cmp	r3, #9
 800be4c:	d94d      	bls.n	800beea <_svfiprintf_r+0x16e>
 800be4e:	b1b8      	cbz	r0, 800be80 <_svfiprintf_r+0x104>
 800be50:	e00f      	b.n	800be72 <_svfiprintf_r+0xf6>
 800be52:	462f      	mov	r7, r5
 800be54:	e7b8      	b.n	800bdc8 <_svfiprintf_r+0x4c>
 800be56:	4a40      	ldr	r2, [pc, #256]	; (800bf58 <_svfiprintf_r+0x1dc>)
 800be58:	1a80      	subs	r0, r0, r2
 800be5a:	fa0b f000 	lsl.w	r0, fp, r0
 800be5e:	4318      	orrs	r0, r3
 800be60:	9004      	str	r0, [sp, #16]
 800be62:	463d      	mov	r5, r7
 800be64:	e7d3      	b.n	800be0e <_svfiprintf_r+0x92>
 800be66:	9a03      	ldr	r2, [sp, #12]
 800be68:	1d11      	adds	r1, r2, #4
 800be6a:	6812      	ldr	r2, [r2, #0]
 800be6c:	9103      	str	r1, [sp, #12]
 800be6e:	2a00      	cmp	r2, #0
 800be70:	db01      	blt.n	800be76 <_svfiprintf_r+0xfa>
 800be72:	9207      	str	r2, [sp, #28]
 800be74:	e004      	b.n	800be80 <_svfiprintf_r+0x104>
 800be76:	4252      	negs	r2, r2
 800be78:	f043 0302 	orr.w	r3, r3, #2
 800be7c:	9207      	str	r2, [sp, #28]
 800be7e:	9304      	str	r3, [sp, #16]
 800be80:	783b      	ldrb	r3, [r7, #0]
 800be82:	2b2e      	cmp	r3, #46	; 0x2e
 800be84:	d10c      	bne.n	800bea0 <_svfiprintf_r+0x124>
 800be86:	787b      	ldrb	r3, [r7, #1]
 800be88:	2b2a      	cmp	r3, #42	; 0x2a
 800be8a:	d133      	bne.n	800bef4 <_svfiprintf_r+0x178>
 800be8c:	9b03      	ldr	r3, [sp, #12]
 800be8e:	1d1a      	adds	r2, r3, #4
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	9203      	str	r2, [sp, #12]
 800be94:	2b00      	cmp	r3, #0
 800be96:	bfb8      	it	lt
 800be98:	f04f 33ff 	movlt.w	r3, #4294967295
 800be9c:	3702      	adds	r7, #2
 800be9e:	9305      	str	r3, [sp, #20]
 800bea0:	4d2e      	ldr	r5, [pc, #184]	; (800bf5c <_svfiprintf_r+0x1e0>)
 800bea2:	7839      	ldrb	r1, [r7, #0]
 800bea4:	2203      	movs	r2, #3
 800bea6:	4628      	mov	r0, r5
 800bea8:	f7f4 f9c2 	bl	8000230 <memchr>
 800beac:	b138      	cbz	r0, 800bebe <_svfiprintf_r+0x142>
 800beae:	2340      	movs	r3, #64	; 0x40
 800beb0:	1b40      	subs	r0, r0, r5
 800beb2:	fa03 f000 	lsl.w	r0, r3, r0
 800beb6:	9b04      	ldr	r3, [sp, #16]
 800beb8:	4303      	orrs	r3, r0
 800beba:	3701      	adds	r7, #1
 800bebc:	9304      	str	r3, [sp, #16]
 800bebe:	7839      	ldrb	r1, [r7, #0]
 800bec0:	4827      	ldr	r0, [pc, #156]	; (800bf60 <_svfiprintf_r+0x1e4>)
 800bec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bec6:	2206      	movs	r2, #6
 800bec8:	1c7e      	adds	r6, r7, #1
 800beca:	f7f4 f9b1 	bl	8000230 <memchr>
 800bece:	2800      	cmp	r0, #0
 800bed0:	d038      	beq.n	800bf44 <_svfiprintf_r+0x1c8>
 800bed2:	4b24      	ldr	r3, [pc, #144]	; (800bf64 <_svfiprintf_r+0x1e8>)
 800bed4:	bb13      	cbnz	r3, 800bf1c <_svfiprintf_r+0x1a0>
 800bed6:	9b03      	ldr	r3, [sp, #12]
 800bed8:	3307      	adds	r3, #7
 800beda:	f023 0307 	bic.w	r3, r3, #7
 800bede:	3308      	adds	r3, #8
 800bee0:	9303      	str	r3, [sp, #12]
 800bee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee4:	444b      	add	r3, r9
 800bee6:	9309      	str	r3, [sp, #36]	; 0x24
 800bee8:	e76d      	b.n	800bdc6 <_svfiprintf_r+0x4a>
 800beea:	fb05 3202 	mla	r2, r5, r2, r3
 800beee:	2001      	movs	r0, #1
 800bef0:	460f      	mov	r7, r1
 800bef2:	e7a6      	b.n	800be42 <_svfiprintf_r+0xc6>
 800bef4:	2300      	movs	r3, #0
 800bef6:	3701      	adds	r7, #1
 800bef8:	9305      	str	r3, [sp, #20]
 800befa:	4619      	mov	r1, r3
 800befc:	250a      	movs	r5, #10
 800befe:	4638      	mov	r0, r7
 800bf00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf04:	3a30      	subs	r2, #48	; 0x30
 800bf06:	2a09      	cmp	r2, #9
 800bf08:	d903      	bls.n	800bf12 <_svfiprintf_r+0x196>
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d0c8      	beq.n	800bea0 <_svfiprintf_r+0x124>
 800bf0e:	9105      	str	r1, [sp, #20]
 800bf10:	e7c6      	b.n	800bea0 <_svfiprintf_r+0x124>
 800bf12:	fb05 2101 	mla	r1, r5, r1, r2
 800bf16:	2301      	movs	r3, #1
 800bf18:	4607      	mov	r7, r0
 800bf1a:	e7f0      	b.n	800befe <_svfiprintf_r+0x182>
 800bf1c:	ab03      	add	r3, sp, #12
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	4622      	mov	r2, r4
 800bf22:	4b11      	ldr	r3, [pc, #68]	; (800bf68 <_svfiprintf_r+0x1ec>)
 800bf24:	a904      	add	r1, sp, #16
 800bf26:	4640      	mov	r0, r8
 800bf28:	f7fc fae2 	bl	80084f0 <_printf_float>
 800bf2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bf30:	4681      	mov	r9, r0
 800bf32:	d1d6      	bne.n	800bee2 <_svfiprintf_r+0x166>
 800bf34:	89a3      	ldrh	r3, [r4, #12]
 800bf36:	065b      	lsls	r3, r3, #25
 800bf38:	f53f af35 	bmi.w	800bda6 <_svfiprintf_r+0x2a>
 800bf3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf3e:	b01d      	add	sp, #116	; 0x74
 800bf40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf44:	ab03      	add	r3, sp, #12
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	4622      	mov	r2, r4
 800bf4a:	4b07      	ldr	r3, [pc, #28]	; (800bf68 <_svfiprintf_r+0x1ec>)
 800bf4c:	a904      	add	r1, sp, #16
 800bf4e:	4640      	mov	r0, r8
 800bf50:	f7fc fd84 	bl	8008a5c <_printf_i>
 800bf54:	e7ea      	b.n	800bf2c <_svfiprintf_r+0x1b0>
 800bf56:	bf00      	nop
 800bf58:	0800c80c 	.word	0x0800c80c
 800bf5c:	0800c812 	.word	0x0800c812
 800bf60:	0800c816 	.word	0x0800c816
 800bf64:	080084f1 	.word	0x080084f1
 800bf68:	0800bcc7 	.word	0x0800bcc7

0800bf6c <__sfputc_r>:
 800bf6c:	6893      	ldr	r3, [r2, #8]
 800bf6e:	3b01      	subs	r3, #1
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	b410      	push	{r4}
 800bf74:	6093      	str	r3, [r2, #8]
 800bf76:	da08      	bge.n	800bf8a <__sfputc_r+0x1e>
 800bf78:	6994      	ldr	r4, [r2, #24]
 800bf7a:	42a3      	cmp	r3, r4
 800bf7c:	db01      	blt.n	800bf82 <__sfputc_r+0x16>
 800bf7e:	290a      	cmp	r1, #10
 800bf80:	d103      	bne.n	800bf8a <__sfputc_r+0x1e>
 800bf82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf86:	f000 b955 	b.w	800c234 <__swbuf_r>
 800bf8a:	6813      	ldr	r3, [r2, #0]
 800bf8c:	1c58      	adds	r0, r3, #1
 800bf8e:	6010      	str	r0, [r2, #0]
 800bf90:	7019      	strb	r1, [r3, #0]
 800bf92:	4608      	mov	r0, r1
 800bf94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf98:	4770      	bx	lr

0800bf9a <__sfputs_r>:
 800bf9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9c:	4606      	mov	r6, r0
 800bf9e:	460f      	mov	r7, r1
 800bfa0:	4614      	mov	r4, r2
 800bfa2:	18d5      	adds	r5, r2, r3
 800bfa4:	42ac      	cmp	r4, r5
 800bfa6:	d101      	bne.n	800bfac <__sfputs_r+0x12>
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	e007      	b.n	800bfbc <__sfputs_r+0x22>
 800bfac:	463a      	mov	r2, r7
 800bfae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	f7ff ffda 	bl	800bf6c <__sfputc_r>
 800bfb8:	1c43      	adds	r3, r0, #1
 800bfba:	d1f3      	bne.n	800bfa4 <__sfputs_r+0xa>
 800bfbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bfc0 <_vfiprintf_r>:
 800bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	460c      	mov	r4, r1
 800bfc6:	b09d      	sub	sp, #116	; 0x74
 800bfc8:	4617      	mov	r7, r2
 800bfca:	461d      	mov	r5, r3
 800bfcc:	4606      	mov	r6, r0
 800bfce:	b118      	cbz	r0, 800bfd8 <_vfiprintf_r+0x18>
 800bfd0:	6983      	ldr	r3, [r0, #24]
 800bfd2:	b90b      	cbnz	r3, 800bfd8 <_vfiprintf_r+0x18>
 800bfd4:	f7fc f89a 	bl	800810c <__sinit>
 800bfd8:	4b7c      	ldr	r3, [pc, #496]	; (800c1cc <_vfiprintf_r+0x20c>)
 800bfda:	429c      	cmp	r4, r3
 800bfdc:	d158      	bne.n	800c090 <_vfiprintf_r+0xd0>
 800bfde:	6874      	ldr	r4, [r6, #4]
 800bfe0:	89a3      	ldrh	r3, [r4, #12]
 800bfe2:	0718      	lsls	r0, r3, #28
 800bfe4:	d55e      	bpl.n	800c0a4 <_vfiprintf_r+0xe4>
 800bfe6:	6923      	ldr	r3, [r4, #16]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d05b      	beq.n	800c0a4 <_vfiprintf_r+0xe4>
 800bfec:	2300      	movs	r3, #0
 800bfee:	9309      	str	r3, [sp, #36]	; 0x24
 800bff0:	2320      	movs	r3, #32
 800bff2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bff6:	2330      	movs	r3, #48	; 0x30
 800bff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bffc:	9503      	str	r5, [sp, #12]
 800bffe:	f04f 0b01 	mov.w	fp, #1
 800c002:	46b8      	mov	r8, r7
 800c004:	4645      	mov	r5, r8
 800c006:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c00a:	b10b      	cbz	r3, 800c010 <_vfiprintf_r+0x50>
 800c00c:	2b25      	cmp	r3, #37	; 0x25
 800c00e:	d154      	bne.n	800c0ba <_vfiprintf_r+0xfa>
 800c010:	ebb8 0a07 	subs.w	sl, r8, r7
 800c014:	d00b      	beq.n	800c02e <_vfiprintf_r+0x6e>
 800c016:	4653      	mov	r3, sl
 800c018:	463a      	mov	r2, r7
 800c01a:	4621      	mov	r1, r4
 800c01c:	4630      	mov	r0, r6
 800c01e:	f7ff ffbc 	bl	800bf9a <__sfputs_r>
 800c022:	3001      	adds	r0, #1
 800c024:	f000 80c2 	beq.w	800c1ac <_vfiprintf_r+0x1ec>
 800c028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c02a:	4453      	add	r3, sl
 800c02c:	9309      	str	r3, [sp, #36]	; 0x24
 800c02e:	f898 3000 	ldrb.w	r3, [r8]
 800c032:	2b00      	cmp	r3, #0
 800c034:	f000 80ba 	beq.w	800c1ac <_vfiprintf_r+0x1ec>
 800c038:	2300      	movs	r3, #0
 800c03a:	f04f 32ff 	mov.w	r2, #4294967295
 800c03e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c042:	9304      	str	r3, [sp, #16]
 800c044:	9307      	str	r3, [sp, #28]
 800c046:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c04a:	931a      	str	r3, [sp, #104]	; 0x68
 800c04c:	46a8      	mov	r8, r5
 800c04e:	2205      	movs	r2, #5
 800c050:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c054:	485e      	ldr	r0, [pc, #376]	; (800c1d0 <_vfiprintf_r+0x210>)
 800c056:	f7f4 f8eb 	bl	8000230 <memchr>
 800c05a:	9b04      	ldr	r3, [sp, #16]
 800c05c:	bb78      	cbnz	r0, 800c0be <_vfiprintf_r+0xfe>
 800c05e:	06d9      	lsls	r1, r3, #27
 800c060:	bf44      	itt	mi
 800c062:	2220      	movmi	r2, #32
 800c064:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c068:	071a      	lsls	r2, r3, #28
 800c06a:	bf44      	itt	mi
 800c06c:	222b      	movmi	r2, #43	; 0x2b
 800c06e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c072:	782a      	ldrb	r2, [r5, #0]
 800c074:	2a2a      	cmp	r2, #42	; 0x2a
 800c076:	d02a      	beq.n	800c0ce <_vfiprintf_r+0x10e>
 800c078:	9a07      	ldr	r2, [sp, #28]
 800c07a:	46a8      	mov	r8, r5
 800c07c:	2000      	movs	r0, #0
 800c07e:	250a      	movs	r5, #10
 800c080:	4641      	mov	r1, r8
 800c082:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c086:	3b30      	subs	r3, #48	; 0x30
 800c088:	2b09      	cmp	r3, #9
 800c08a:	d969      	bls.n	800c160 <_vfiprintf_r+0x1a0>
 800c08c:	b360      	cbz	r0, 800c0e8 <_vfiprintf_r+0x128>
 800c08e:	e024      	b.n	800c0da <_vfiprintf_r+0x11a>
 800c090:	4b50      	ldr	r3, [pc, #320]	; (800c1d4 <_vfiprintf_r+0x214>)
 800c092:	429c      	cmp	r4, r3
 800c094:	d101      	bne.n	800c09a <_vfiprintf_r+0xda>
 800c096:	68b4      	ldr	r4, [r6, #8]
 800c098:	e7a2      	b.n	800bfe0 <_vfiprintf_r+0x20>
 800c09a:	4b4f      	ldr	r3, [pc, #316]	; (800c1d8 <_vfiprintf_r+0x218>)
 800c09c:	429c      	cmp	r4, r3
 800c09e:	bf08      	it	eq
 800c0a0:	68f4      	ldreq	r4, [r6, #12]
 800c0a2:	e79d      	b.n	800bfe0 <_vfiprintf_r+0x20>
 800c0a4:	4621      	mov	r1, r4
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f000 f924 	bl	800c2f4 <__swsetup_r>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d09d      	beq.n	800bfec <_vfiprintf_r+0x2c>
 800c0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b4:	b01d      	add	sp, #116	; 0x74
 800c0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ba:	46a8      	mov	r8, r5
 800c0bc:	e7a2      	b.n	800c004 <_vfiprintf_r+0x44>
 800c0be:	4a44      	ldr	r2, [pc, #272]	; (800c1d0 <_vfiprintf_r+0x210>)
 800c0c0:	1a80      	subs	r0, r0, r2
 800c0c2:	fa0b f000 	lsl.w	r0, fp, r0
 800c0c6:	4318      	orrs	r0, r3
 800c0c8:	9004      	str	r0, [sp, #16]
 800c0ca:	4645      	mov	r5, r8
 800c0cc:	e7be      	b.n	800c04c <_vfiprintf_r+0x8c>
 800c0ce:	9a03      	ldr	r2, [sp, #12]
 800c0d0:	1d11      	adds	r1, r2, #4
 800c0d2:	6812      	ldr	r2, [r2, #0]
 800c0d4:	9103      	str	r1, [sp, #12]
 800c0d6:	2a00      	cmp	r2, #0
 800c0d8:	db01      	blt.n	800c0de <_vfiprintf_r+0x11e>
 800c0da:	9207      	str	r2, [sp, #28]
 800c0dc:	e004      	b.n	800c0e8 <_vfiprintf_r+0x128>
 800c0de:	4252      	negs	r2, r2
 800c0e0:	f043 0302 	orr.w	r3, r3, #2
 800c0e4:	9207      	str	r2, [sp, #28]
 800c0e6:	9304      	str	r3, [sp, #16]
 800c0e8:	f898 3000 	ldrb.w	r3, [r8]
 800c0ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c0ee:	d10e      	bne.n	800c10e <_vfiprintf_r+0x14e>
 800c0f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c0f4:	2b2a      	cmp	r3, #42	; 0x2a
 800c0f6:	d138      	bne.n	800c16a <_vfiprintf_r+0x1aa>
 800c0f8:	9b03      	ldr	r3, [sp, #12]
 800c0fa:	1d1a      	adds	r2, r3, #4
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	9203      	str	r2, [sp, #12]
 800c100:	2b00      	cmp	r3, #0
 800c102:	bfb8      	it	lt
 800c104:	f04f 33ff 	movlt.w	r3, #4294967295
 800c108:	f108 0802 	add.w	r8, r8, #2
 800c10c:	9305      	str	r3, [sp, #20]
 800c10e:	4d33      	ldr	r5, [pc, #204]	; (800c1dc <_vfiprintf_r+0x21c>)
 800c110:	f898 1000 	ldrb.w	r1, [r8]
 800c114:	2203      	movs	r2, #3
 800c116:	4628      	mov	r0, r5
 800c118:	f7f4 f88a 	bl	8000230 <memchr>
 800c11c:	b140      	cbz	r0, 800c130 <_vfiprintf_r+0x170>
 800c11e:	2340      	movs	r3, #64	; 0x40
 800c120:	1b40      	subs	r0, r0, r5
 800c122:	fa03 f000 	lsl.w	r0, r3, r0
 800c126:	9b04      	ldr	r3, [sp, #16]
 800c128:	4303      	orrs	r3, r0
 800c12a:	f108 0801 	add.w	r8, r8, #1
 800c12e:	9304      	str	r3, [sp, #16]
 800c130:	f898 1000 	ldrb.w	r1, [r8]
 800c134:	482a      	ldr	r0, [pc, #168]	; (800c1e0 <_vfiprintf_r+0x220>)
 800c136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c13a:	2206      	movs	r2, #6
 800c13c:	f108 0701 	add.w	r7, r8, #1
 800c140:	f7f4 f876 	bl	8000230 <memchr>
 800c144:	2800      	cmp	r0, #0
 800c146:	d037      	beq.n	800c1b8 <_vfiprintf_r+0x1f8>
 800c148:	4b26      	ldr	r3, [pc, #152]	; (800c1e4 <_vfiprintf_r+0x224>)
 800c14a:	bb1b      	cbnz	r3, 800c194 <_vfiprintf_r+0x1d4>
 800c14c:	9b03      	ldr	r3, [sp, #12]
 800c14e:	3307      	adds	r3, #7
 800c150:	f023 0307 	bic.w	r3, r3, #7
 800c154:	3308      	adds	r3, #8
 800c156:	9303      	str	r3, [sp, #12]
 800c158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c15a:	444b      	add	r3, r9
 800c15c:	9309      	str	r3, [sp, #36]	; 0x24
 800c15e:	e750      	b.n	800c002 <_vfiprintf_r+0x42>
 800c160:	fb05 3202 	mla	r2, r5, r2, r3
 800c164:	2001      	movs	r0, #1
 800c166:	4688      	mov	r8, r1
 800c168:	e78a      	b.n	800c080 <_vfiprintf_r+0xc0>
 800c16a:	2300      	movs	r3, #0
 800c16c:	f108 0801 	add.w	r8, r8, #1
 800c170:	9305      	str	r3, [sp, #20]
 800c172:	4619      	mov	r1, r3
 800c174:	250a      	movs	r5, #10
 800c176:	4640      	mov	r0, r8
 800c178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c17c:	3a30      	subs	r2, #48	; 0x30
 800c17e:	2a09      	cmp	r2, #9
 800c180:	d903      	bls.n	800c18a <_vfiprintf_r+0x1ca>
 800c182:	2b00      	cmp	r3, #0
 800c184:	d0c3      	beq.n	800c10e <_vfiprintf_r+0x14e>
 800c186:	9105      	str	r1, [sp, #20]
 800c188:	e7c1      	b.n	800c10e <_vfiprintf_r+0x14e>
 800c18a:	fb05 2101 	mla	r1, r5, r1, r2
 800c18e:	2301      	movs	r3, #1
 800c190:	4680      	mov	r8, r0
 800c192:	e7f0      	b.n	800c176 <_vfiprintf_r+0x1b6>
 800c194:	ab03      	add	r3, sp, #12
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	4622      	mov	r2, r4
 800c19a:	4b13      	ldr	r3, [pc, #76]	; (800c1e8 <_vfiprintf_r+0x228>)
 800c19c:	a904      	add	r1, sp, #16
 800c19e:	4630      	mov	r0, r6
 800c1a0:	f7fc f9a6 	bl	80084f0 <_printf_float>
 800c1a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c1a8:	4681      	mov	r9, r0
 800c1aa:	d1d5      	bne.n	800c158 <_vfiprintf_r+0x198>
 800c1ac:	89a3      	ldrh	r3, [r4, #12]
 800c1ae:	065b      	lsls	r3, r3, #25
 800c1b0:	f53f af7e 	bmi.w	800c0b0 <_vfiprintf_r+0xf0>
 800c1b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1b6:	e77d      	b.n	800c0b4 <_vfiprintf_r+0xf4>
 800c1b8:	ab03      	add	r3, sp, #12
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	4622      	mov	r2, r4
 800c1be:	4b0a      	ldr	r3, [pc, #40]	; (800c1e8 <_vfiprintf_r+0x228>)
 800c1c0:	a904      	add	r1, sp, #16
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f7fc fc4a 	bl	8008a5c <_printf_i>
 800c1c8:	e7ec      	b.n	800c1a4 <_vfiprintf_r+0x1e4>
 800c1ca:	bf00      	nop
 800c1cc:	0800c628 	.word	0x0800c628
 800c1d0:	0800c80c 	.word	0x0800c80c
 800c1d4:	0800c648 	.word	0x0800c648
 800c1d8:	0800c608 	.word	0x0800c608
 800c1dc:	0800c812 	.word	0x0800c812
 800c1e0:	0800c816 	.word	0x0800c816
 800c1e4:	080084f1 	.word	0x080084f1
 800c1e8:	0800bf9b 	.word	0x0800bf9b

0800c1ec <_read_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4c07      	ldr	r4, [pc, #28]	; (800c20c <_read_r+0x20>)
 800c1f0:	4605      	mov	r5, r0
 800c1f2:	4608      	mov	r0, r1
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	6022      	str	r2, [r4, #0]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	f7f6 fcb6 	bl	8002b6c <_read>
 800c200:	1c43      	adds	r3, r0, #1
 800c202:	d102      	bne.n	800c20a <_read_r+0x1e>
 800c204:	6823      	ldr	r3, [r4, #0]
 800c206:	b103      	cbz	r3, 800c20a <_read_r+0x1e>
 800c208:	602b      	str	r3, [r5, #0]
 800c20a:	bd38      	pop	{r3, r4, r5, pc}
 800c20c:	20000888 	.word	0x20000888

0800c210 <strncmp>:
 800c210:	b510      	push	{r4, lr}
 800c212:	b16a      	cbz	r2, 800c230 <strncmp+0x20>
 800c214:	3901      	subs	r1, #1
 800c216:	1884      	adds	r4, r0, r2
 800c218:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c21c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c220:	4293      	cmp	r3, r2
 800c222:	d103      	bne.n	800c22c <strncmp+0x1c>
 800c224:	42a0      	cmp	r0, r4
 800c226:	d001      	beq.n	800c22c <strncmp+0x1c>
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d1f5      	bne.n	800c218 <strncmp+0x8>
 800c22c:	1a98      	subs	r0, r3, r2
 800c22e:	bd10      	pop	{r4, pc}
 800c230:	4610      	mov	r0, r2
 800c232:	e7fc      	b.n	800c22e <strncmp+0x1e>

0800c234 <__swbuf_r>:
 800c234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c236:	460e      	mov	r6, r1
 800c238:	4614      	mov	r4, r2
 800c23a:	4605      	mov	r5, r0
 800c23c:	b118      	cbz	r0, 800c246 <__swbuf_r+0x12>
 800c23e:	6983      	ldr	r3, [r0, #24]
 800c240:	b90b      	cbnz	r3, 800c246 <__swbuf_r+0x12>
 800c242:	f7fb ff63 	bl	800810c <__sinit>
 800c246:	4b21      	ldr	r3, [pc, #132]	; (800c2cc <__swbuf_r+0x98>)
 800c248:	429c      	cmp	r4, r3
 800c24a:	d12a      	bne.n	800c2a2 <__swbuf_r+0x6e>
 800c24c:	686c      	ldr	r4, [r5, #4]
 800c24e:	69a3      	ldr	r3, [r4, #24]
 800c250:	60a3      	str	r3, [r4, #8]
 800c252:	89a3      	ldrh	r3, [r4, #12]
 800c254:	071a      	lsls	r2, r3, #28
 800c256:	d52e      	bpl.n	800c2b6 <__swbuf_r+0x82>
 800c258:	6923      	ldr	r3, [r4, #16]
 800c25a:	b363      	cbz	r3, 800c2b6 <__swbuf_r+0x82>
 800c25c:	6923      	ldr	r3, [r4, #16]
 800c25e:	6820      	ldr	r0, [r4, #0]
 800c260:	1ac0      	subs	r0, r0, r3
 800c262:	6963      	ldr	r3, [r4, #20]
 800c264:	b2f6      	uxtb	r6, r6
 800c266:	4283      	cmp	r3, r0
 800c268:	4637      	mov	r7, r6
 800c26a:	dc04      	bgt.n	800c276 <__swbuf_r+0x42>
 800c26c:	4621      	mov	r1, r4
 800c26e:	4628      	mov	r0, r5
 800c270:	f7fb fed0 	bl	8008014 <_fflush_r>
 800c274:	bb28      	cbnz	r0, 800c2c2 <__swbuf_r+0x8e>
 800c276:	68a3      	ldr	r3, [r4, #8]
 800c278:	3b01      	subs	r3, #1
 800c27a:	60a3      	str	r3, [r4, #8]
 800c27c:	6823      	ldr	r3, [r4, #0]
 800c27e:	1c5a      	adds	r2, r3, #1
 800c280:	6022      	str	r2, [r4, #0]
 800c282:	701e      	strb	r6, [r3, #0]
 800c284:	6963      	ldr	r3, [r4, #20]
 800c286:	3001      	adds	r0, #1
 800c288:	4283      	cmp	r3, r0
 800c28a:	d004      	beq.n	800c296 <__swbuf_r+0x62>
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	07db      	lsls	r3, r3, #31
 800c290:	d519      	bpl.n	800c2c6 <__swbuf_r+0x92>
 800c292:	2e0a      	cmp	r6, #10
 800c294:	d117      	bne.n	800c2c6 <__swbuf_r+0x92>
 800c296:	4621      	mov	r1, r4
 800c298:	4628      	mov	r0, r5
 800c29a:	f7fb febb 	bl	8008014 <_fflush_r>
 800c29e:	b190      	cbz	r0, 800c2c6 <__swbuf_r+0x92>
 800c2a0:	e00f      	b.n	800c2c2 <__swbuf_r+0x8e>
 800c2a2:	4b0b      	ldr	r3, [pc, #44]	; (800c2d0 <__swbuf_r+0x9c>)
 800c2a4:	429c      	cmp	r4, r3
 800c2a6:	d101      	bne.n	800c2ac <__swbuf_r+0x78>
 800c2a8:	68ac      	ldr	r4, [r5, #8]
 800c2aa:	e7d0      	b.n	800c24e <__swbuf_r+0x1a>
 800c2ac:	4b09      	ldr	r3, [pc, #36]	; (800c2d4 <__swbuf_r+0xa0>)
 800c2ae:	429c      	cmp	r4, r3
 800c2b0:	bf08      	it	eq
 800c2b2:	68ec      	ldreq	r4, [r5, #12]
 800c2b4:	e7cb      	b.n	800c24e <__swbuf_r+0x1a>
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	f000 f81b 	bl	800c2f4 <__swsetup_r>
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d0cc      	beq.n	800c25c <__swbuf_r+0x28>
 800c2c2:	f04f 37ff 	mov.w	r7, #4294967295
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	0800c628 	.word	0x0800c628
 800c2d0:	0800c648 	.word	0x0800c648
 800c2d4:	0800c608 	.word	0x0800c608

0800c2d8 <__ascii_wctomb>:
 800c2d8:	b149      	cbz	r1, 800c2ee <__ascii_wctomb+0x16>
 800c2da:	2aff      	cmp	r2, #255	; 0xff
 800c2dc:	bf85      	ittet	hi
 800c2de:	238a      	movhi	r3, #138	; 0x8a
 800c2e0:	6003      	strhi	r3, [r0, #0]
 800c2e2:	700a      	strbls	r2, [r1, #0]
 800c2e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c2e8:	bf98      	it	ls
 800c2ea:	2001      	movls	r0, #1
 800c2ec:	4770      	bx	lr
 800c2ee:	4608      	mov	r0, r1
 800c2f0:	4770      	bx	lr
	...

0800c2f4 <__swsetup_r>:
 800c2f4:	4b32      	ldr	r3, [pc, #200]	; (800c3c0 <__swsetup_r+0xcc>)
 800c2f6:	b570      	push	{r4, r5, r6, lr}
 800c2f8:	681d      	ldr	r5, [r3, #0]
 800c2fa:	4606      	mov	r6, r0
 800c2fc:	460c      	mov	r4, r1
 800c2fe:	b125      	cbz	r5, 800c30a <__swsetup_r+0x16>
 800c300:	69ab      	ldr	r3, [r5, #24]
 800c302:	b913      	cbnz	r3, 800c30a <__swsetup_r+0x16>
 800c304:	4628      	mov	r0, r5
 800c306:	f7fb ff01 	bl	800810c <__sinit>
 800c30a:	4b2e      	ldr	r3, [pc, #184]	; (800c3c4 <__swsetup_r+0xd0>)
 800c30c:	429c      	cmp	r4, r3
 800c30e:	d10f      	bne.n	800c330 <__swsetup_r+0x3c>
 800c310:	686c      	ldr	r4, [r5, #4]
 800c312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c316:	b29a      	uxth	r2, r3
 800c318:	0715      	lsls	r5, r2, #28
 800c31a:	d42c      	bmi.n	800c376 <__swsetup_r+0x82>
 800c31c:	06d0      	lsls	r0, r2, #27
 800c31e:	d411      	bmi.n	800c344 <__swsetup_r+0x50>
 800c320:	2209      	movs	r2, #9
 800c322:	6032      	str	r2, [r6, #0]
 800c324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c328:	81a3      	strh	r3, [r4, #12]
 800c32a:	f04f 30ff 	mov.w	r0, #4294967295
 800c32e:	e03e      	b.n	800c3ae <__swsetup_r+0xba>
 800c330:	4b25      	ldr	r3, [pc, #148]	; (800c3c8 <__swsetup_r+0xd4>)
 800c332:	429c      	cmp	r4, r3
 800c334:	d101      	bne.n	800c33a <__swsetup_r+0x46>
 800c336:	68ac      	ldr	r4, [r5, #8]
 800c338:	e7eb      	b.n	800c312 <__swsetup_r+0x1e>
 800c33a:	4b24      	ldr	r3, [pc, #144]	; (800c3cc <__swsetup_r+0xd8>)
 800c33c:	429c      	cmp	r4, r3
 800c33e:	bf08      	it	eq
 800c340:	68ec      	ldreq	r4, [r5, #12]
 800c342:	e7e6      	b.n	800c312 <__swsetup_r+0x1e>
 800c344:	0751      	lsls	r1, r2, #29
 800c346:	d512      	bpl.n	800c36e <__swsetup_r+0x7a>
 800c348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c34a:	b141      	cbz	r1, 800c35e <__swsetup_r+0x6a>
 800c34c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c350:	4299      	cmp	r1, r3
 800c352:	d002      	beq.n	800c35a <__swsetup_r+0x66>
 800c354:	4630      	mov	r0, r6
 800c356:	f7fb ff8f 	bl	8008278 <_free_r>
 800c35a:	2300      	movs	r3, #0
 800c35c:	6363      	str	r3, [r4, #52]	; 0x34
 800c35e:	89a3      	ldrh	r3, [r4, #12]
 800c360:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c364:	81a3      	strh	r3, [r4, #12]
 800c366:	2300      	movs	r3, #0
 800c368:	6063      	str	r3, [r4, #4]
 800c36a:	6923      	ldr	r3, [r4, #16]
 800c36c:	6023      	str	r3, [r4, #0]
 800c36e:	89a3      	ldrh	r3, [r4, #12]
 800c370:	f043 0308 	orr.w	r3, r3, #8
 800c374:	81a3      	strh	r3, [r4, #12]
 800c376:	6923      	ldr	r3, [r4, #16]
 800c378:	b94b      	cbnz	r3, 800c38e <__swsetup_r+0x9a>
 800c37a:	89a3      	ldrh	r3, [r4, #12]
 800c37c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c384:	d003      	beq.n	800c38e <__swsetup_r+0x9a>
 800c386:	4621      	mov	r1, r4
 800c388:	4630      	mov	r0, r6
 800c38a:	f7ff f829 	bl	800b3e0 <__smakebuf_r>
 800c38e:	89a2      	ldrh	r2, [r4, #12]
 800c390:	f012 0301 	ands.w	r3, r2, #1
 800c394:	d00c      	beq.n	800c3b0 <__swsetup_r+0xbc>
 800c396:	2300      	movs	r3, #0
 800c398:	60a3      	str	r3, [r4, #8]
 800c39a:	6963      	ldr	r3, [r4, #20]
 800c39c:	425b      	negs	r3, r3
 800c39e:	61a3      	str	r3, [r4, #24]
 800c3a0:	6923      	ldr	r3, [r4, #16]
 800c3a2:	b953      	cbnz	r3, 800c3ba <__swsetup_r+0xc6>
 800c3a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c3ac:	d1ba      	bne.n	800c324 <__swsetup_r+0x30>
 800c3ae:	bd70      	pop	{r4, r5, r6, pc}
 800c3b0:	0792      	lsls	r2, r2, #30
 800c3b2:	bf58      	it	pl
 800c3b4:	6963      	ldrpl	r3, [r4, #20]
 800c3b6:	60a3      	str	r3, [r4, #8]
 800c3b8:	e7f2      	b.n	800c3a0 <__swsetup_r+0xac>
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	e7f7      	b.n	800c3ae <__swsetup_r+0xba>
 800c3be:	bf00      	nop
 800c3c0:	20000040 	.word	0x20000040
 800c3c4:	0800c628 	.word	0x0800c628
 800c3c8:	0800c648 	.word	0x0800c648
 800c3cc:	0800c608 	.word	0x0800c608

0800c3d0 <_fstat_r>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	4c07      	ldr	r4, [pc, #28]	; (800c3f0 <_fstat_r+0x20>)
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	4608      	mov	r0, r1
 800c3da:	4611      	mov	r1, r2
 800c3dc:	6023      	str	r3, [r4, #0]
 800c3de:	f7f6 fc13 	bl	8002c08 <_fstat>
 800c3e2:	1c43      	adds	r3, r0, #1
 800c3e4:	d102      	bne.n	800c3ec <_fstat_r+0x1c>
 800c3e6:	6823      	ldr	r3, [r4, #0]
 800c3e8:	b103      	cbz	r3, 800c3ec <_fstat_r+0x1c>
 800c3ea:	602b      	str	r3, [r5, #0]
 800c3ec:	bd38      	pop	{r3, r4, r5, pc}
 800c3ee:	bf00      	nop
 800c3f0:	20000888 	.word	0x20000888

0800c3f4 <_isatty_r>:
 800c3f4:	b538      	push	{r3, r4, r5, lr}
 800c3f6:	4c06      	ldr	r4, [pc, #24]	; (800c410 <_isatty_r+0x1c>)
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	4605      	mov	r5, r0
 800c3fc:	4608      	mov	r0, r1
 800c3fe:	6023      	str	r3, [r4, #0]
 800c400:	f7f6 fc12 	bl	8002c28 <_isatty>
 800c404:	1c43      	adds	r3, r0, #1
 800c406:	d102      	bne.n	800c40e <_isatty_r+0x1a>
 800c408:	6823      	ldr	r3, [r4, #0]
 800c40a:	b103      	cbz	r3, 800c40e <_isatty_r+0x1a>
 800c40c:	602b      	str	r3, [r5, #0]
 800c40e:	bd38      	pop	{r3, r4, r5, pc}
 800c410:	20000888 	.word	0x20000888

0800c414 <memmove>:
 800c414:	4288      	cmp	r0, r1
 800c416:	b510      	push	{r4, lr}
 800c418:	eb01 0302 	add.w	r3, r1, r2
 800c41c:	d807      	bhi.n	800c42e <memmove+0x1a>
 800c41e:	1e42      	subs	r2, r0, #1
 800c420:	4299      	cmp	r1, r3
 800c422:	d00a      	beq.n	800c43a <memmove+0x26>
 800c424:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c428:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c42c:	e7f8      	b.n	800c420 <memmove+0xc>
 800c42e:	4283      	cmp	r3, r0
 800c430:	d9f5      	bls.n	800c41e <memmove+0xa>
 800c432:	1881      	adds	r1, r0, r2
 800c434:	1ad2      	subs	r2, r2, r3
 800c436:	42d3      	cmn	r3, r2
 800c438:	d100      	bne.n	800c43c <memmove+0x28>
 800c43a:	bd10      	pop	{r4, pc}
 800c43c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c440:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c444:	e7f7      	b.n	800c436 <memmove+0x22>

0800c446 <_realloc_r>:
 800c446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c448:	4607      	mov	r7, r0
 800c44a:	4614      	mov	r4, r2
 800c44c:	460e      	mov	r6, r1
 800c44e:	b921      	cbnz	r1, 800c45a <_realloc_r+0x14>
 800c450:	4611      	mov	r1, r2
 800c452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c456:	f7fb bf5d 	b.w	8008314 <_malloc_r>
 800c45a:	b922      	cbnz	r2, 800c466 <_realloc_r+0x20>
 800c45c:	f7fb ff0c 	bl	8008278 <_free_r>
 800c460:	4625      	mov	r5, r4
 800c462:	4628      	mov	r0, r5
 800c464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c466:	f000 f814 	bl	800c492 <_malloc_usable_size_r>
 800c46a:	42a0      	cmp	r0, r4
 800c46c:	d20f      	bcs.n	800c48e <_realloc_r+0x48>
 800c46e:	4621      	mov	r1, r4
 800c470:	4638      	mov	r0, r7
 800c472:	f7fb ff4f 	bl	8008314 <_malloc_r>
 800c476:	4605      	mov	r5, r0
 800c478:	2800      	cmp	r0, #0
 800c47a:	d0f2      	beq.n	800c462 <_realloc_r+0x1c>
 800c47c:	4631      	mov	r1, r6
 800c47e:	4622      	mov	r2, r4
 800c480:	f7ff f808 	bl	800b494 <memcpy>
 800c484:	4631      	mov	r1, r6
 800c486:	4638      	mov	r0, r7
 800c488:	f7fb fef6 	bl	8008278 <_free_r>
 800c48c:	e7e9      	b.n	800c462 <_realloc_r+0x1c>
 800c48e:	4635      	mov	r5, r6
 800c490:	e7e7      	b.n	800c462 <_realloc_r+0x1c>

0800c492 <_malloc_usable_size_r>:
 800c492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c496:	1f18      	subs	r0, r3, #4
 800c498:	2b00      	cmp	r3, #0
 800c49a:	bfbc      	itt	lt
 800c49c:	580b      	ldrlt	r3, [r1, r0]
 800c49e:	18c0      	addlt	r0, r0, r3
 800c4a0:	4770      	bx	lr
	...

0800c4a4 <_init>:
 800c4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4a6:	bf00      	nop
 800c4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4aa:	bc08      	pop	{r3}
 800c4ac:	469e      	mov	lr, r3
 800c4ae:	4770      	bx	lr

0800c4b0 <_fini>:
 800c4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b2:	bf00      	nop
 800c4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4b6:	bc08      	pop	{r3}
 800c4b8:	469e      	mov	lr, r3
 800c4ba:	4770      	bx	lr
